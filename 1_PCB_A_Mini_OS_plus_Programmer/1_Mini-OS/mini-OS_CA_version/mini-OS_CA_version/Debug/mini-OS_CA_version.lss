
mini-OS_CA_version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00005c4a  00005cde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000eb  008001c6  008001c6  00005da4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005da4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00005e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ac  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  000098e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ebf  00000000  00000000  0000a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c34  00000000  00000000  0000e0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cdd  00000000  00000000  0000ecdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a3d  00000000  00000000  0000f9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  000153f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <__ctors_end>
       4:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
       8:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
       c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      10:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      14:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      18:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      1c:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__vector_7>
      20:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      24:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__vector_9>
      28:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      2c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      30:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      34:	0c 94 d9 18 	jmp	0x31b2	; 0x31b2 <__vector_13>
      38:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      3c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      40:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__vector_16>
      44:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      48:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      4c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      50:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      54:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      58:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      5c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      60:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__vector_24>
      64:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__bad_interrupt>
      68:	3d 02       	muls	r19, r29
      6a:	3b 02       	muls	r19, r27
      6c:	43 02       	muls	r20, r19
      6e:	07 02       	muls	r16, r23
      70:	0c 02       	muls	r16, r28
      72:	10 02       	muls	r17, r16
      74:	15 02       	muls	r17, r21
      76:	1a 02       	muls	r17, r26
      78:	1e 02       	muls	r17, r30
      7a:	23 02       	muls	r18, r19
      7c:	27 02       	muls	r18, r23
      7e:	2c 02       	muls	r18, r28
      80:	31 02       	muls	r19, r17
      82:	43 02       	muls	r20, r19
      84:	43 02       	muls	r20, r19
      86:	43 02       	muls	r20, r19
      88:	43 02       	muls	r20, r19
      8a:	43 02       	muls	r20, r19
      8c:	43 02       	muls	r20, r19
      8e:	43 02       	muls	r20, r19
      90:	43 02       	muls	r20, r19
      92:	43 02       	muls	r20, r19
      94:	43 02       	muls	r20, r19
      96:	43 02       	muls	r20, r19
      98:	3f 02       	muls	r19, r31
      9a:	43 02       	muls	r20, r19
      9c:	43 02       	muls	r20, r19
      9e:	43 02       	muls	r20, r19
      a0:	43 02       	muls	r20, r19
      a2:	43 02       	muls	r20, r19
      a4:	43 02       	muls	r20, r19
      a6:	43 02       	muls	r20, r19
      a8:	43 02       	muls	r20, r19
      aa:	43 02       	muls	r20, r19
      ac:	43 02       	muls	r20, r19
      ae:	36 02       	muls	r19, r22
      b0:	43 02       	muls	r20, r19
      b2:	43 02       	muls	r20, r19
      b4:	43 02       	muls	r20, r19
      b6:	43 02       	muls	r20, r19
      b8:	43 02       	muls	r20, r19
      ba:	43 02       	muls	r20, r19
      bc:	43 02       	muls	r20, r19
      be:	3f 02       	muls	r19, r31
      c0:	43 02       	muls	r20, r19
      c2:	43 02       	muls	r20, r19
      c4:	43 02       	muls	r20, r19
      c6:	43 02       	muls	r20, r19
      c8:	43 02       	muls	r20, r19
      ca:	43 02       	muls	r20, r19
      cc:	3b 02       	muls	r19, r27
      ce:	43 02       	muls	r20, r19
      d0:	43 02       	muls	r20, r19
      d2:	43 02       	muls	r20, r19
      d4:	43 02       	muls	r20, r19
      d6:	43 02       	muls	r20, r19
      d8:	3f 02       	muls	r19, r31
      da:	4f 02       	muls	r20, r31
      dc:	5d 02       	muls	r21, r29
      de:	51 02       	muls	r21, r17
      e0:	53 02       	muls	r21, r19
      e2:	55 02       	muls	r21, r21
      e4:	57 02       	muls	r21, r23
      e6:	59 02       	muls	r21, r25
      e8:	5b 02       	muls	r21, r27
      ea:	b6 02       	muls	r27, r22
      ec:	d4 02       	muls	r29, r20
      ee:	f2 02       	muls	r31, r18
      f0:	10 03       	mulsu	r17, r16
      f2:	2e 03       	fmul	r18, r22
      f4:	4c 03       	fmul	r20, r20
      f6:	69 03       	fmul	r22, r17
      f8:	86 03       	fmuls	r16, r22
      fa:	b6 03       	fmuls	r19, r22
      fc:	b3 03       	fmuls	r19, r19
      fe:	b3 03       	fmuls	r19, r19
     100:	b0 03       	fmuls	r19, r16
     102:	56 04       	cpc	r5, r6
     104:	b0 03       	fmuls	r19, r16
     106:	b0 03       	fmuls	r19, r16
     108:	b0 03       	fmuls	r19, r16
     10a:	b0 03       	fmuls	r19, r16
     10c:	a4 04       	cpc	r10, r4
     10e:	a4 04       	cpc	r10, r4
     110:	a4 04       	cpc	r10, r4
     112:	a4 04       	cpc	r10, r4
     114:	a4 04       	cpc	r10, r4
     116:	a4 04       	cpc	r10, r4
     118:	a4 04       	cpc	r10, r4
     11a:	a4 04       	cpc	r10, r4
     11c:	a4 04       	cpc	r10, r4
     11e:	a4 04       	cpc	r10, r4
     120:	a4 04       	cpc	r10, r4
     122:	a4 04       	cpc	r10, r4
     124:	a4 04       	cpc	r10, r4
     126:	a4 04       	cpc	r10, r4
     128:	a4 04       	cpc	r10, r4
     12a:	a4 04       	cpc	r10, r4
     12c:	a4 04       	cpc	r10, r4
     12e:	a4 04       	cpc	r10, r4
     130:	a4 04       	cpc	r10, r4
     132:	a4 04       	cpc	r10, r4
     134:	a4 04       	cpc	r10, r4
     136:	a4 04       	cpc	r10, r4
     138:	a4 04       	cpc	r10, r4
     13a:	a4 04       	cpc	r10, r4
     13c:	a4 04       	cpc	r10, r4
     13e:	a4 04       	cpc	r10, r4
     140:	a4 04       	cpc	r10, r4
     142:	a4 04       	cpc	r10, r4
     144:	a4 04       	cpc	r10, r4
     146:	a4 04       	cpc	r10, r4
     148:	a4 04       	cpc	r10, r4
     14a:	a4 04       	cpc	r10, r4
     14c:	a4 04       	cpc	r10, r4
     14e:	a4 04       	cpc	r10, r4
     150:	a4 04       	cpc	r10, r4
     152:	a4 04       	cpc	r10, r4
     154:	a4 04       	cpc	r10, r4
     156:	a4 04       	cpc	r10, r4
     158:	a4 04       	cpc	r10, r4
     15a:	a4 04       	cpc	r10, r4
     15c:	a4 04       	cpc	r10, r4
     15e:	a4 04       	cpc	r10, r4
     160:	a4 04       	cpc	r10, r4
     162:	a4 04       	cpc	r10, r4
     164:	a4 04       	cpc	r10, r4
     166:	a4 04       	cpc	r10, r4
     168:	a4 04       	cpc	r10, r4
     16a:	a4 04       	cpc	r10, r4
     16c:	a4 04       	cpc	r10, r4
     16e:	a4 04       	cpc	r10, r4
     170:	a4 04       	cpc	r10, r4
     172:	a4 04       	cpc	r10, r4
     174:	a4 04       	cpc	r10, r4
     176:	a4 04       	cpc	r10, r4
     178:	a4 04       	cpc	r10, r4
     17a:	b0 03       	fmuls	r19, r16
     17c:	b0 03       	fmuls	r19, r16
     17e:	b0 03       	fmuls	r19, r16
     180:	b0 03       	fmuls	r19, r16
     182:	b0 03       	fmuls	r19, r16
     184:	b0 03       	fmuls	r19, r16
     186:	b3 03       	fmuls	r19, r19
     188:	a4 04       	cpc	r10, r4
     18a:	b0 03       	fmuls	r19, r16
     18c:	b0 03       	fmuls	r19, r16
     18e:	b0 03       	fmuls	r19, r16
     190:	b0 03       	fmuls	r19, r16
     192:	a4 04       	cpc	r10, r4
     194:	a4 04       	cpc	r10, r4
     196:	a4 04       	cpc	r10, r4
     198:	b0 03       	fmuls	r19, r16
     19a:	c2 03       	fmuls	r20, r18
     19c:	d4 03       	fmuls	r21, r20
     19e:	e6 03       	fmuls	r22, r22
     1a0:	f8 03       	fmulsu	r23, r16
     1a2:	0c 04       	cpc	r0, r12
     1a4:	1e 04       	cpc	r1, r14
     1a6:	30 04       	cpc	r3, r0
     1a8:	42 04       	cpc	r4, r2
     1aa:	b7 0b       	sbc	r27, r23
     1ac:	c1 0b       	sbc	r28, r17
     1ae:	ce 0b       	sbc	r28, r30
     1b0:	db 0b       	sbc	r29, r27
     1b2:	e8 0b       	sbc	r30, r24
     1b4:	f6 0b       	sbc	r31, r22
     1b6:	03 0c       	add	r0, r3
     1b8:	10 0c       	add	r1, r0
     1ba:	1c 0c       	add	r1, r12
     1bc:	28 0c       	add	r2, r8
     1be:	34 0c       	add	r3, r4
     1c0:	40 0c       	add	r4, r0
     1c2:	4c 0c       	add	r4, r12
     1c4:	57 0c       	add	r5, r7
     1c6:	63 0c       	add	r6, r3
     1c8:	6e 0c       	add	r6, r14
     1ca:	c0 0c       	add	r12, r0
     1cc:	c9 0c       	add	r12, r9
     1ce:	d3 0c       	add	r13, r3
     1d0:	de 0c       	add	r13, r14
     1d2:	e9 0c       	add	r14, r9
     1d4:	f3 0c       	add	r15, r3
     1d6:	fe 0c       	add	r15, r14
     1d8:	08 0d       	add	r16, r8
     1da:	12 0d       	add	r17, r2
     1dc:	1b 0d       	add	r17, r11
     1de:	26 0d       	add	r18, r6
     1e0:	30 0d       	add	r19, r0
     1e2:	3a 0d       	add	r19, r10
     1e4:	44 0d       	add	r20, r4
     1e6:	3b 0e       	add	r3, r27
     1e8:	41 0e       	add	r4, r17
     1ea:	47 0e       	add	r4, r23
     1ec:	4d 0e       	add	r4, r29
     1ee:	53 0e       	add	r5, r19
     1f0:	59 0e       	add	r5, r25
     1f2:	5f 0e       	add	r5, r31
     1f4:	65 0e       	add	r6, r21
     1f6:	6b 0e       	add	r6, r27
     1f8:	eb 11       	cpse	r30, r11
     1fa:	f4 11       	cpse	r31, r4
     1fc:	fd 11       	cpse	r31, r13
     1fe:	06 12       	cpse	r0, r22
     200:	0f 12       	cpse	r0, r31
     202:	18 12       	cpse	r1, r24
     204:	21 12       	cpse	r2, r17
     206:	2a 12       	cpse	r2, r26
     208:	33 12       	cpse	r3, r19
     20a:	36 15       	cp	r19, r6
     20c:	42 15       	cp	r20, r2
     20e:	4e 15       	cp	r20, r14
     210:	5b 15       	cp	r21, r11
     212:	68 15       	cp	r22, r8
     214:	76 15       	cp	r23, r6
     216:	84 15       	cp	r24, r4
     218:	92 15       	cp	r25, r2
     21a:	a0 15       	cp	r26, r0
     21c:	ae 15       	cp	r26, r14
     21e:	bc 15       	cp	r27, r12
     220:	ca 15       	cp	r28, r10
     222:	d8 15       	cp	r29, r8
     224:	e3 15       	cp	r30, r3
     226:	ee 15       	cp	r30, r14
     228:	f9 15       	cp	r31, r9
     22a:	53 16       	cp	r5, r19
     22c:	5a 16       	cp	r5, r26
     22e:	63 16       	cp	r6, r19
     230:	6c 16       	cp	r6, r28
     232:	75 16       	cp	r7, r21
     234:	7e 16       	cp	r7, r30
     236:	86 16       	cp	r8, r22
     238:	90 16       	cp	r9, r16
     23a:	99 16       	cp	r9, r25
     23c:	a2 16       	cp	r10, r18
     23e:	ab 16       	cp	r10, r27
     240:	b4 16       	cp	r11, r20
     242:	bd 16       	cp	r11, r29
     244:	c6 16       	cp	r12, r22
     246:	cf 16       	cp	r12, r31
     248:	4c 18       	sub	r4, r12
     24a:	4f 18       	sub	r4, r15
     24c:	52 18       	sub	r5, r2
     24e:	55 18       	sub	r5, r5
     250:	57 18       	sub	r5, r7
     252:	5a 18       	sub	r5, r10
     254:	5d 18       	sub	r5, r13
     256:	60 18       	sub	r6, r0
     258:	60 19       	sub	r22, r0
     25a:	6a 19       	sub	r22, r10
     25c:	7c 19       	sub	r23, r12
     25e:	e2 19       	sub	r30, r2
     260:	8f 19       	sub	r24, r15
     262:	99 19       	sub	r25, r9
     264:	ab 19       	sub	r26, r11
     266:	d6 19       	sub	r29, r6
     268:	22 21       	and	r18, r2
     26a:	26 21       	and	r18, r6
     26c:	29 21       	and	r18, r9
     26e:	26 22       	and	r2, r22
     270:	3a 21       	and	r19, r10
     272:	6c 21       	and	r22, r12
     274:	af 21       	and	r26, r15
     276:	e1 21       	and	r30, r1
     278:	86 2a       	or	r8, r22
     27a:	9c 2a       	or	r9, r28
     27c:	9c 2a       	or	r9, r28
     27e:	05 2b       	or	r16, r21
     280:	13 2b       	or	r17, r19
     282:	32 2b       	or	r19, r18
     284:	59 2b       	or	r21, r25
     286:	5c 2b       	or	r21, r28
     288:	5f 2b       	or	r21, r31
     28a:	e4 29       	or	r30, r4
     28c:	e4 29       	or	r30, r4
     28e:	e4 29       	or	r30, r4
     290:	e4 29       	or	r30, r4
     292:	e4 29       	or	r30, r4
     294:	e4 29       	or	r30, r4
     296:	e4 29       	or	r30, r4
     298:	e4 29       	or	r30, r4
     29a:	e4 29       	or	r30, r4
     29c:	e4 29       	or	r30, r4
     29e:	e4 29       	or	r30, r4
     2a0:	e4 29       	or	r30, r4
     2a2:	e4 29       	or	r30, r4
     2a4:	e4 29       	or	r30, r4
     2a6:	e4 29       	or	r30, r4
     2a8:	e4 29       	or	r30, r4
     2aa:	e4 29       	or	r30, r4
     2ac:	e4 29       	or	r30, r4
     2ae:	e4 29       	or	r30, r4
     2b0:	e4 29       	or	r30, r4
     2b2:	e4 29       	or	r30, r4
     2b4:	e4 29       	or	r30, r4
     2b6:	e4 29       	or	r30, r4
     2b8:	e4 29       	or	r30, r4
     2ba:	e4 29       	or	r30, r4
     2bc:	e4 29       	or	r30, r4
     2be:	e4 29       	or	r30, r4
     2c0:	e4 29       	or	r30, r4
     2c2:	e4 29       	or	r30, r4
     2c4:	e4 29       	or	r30, r4
     2c6:	e4 29       	or	r30, r4
     2c8:	e4 29       	or	r30, r4
     2ca:	e4 29       	or	r30, r4
     2cc:	e4 29       	or	r30, r4
     2ce:	e4 29       	or	r30, r4
     2d0:	e4 29       	or	r30, r4
     2d2:	e4 29       	or	r30, r4
     2d4:	e4 29       	or	r30, r4
     2d6:	e4 29       	or	r30, r4
     2d8:	e4 29       	or	r30, r4
     2da:	e4 29       	or	r30, r4
     2dc:	e4 29       	or	r30, r4
     2de:	e4 29       	or	r30, r4
     2e0:	e4 29       	or	r30, r4
     2e2:	e4 29       	or	r30, r4
     2e4:	e4 29       	or	r30, r4
     2e6:	e4 29       	or	r30, r4
     2e8:	e4 29       	or	r30, r4
     2ea:	e4 29       	or	r30, r4
     2ec:	e4 29       	or	r30, r4
     2ee:	e4 29       	or	r30, r4
     2f0:	e4 29       	or	r30, r4
     2f2:	e4 29       	or	r30, r4
     2f4:	e4 29       	or	r30, r4
     2f6:	e4 29       	or	r30, r4
     2f8:	62 2b       	or	r22, r18
     2fa:	65 2b       	or	r22, r21
     2fc:	68 2b       	or	r22, r24
     2fe:	6b 2b       	or	r22, r27
     300:	6e 2b       	or	r22, r30
     302:	71 2b       	or	r23, r17
     304:	84 2b       	or	r24, r20
     306:	92 2b       	or	r25, r18
     308:	80 2a       	or	r8, r16
     30a:	ff 2b       	or	r31, r31
     30c:	26 2c       	mov	r2, r6
     30e:	58 2c       	mov	r5, r8
     310:	95 2c       	mov	r9, r5
     312:	98 2c       	mov	r9, r8
     314:	9b 2c       	mov	r9, r11
     316:	14 2d       	mov	r17, r4
     318:	25 2d       	mov	r18, r5
     31a:	44 2d       	mov	r20, r4
     31c:	e4 29       	or	r30, r4
     31e:	e4 29       	or	r30, r4
     320:	e4 29       	or	r30, r4
     322:	e4 29       	or	r30, r4
     324:	e4 29       	or	r30, r4
     326:	47 2d       	mov	r20, r7
     328:	b8 2a       	or	r11, r24
     32a:	5f 2d       	mov	r21, r15
     32c:	ac 2a       	or	r10, r28
     32e:	62 2d       	mov	r22, r2
     330:	af 2a       	or	r10, r31
     332:	b2 2a       	or	r11, r18
     334:	b5 2a       	or	r11, r21
     336:	e4 29       	or	r30, r4
     338:	e4 29       	or	r30, r4
     33a:	e4 29       	or	r30, r4
     33c:	e4 29       	or	r30, r4
     33e:	e4 29       	or	r30, r4
     340:	e4 29       	or	r30, r4
     342:	e4 29       	or	r30, r4
     344:	e4 29       	or	r30, r4
     346:	e4 29       	or	r30, r4
     348:	e4 29       	or	r30, r4
     34a:	e4 29       	or	r30, r4
     34c:	e4 29       	or	r30, r4
     34e:	e4 29       	or	r30, r4
     350:	e4 29       	or	r30, r4
     352:	e4 29       	or	r30, r4
     354:	e4 29       	or	r30, r4
     356:	e4 29       	or	r30, r4
     358:	e4 29       	or	r30, r4
     35a:	e4 29       	or	r30, r4
     35c:	e4 29       	or	r30, r4
     35e:	e4 29       	or	r30, r4
     360:	e4 29       	or	r30, r4
     362:	e4 29       	or	r30, r4
     364:	e4 29       	or	r30, r4
     366:	e4 29       	or	r30, r4
     368:	b8 2a       	or	r11, r24
     36a:	5f 2d       	mov	r21, r15
     36c:	ac 2a       	or	r10, r28
     36e:	62 2d       	mov	r22, r2
     370:	af 2a       	or	r10, r31
     372:	b2 2a       	or	r11, r18
     374:	b5 2a       	or	r11, r21
     376:	6e 2c       	mov	r6, r14
     378:	72 2c       	mov	r7, r2
     37a:	76 2c       	mov	r7, r6
     37c:	7a 2c       	mov	r7, r10
     37e:	7d 2c       	mov	r7, r13
     380:	82 2c       	mov	r8, r2
     382:	87 2c       	mov	r8, r7
     384:	8c 2c       	mov	r8, r12
     386:	c7 2c       	mov	r12, r7
     388:	cc 2c       	mov	r12, r12
     38a:	d0 2c       	mov	r13, r0
     38c:	d5 2c       	mov	r13, r5
     38e:	da 2c       	mov	r13, r10
     390:	de 2c       	mov	r13, r14
     392:	e3 2c       	mov	r14, r3
     394:	e7 2c       	mov	r14, r7
     396:	ec 2c       	mov	r14, r12
     398:	f1 2c       	mov	r15, r1
     39a:	02 2d       	mov	r16, r2
     39c:	04 2d       	mov	r16, r4
     39e:	06 2d       	mov	r16, r6
     3a0:	08 2d       	mov	r16, r8
     3a2:	0a 2d       	mov	r16, r10
     3a4:	0c 2d       	mov	r16, r12
     3a6:	0e 2d       	mov	r16, r14
     3a8:	10 2d       	mov	r17, r0

000003aa <__ctors_end>:
     3aa:	11 24       	eor	r1, r1
     3ac:	1f be       	out	0x3f, r1	; 63
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	d8 e0       	ldi	r29, 0x08	; 8
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	cd bf       	out	0x3d, r28	; 61

000003b6 <__do_copy_data>:
     3b6:	11 e0       	ldi	r17, 0x01	; 1
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b1 e0       	ldi	r27, 0x01	; 1
     3bc:	ea e4       	ldi	r30, 0x4A	; 74
     3be:	fc e5       	ldi	r31, 0x5C	; 92
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__do_copy_data+0x10>
     3c2:	05 90       	lpm	r0, Z+
     3c4:	0d 92       	st	X+, r0
     3c6:	a6 3c       	cpi	r26, 0xC6	; 198
     3c8:	b1 07       	cpc	r27, r17
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <__do_copy_data+0xc>

000003cc <__do_clear_bss>:
     3cc:	22 e0       	ldi	r18, 0x02	; 2
     3ce:	a6 ec       	ldi	r26, 0xC6	; 198
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <.do_clear_bss_start>

000003d4 <.do_clear_bss_loop>:
     3d4:	1d 92       	st	X+, r1

000003d6 <.do_clear_bss_start>:
     3d6:	a1 3b       	cpi	r26, 0xB1	; 177
     3d8:	b2 07       	cpc	r27, r18
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <.do_clear_bss_loop>
     3dc:	0e 94 ff 28 	call	0x51fe	; 0x51fe <main>
     3e0:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <_exit>

000003e4 <__bad_interrupt>:
     3e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e8 <Char_definition>:
i=0; 
do{
display_buf[i] = n % 10  +  '0';
i++;
}while((n/=10)>0);
if (sign < 0)display_buf[i] = '-';}}
     3e8:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <buf_ptr>
     3ec:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <buf_ptr+0x1>
     3f0:	e1 5f       	subi	r30, 0xF1	; 241
     3f2:	fd 4f       	sbci	r31, 0xFD	; 253
     3f4:	e0 81       	ld	r30, Z
     3f6:	8e 2f       	mov	r24, r30
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	bd 97       	sbiw	r30, 0x2d	; 45
     3fe:	e9 33       	cpi	r30, 0x39	; 57
     400:	f1 05       	cpc	r31, r1
     402:	08 f0       	brcs	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	40 c0       	rjmp	.+128    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     406:	ec 5c       	subi	r30, 0xCC	; 204
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
     40e:	29 98       	cbi	0x05, 1	; 5
     410:	8b b1       	in	r24, 0x0b	; 11
     412:	83 78       	andi	r24, 0x83	; 131
     414:	8b b9       	out	0x0b, r24	; 11
     416:	08 95       	ret
     418:	8b b1       	in	r24, 0x0b	; 11
     41a:	83 7f       	andi	r24, 0xF3	; 243
     41c:	8b b9       	out	0x0b, r24	; 11
     41e:	08 95       	ret
     420:	29 98       	cbi	0x05, 1	; 5
     422:	8b b1       	in	r24, 0x0b	; 11
     424:	8b 74       	andi	r24, 0x4B	; 75
     426:	8b b9       	out	0x0b, r24	; 11
     428:	08 95       	ret
     42a:	29 98       	cbi	0x05, 1	; 5
     42c:	8b b1       	in	r24, 0x0b	; 11
     42e:	83 76       	andi	r24, 0x63	; 99
     430:	8b b9       	out	0x0b, r24	; 11
     432:	08 95       	ret
     434:	8b b1       	in	r24, 0x0b	; 11
     436:	83 73       	andi	r24, 0x33	; 51
     438:	8b b9       	out	0x0b, r24	; 11
     43a:	08 95       	ret
     43c:	29 98       	cbi	0x05, 1	; 5
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	87 72       	andi	r24, 0x27	; 39
     442:	8b b9       	out	0x0b, r24	; 11
     444:	08 95       	ret
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	87 70       	andi	r24, 0x07	; 7
     44a:	8b b9       	out	0x0b, r24	; 11
     44c:	08 95       	ret
     44e:	29 98       	cbi	0x05, 1	; 5
     450:	8b b1       	in	r24, 0x0b	; 11
     452:	83 7f       	andi	r24, 0xF3	; 243
     454:	8b b9       	out	0x0b, r24	; 11
     456:	08 95       	ret
     458:	29 98       	cbi	0x05, 1	; 5
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	83 70       	andi	r24, 0x03	; 3
     45e:	8b b9       	out	0x0b, r24	; 11
     460:	08 95       	ret
     462:	29 98       	cbi	0x05, 1	; 5
     464:	8b b1       	in	r24, 0x0b	; 11
     466:	83 73       	andi	r24, 0x33	; 51
     468:	8b b9       	out	0x0b, r24	; 11
     46a:	08 95       	ret
     46c:	29 98       	cbi	0x05, 1	; 5
     46e:	8b b1       	in	r24, 0x0b	; 11
     470:	8b 71       	andi	r24, 0x1B	; 27
     472:	8b b9       	out	0x0b, r24	; 11
     474:	08 95       	ret
     476:	5c 98       	cbi	0x0b, 4	; 11
     478:	08 95       	ret
     47a:	5f 98       	cbi	0x0b, 7	; 11
     47c:	08 95       	ret
     47e:	29 98       	cbi	0x05, 1	; 5
     480:	8b b1       	in	r24, 0x0b	; 11
     482:	8f 70       	andi	r24, 0x0F	; 15
     484:	8b b9       	out	0x0b, r24	; 11
     486:	08 95       	ret

00000488 <Seg_definitions>:
     488:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <buf_ptr>
     48c:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <buf_ptr+0x1>
     490:	e8 30       	cpi	r30, 0x08	; 8
     492:	f1 05       	cpc	r31, r1
     494:	b8 f5       	brcc	.+110    	; 0x504 <Seg_definitions+0x7c>
     496:	e3 59       	subi	r30, 0x93	; 147
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0d c0       	rjmp	.+26     	; 0x4bc <Seg_definitions+0x34>
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	0b c0       	rjmp	.+22     	; 0x4bc <Seg_definitions+0x34>
     4a6:	88 e0       	ldi	r24, 0x08	; 8
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <Seg_definitions+0x34>
     4aa:	80 e1       	ldi	r24, 0x10	; 16
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <Seg_definitions+0x34>
     4ae:	80 e2       	ldi	r24, 0x20	; 32
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <Seg_definitions+0x34>
     4b2:	80 e4       	ldi	r24, 0x40	; 64
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <Seg_definitions+0x34>
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <Seg_definitions+0x34>
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <display_buf>
     4c0:	98 23       	and	r25, r24
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <Seg_definitions+0x3e>
     4c4:	29 98       	cbi	0x05, 1	; 5
     4c6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <display_buf+0x1>
     4ca:	98 23       	and	r25, r24
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <Seg_definitions+0x48>
     4ce:	5f 98       	cbi	0x0b, 7	; 11
     4d0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <display_buf+0x2>
     4d4:	98 23       	and	r25, r24
     4d6:	09 f0       	breq	.+2      	; 0x4da <Seg_definitions+0x52>
     4d8:	5c 98       	cbi	0x0b, 4	; 11
     4da:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <display_buf+0x3>
     4de:	98 23       	and	r25, r24
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <Seg_definitions+0x5c>
     4e2:	5a 98       	cbi	0x0b, 2	; 11
     4e4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <display_buf+0x4>
     4e8:	98 23       	and	r25, r24
     4ea:	09 f0       	breq	.+2      	; 0x4ee <Seg_definitions+0x66>
     4ec:	5b 98       	cbi	0x0b, 3	; 11
     4ee:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <display_buf+0x5>
     4f2:	98 23       	and	r25, r24
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <Seg_definitions+0x70>
     4f6:	5d 98       	cbi	0x0b, 5	; 11
     4f8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <display_buf+0x6>
     4fc:	89 23       	and	r24, r25
     4fe:	31 f0       	breq	.+12     	; 0x50c <Seg_definitions+0x84>
     500:	5e 98       	cbi	0x0b, 6	; 11
     502:	08 95       	ret
     504:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	dd cf       	rjmp	.-70     	; 0x4c6 <Seg_definitions+0x3e>
     50c:	08 95       	ret

0000050e <Display_driver>:
     50e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <buf_ptr>
     512:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <buf_ptr+0x1>
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <buf_ptr+0x1>
     51c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <buf_ptr>
     520:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <buf_ptr>
     524:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <buf_ptr+0x1>
     528:	87 70       	andi	r24, 0x07	; 7
     52a:	90 78       	andi	r25, 0x80	; 128
     52c:	99 23       	and	r25, r25
     52e:	24 f4       	brge	.+8      	; 0x538 <Display_driver+0x2a>
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	88 6f       	ori	r24, 0xF8	; 248
     534:	9f 6f       	ori	r25, 0xFF	; 255
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <buf_ptr+0x1>
     53c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <buf_ptr>
     540:	85 b1       	in	r24, 0x05	; 5
     542:	82 7c       	andi	r24, 0xC2	; 194
     544:	85 b9       	out	0x05, r24	; 5
     546:	88 b1       	in	r24, 0x08	; 8
     548:	88 7f       	andi	r24, 0xF8	; 248
     54a:	88 b9       	out	0x08, r24	; 8
     54c:	29 9a       	sbi	0x05, 1	; 5
     54e:	8b b1       	in	r24, 0x0b	; 11
     550:	8c 6f       	ori	r24, 0xFC	; 252
     552:	8b b9       	out	0x0b, r24	; 11
     554:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <buf_ptr>
     558:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <buf_ptr+0x1>
     55c:	e8 30       	cpi	r30, 0x08	; 8
     55e:	f1 05       	cpc	r31, r1
     560:	08 f0       	brcs	.+2      	; 0x564 <Display_driver+0x56>
     562:	f0 c0       	rjmp	.+480    	; 0x744 <Display_driver+0x236>
     564:	eb 58       	subi	r30, 0x8B	; 139
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
     56c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     570:	80 ff       	sbrs	r24, 0
     572:	18 c0       	rjmp	.+48     	; 0x5a4 <Display_driver+0x96>
     574:	ec e8       	ldi	r30, 0x8C	; 140
     576:	f2 e0       	ldi	r31, 0x02	; 2
     578:	90 81       	ld	r25, Z
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	89 0f       	add	r24, r25
     57e:	80 83       	st	Z, r24
     580:	89 e3       	ldi	r24, 0x39	; 57
     582:	98 9f       	mul	r25, r24
     584:	81 2d       	mov	r24, r1
     586:	11 24       	eor	r1, r1
     588:	86 95       	lsr	r24
     58a:	86 95       	lsr	r24
     58c:	88 0f       	add	r24, r24
     58e:	28 2f       	mov	r18, r24
     590:	22 0f       	add	r18, r18
     592:	22 0f       	add	r18, r18
     594:	22 0f       	add	r18, r18
     596:	82 0f       	add	r24, r18
     598:	98 1b       	sub	r25, r24
     59a:	9d 30       	cpi	r25, 0x0D	; 13
     59c:	08 f0       	brcs	.+2      	; 0x5a0 <Display_driver+0x92>
     59e:	d2 c0       	rjmp	.+420    	; 0x744 <Display_driver+0x236>
     5a0:	2c 9a       	sbi	0x05, 4	; 5
     5a2:	d0 c0       	rjmp	.+416    	; 0x744 <Display_driver+0x236>
     5a4:	2c 9a       	sbi	0x05, 4	; 5
     5a6:	ce c0       	rjmp	.+412    	; 0x744 <Display_driver+0x236>
     5a8:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     5ac:	81 ff       	sbrs	r24, 1
     5ae:	18 c0       	rjmp	.+48     	; 0x5e0 <Display_driver+0xd2>
     5b0:	ec e8       	ldi	r30, 0x8C	; 140
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	91 81       	ldd	r25, Z+1	; 0x01
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	89 0f       	add	r24, r25
     5ba:	81 83       	std	Z+1, r24	; 0x01
     5bc:	89 e3       	ldi	r24, 0x39	; 57
     5be:	98 9f       	mul	r25, r24
     5c0:	81 2d       	mov	r24, r1
     5c2:	11 24       	eor	r1, r1
     5c4:	86 95       	lsr	r24
     5c6:	86 95       	lsr	r24
     5c8:	88 0f       	add	r24, r24
     5ca:	28 2f       	mov	r18, r24
     5cc:	22 0f       	add	r18, r18
     5ce:	22 0f       	add	r18, r18
     5d0:	22 0f       	add	r18, r18
     5d2:	82 0f       	add	r24, r18
     5d4:	98 1b       	sub	r25, r24
     5d6:	9d 30       	cpi	r25, 0x0D	; 13
     5d8:	08 f0       	brcs	.+2      	; 0x5dc <Display_driver+0xce>
     5da:	b4 c0       	rjmp	.+360    	; 0x744 <Display_driver+0x236>
     5dc:	2b 9a       	sbi	0x05, 3	; 5
     5de:	b2 c0       	rjmp	.+356    	; 0x744 <Display_driver+0x236>
     5e0:	2b 9a       	sbi	0x05, 3	; 5
     5e2:	b0 c0       	rjmp	.+352    	; 0x744 <Display_driver+0x236>
     5e4:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     5e8:	82 ff       	sbrs	r24, 2
     5ea:	18 c0       	rjmp	.+48     	; 0x61c <Display_driver+0x10e>
     5ec:	ec e8       	ldi	r30, 0x8C	; 140
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
     5f0:	92 81       	ldd	r25, Z+2	; 0x02
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	89 0f       	add	r24, r25
     5f6:	82 83       	std	Z+2, r24	; 0x02
     5f8:	89 e3       	ldi	r24, 0x39	; 57
     5fa:	98 9f       	mul	r25, r24
     5fc:	81 2d       	mov	r24, r1
     5fe:	11 24       	eor	r1, r1
     600:	86 95       	lsr	r24
     602:	86 95       	lsr	r24
     604:	88 0f       	add	r24, r24
     606:	28 2f       	mov	r18, r24
     608:	22 0f       	add	r18, r18
     60a:	22 0f       	add	r18, r18
     60c:	22 0f       	add	r18, r18
     60e:	82 0f       	add	r24, r18
     610:	98 1b       	sub	r25, r24
     612:	9d 30       	cpi	r25, 0x0D	; 13
     614:	08 f0       	brcs	.+2      	; 0x618 <Display_driver+0x10a>
     616:	96 c0       	rjmp	.+300    	; 0x744 <Display_driver+0x236>
     618:	2a 9a       	sbi	0x05, 2	; 5
     61a:	94 c0       	rjmp	.+296    	; 0x744 <Display_driver+0x236>
     61c:	2a 9a       	sbi	0x05, 2	; 5
     61e:	92 c0       	rjmp	.+292    	; 0x744 <Display_driver+0x236>
     620:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     624:	83 ff       	sbrs	r24, 3
     626:	18 c0       	rjmp	.+48     	; 0x658 <Display_driver+0x14a>
     628:	ec e8       	ldi	r30, 0x8C	; 140
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	89 0f       	add	r24, r25
     632:	83 83       	std	Z+3, r24	; 0x03
     634:	89 e3       	ldi	r24, 0x39	; 57
     636:	98 9f       	mul	r25, r24
     638:	81 2d       	mov	r24, r1
     63a:	11 24       	eor	r1, r1
     63c:	86 95       	lsr	r24
     63e:	86 95       	lsr	r24
     640:	88 0f       	add	r24, r24
     642:	28 2f       	mov	r18, r24
     644:	22 0f       	add	r18, r18
     646:	22 0f       	add	r18, r18
     648:	22 0f       	add	r18, r18
     64a:	82 0f       	add	r24, r18
     64c:	98 1b       	sub	r25, r24
     64e:	9d 30       	cpi	r25, 0x0D	; 13
     650:	08 f0       	brcs	.+2      	; 0x654 <Display_driver+0x146>
     652:	78 c0       	rjmp	.+240    	; 0x744 <Display_driver+0x236>
     654:	28 9a       	sbi	0x05, 0	; 5
     656:	76 c0       	rjmp	.+236    	; 0x744 <Display_driver+0x236>
     658:	28 9a       	sbi	0x05, 0	; 5
     65a:	74 c0       	rjmp	.+232    	; 0x744 <Display_driver+0x236>
     65c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     660:	84 ff       	sbrs	r24, 4
     662:	18 c0       	rjmp	.+48     	; 0x694 <Display_driver+0x186>
     664:	ec e8       	ldi	r30, 0x8C	; 140
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	94 81       	ldd	r25, Z+4	; 0x04
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	89 0f       	add	r24, r25
     66e:	84 83       	std	Z+4, r24	; 0x04
     670:	89 e3       	ldi	r24, 0x39	; 57
     672:	98 9f       	mul	r25, r24
     674:	81 2d       	mov	r24, r1
     676:	11 24       	eor	r1, r1
     678:	86 95       	lsr	r24
     67a:	86 95       	lsr	r24
     67c:	88 0f       	add	r24, r24
     67e:	28 2f       	mov	r18, r24
     680:	22 0f       	add	r18, r18
     682:	22 0f       	add	r18, r18
     684:	22 0f       	add	r18, r18
     686:	82 0f       	add	r24, r18
     688:	98 1b       	sub	r25, r24
     68a:	9d 30       	cpi	r25, 0x0D	; 13
     68c:	08 f0       	brcs	.+2      	; 0x690 <Display_driver+0x182>
     68e:	5a c0       	rjmp	.+180    	; 0x744 <Display_driver+0x236>
     690:	42 9a       	sbi	0x08, 2	; 8
     692:	58 c0       	rjmp	.+176    	; 0x744 <Display_driver+0x236>
     694:	42 9a       	sbi	0x08, 2	; 8
     696:	56 c0       	rjmp	.+172    	; 0x744 <Display_driver+0x236>
     698:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     69c:	85 ff       	sbrs	r24, 5
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <Display_driver+0x1c0>
     6a0:	ec e8       	ldi	r30, 0x8C	; 140
     6a2:	f2 e0       	ldi	r31, 0x02	; 2
     6a4:	95 81       	ldd	r25, Z+5	; 0x05
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	89 0f       	add	r24, r25
     6aa:	85 83       	std	Z+5, r24	; 0x05
     6ac:	89 e3       	ldi	r24, 0x39	; 57
     6ae:	98 9f       	mul	r25, r24
     6b0:	81 2d       	mov	r24, r1
     6b2:	11 24       	eor	r1, r1
     6b4:	86 95       	lsr	r24
     6b6:	86 95       	lsr	r24
     6b8:	88 0f       	add	r24, r24
     6ba:	28 2f       	mov	r18, r24
     6bc:	22 0f       	add	r18, r18
     6be:	22 0f       	add	r18, r18
     6c0:	22 0f       	add	r18, r18
     6c2:	82 0f       	add	r24, r18
     6c4:	98 1b       	sub	r25, r24
     6c6:	9d 30       	cpi	r25, 0x0D	; 13
     6c8:	e8 f5       	brcc	.+122    	; 0x744 <Display_driver+0x236>
     6ca:	41 9a       	sbi	0x08, 1	; 8
     6cc:	3b c0       	rjmp	.+118    	; 0x744 <Display_driver+0x236>
     6ce:	41 9a       	sbi	0x08, 1	; 8
     6d0:	39 c0       	rjmp	.+114    	; 0x744 <Display_driver+0x236>
     6d2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     6d6:	86 ff       	sbrs	r24, 6
     6d8:	17 c0       	rjmp	.+46     	; 0x708 <Display_driver+0x1fa>
     6da:	ec e8       	ldi	r30, 0x8C	; 140
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	96 81       	ldd	r25, Z+6	; 0x06
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	89 0f       	add	r24, r25
     6e4:	86 83       	std	Z+6, r24	; 0x06
     6e6:	89 e3       	ldi	r24, 0x39	; 57
     6e8:	98 9f       	mul	r25, r24
     6ea:	81 2d       	mov	r24, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	86 95       	lsr	r24
     6f0:	86 95       	lsr	r24
     6f2:	88 0f       	add	r24, r24
     6f4:	28 2f       	mov	r18, r24
     6f6:	22 0f       	add	r18, r18
     6f8:	22 0f       	add	r18, r18
     6fa:	22 0f       	add	r18, r18
     6fc:	82 0f       	add	r24, r18
     6fe:	98 1b       	sub	r25, r24
     700:	9d 30       	cpi	r25, 0x0D	; 13
     702:	00 f5       	brcc	.+64     	; 0x744 <Display_driver+0x236>
     704:	40 9a       	sbi	0x08, 0	; 8
     706:	1e c0       	rjmp	.+60     	; 0x744 <Display_driver+0x236>
     708:	40 9a       	sbi	0x08, 0	; 8
     70a:	1c c0       	rjmp	.+56     	; 0x744 <Display_driver+0x236>
     70c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     710:	88 23       	and	r24, r24
     712:	bc f4       	brge	.+46     	; 0x742 <Display_driver+0x234>
     714:	ec e8       	ldi	r30, 0x8C	; 140
     716:	f2 e0       	ldi	r31, 0x02	; 2
     718:	97 81       	ldd	r25, Z+7	; 0x07
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	89 0f       	add	r24, r25
     71e:	87 83       	std	Z+7, r24	; 0x07
     720:	89 e3       	ldi	r24, 0x39	; 57
     722:	98 9f       	mul	r25, r24
     724:	81 2d       	mov	r24, r1
     726:	11 24       	eor	r1, r1
     728:	86 95       	lsr	r24
     72a:	86 95       	lsr	r24
     72c:	88 0f       	add	r24, r24
     72e:	28 2f       	mov	r18, r24
     730:	22 0f       	add	r18, r18
     732:	22 0f       	add	r18, r18
     734:	22 0f       	add	r18, r18
     736:	82 0f       	add	r24, r18
     738:	98 1b       	sub	r25, r24
     73a:	9d 30       	cpi	r25, 0x0D	; 13
     73c:	18 f4       	brcc	.+6      	; 0x744 <Display_driver+0x236>
     73e:	2d 9a       	sbi	0x05, 5	; 5
     740:	01 c0       	rjmp	.+2      	; 0x744 <Display_driver+0x236>
     742:	2d 9a       	sbi	0x05, 5	; 5
     744:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <mode>
     748:	8e 2f       	mov	r24, r30
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	e0 35       	cpi	r30, 0x50	; 80
     752:	f1 05       	cpc	r31, r1
     754:	08 f0       	brcs	.+2      	; 0x758 <Display_driver+0x24a>
     756:	f8 c0       	rjmp	.+496    	; 0x948 <__stack+0x49>
     758:	e3 58       	subi	r30, 0x83	; 131
     75a:	ff 4f       	sbci	r31, 0xFF	; 255
     75c:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
     760:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Char_definition>
     764:	08 95       	ret
     766:	0e 94 44 02 	call	0x488	; 0x488 <Seg_definitions>
     76a:	08 95       	ret
     76c:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <buf_ptr>
     770:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <buf_ptr+0x1>
     774:	e8 30       	cpi	r30, 0x08	; 8
     776:	f1 05       	cpc	r31, r1
     778:	08 f0       	brcs	.+2      	; 0x77c <Display_driver+0x26e>
     77a:	e6 c0       	rjmp	.+460    	; 0x948 <__stack+0x49>
     77c:	e3 53       	subi	r30, 0x33	; 51
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
     784:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     788:	80 fd       	sbrc	r24, 0
     78a:	5a 98       	cbi	0x0b, 2	; 11
     78c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     790:	81 fd       	sbrc	r24, 1
     792:	5e 98       	cbi	0x0b, 6	; 11
     794:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     798:	80 fd       	sbrc	r24, 0
     79a:	5b 98       	cbi	0x0b, 3	; 11
     79c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     7a0:	81 ff       	sbrs	r24, 1
     7a2:	d2 c0       	rjmp	.+420    	; 0x948 <__stack+0x49>
     7a4:	5d 98       	cbi	0x0b, 5	; 11
     7a6:	08 95       	ret
     7a8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7ac:	82 fd       	sbrc	r24, 2
     7ae:	5a 98       	cbi	0x0b, 2	; 11
     7b0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7b4:	83 fd       	sbrc	r24, 3
     7b6:	5e 98       	cbi	0x0b, 6	; 11
     7b8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     7bc:	82 fd       	sbrc	r24, 2
     7be:	5b 98       	cbi	0x0b, 3	; 11
     7c0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     7c4:	83 ff       	sbrs	r24, 3
     7c6:	c0 c0       	rjmp	.+384    	; 0x948 <__stack+0x49>
     7c8:	5d 98       	cbi	0x0b, 5	; 11
     7ca:	08 95       	ret
     7cc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7d0:	84 fd       	sbrc	r24, 4
     7d2:	5a 98       	cbi	0x0b, 2	; 11
     7d4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7d8:	85 fd       	sbrc	r24, 5
     7da:	5e 98       	cbi	0x0b, 6	; 11
     7dc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     7e0:	84 fd       	sbrc	r24, 4
     7e2:	5b 98       	cbi	0x0b, 3	; 11
     7e4:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     7e8:	85 ff       	sbrs	r24, 5
     7ea:	ae c0       	rjmp	.+348    	; 0x948 <__stack+0x49>
     7ec:	5d 98       	cbi	0x0b, 5	; 11
     7ee:	08 95       	ret
     7f0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7f4:	86 fd       	sbrc	r24, 6
     7f6:	5a 98       	cbi	0x0b, 2	; 11
     7f8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
     7fc:	88 23       	and	r24, r24
     7fe:	0c f4       	brge	.+2      	; 0x802 <Display_driver+0x2f4>
     800:	5e 98       	cbi	0x0b, 6	; 11
     802:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     806:	86 fd       	sbrc	r24, 6
     808:	5b 98       	cbi	0x0b, 3	; 11
     80a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
     80e:	88 23       	and	r24, r24
     810:	0c f0       	brlt	.+2      	; 0x814 <Display_driver+0x306>
     812:	9a c0       	rjmp	.+308    	; 0x948 <__stack+0x49>
     814:	5d 98       	cbi	0x0b, 5	; 11
     816:	08 95       	ret
     818:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     81c:	80 fd       	sbrc	r24, 0
     81e:	5a 98       	cbi	0x0b, 2	; 11
     820:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     824:	81 fd       	sbrc	r24, 1
     826:	5e 98       	cbi	0x0b, 6	; 11
     828:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     82c:	80 fd       	sbrc	r24, 0
     82e:	5b 98       	cbi	0x0b, 3	; 11
     830:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     834:	81 ff       	sbrs	r24, 1
     836:	88 c0       	rjmp	.+272    	; 0x948 <__stack+0x49>
     838:	5d 98       	cbi	0x0b, 5	; 11
     83a:	08 95       	ret
     83c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     840:	82 fd       	sbrc	r24, 2
     842:	5a 98       	cbi	0x0b, 2	; 11
     844:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     848:	83 fd       	sbrc	r24, 3
     84a:	5e 98       	cbi	0x0b, 6	; 11
     84c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     850:	82 fd       	sbrc	r24, 2
     852:	5b 98       	cbi	0x0b, 3	; 11
     854:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     858:	83 ff       	sbrs	r24, 3
     85a:	76 c0       	rjmp	.+236    	; 0x948 <__stack+0x49>
     85c:	5d 98       	cbi	0x0b, 5	; 11
     85e:	08 95       	ret
     860:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     864:	84 fd       	sbrc	r24, 4
     866:	5a 98       	cbi	0x0b, 2	; 11
     868:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     86c:	85 fd       	sbrc	r24, 5
     86e:	5e 98       	cbi	0x0b, 6	; 11
     870:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     874:	84 fd       	sbrc	r24, 4
     876:	5b 98       	cbi	0x0b, 3	; 11
     878:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     87c:	85 ff       	sbrs	r24, 5
     87e:	64 c0       	rjmp	.+200    	; 0x948 <__stack+0x49>
     880:	5d 98       	cbi	0x0b, 5	; 11
     882:	08 95       	ret
     884:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     888:	86 fd       	sbrc	r24, 6
     88a:	5a 98       	cbi	0x0b, 2	; 11
     88c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
     890:	88 23       	and	r24, r24
     892:	0c f4       	brge	.+2      	; 0x896 <Display_driver+0x388>
     894:	5e 98       	cbi	0x0b, 6	; 11
     896:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     89a:	86 fd       	sbrc	r24, 6
     89c:	5b 98       	cbi	0x0b, 3	; 11
     89e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
     8a2:	88 23       	and	r24, r24
     8a4:	0c f0       	brlt	.+2      	; 0x8a8 <Display_driver+0x39a>
     8a6:	50 c0       	rjmp	.+160    	; 0x948 <__stack+0x49>
     8a8:	5d 98       	cbi	0x0b, 5	; 11
     8aa:	08 95       	ret
     8ac:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Char_definition>
     8b0:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <buf_ptr>
     8b4:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <buf_ptr+0x1>
     8b8:	85 30       	cpi	r24, 0x05	; 5
     8ba:	91 05       	cpc	r25, r1
     8bc:	c9 f0       	breq	.+50     	; 0x8f0 <Display_driver+0x3e2>
     8be:	1c f4       	brge	.+6      	; 0x8c6 <Display_driver+0x3b8>
     8c0:	04 97       	sbiw	r24, 0x04	; 4
     8c2:	39 f0       	breq	.+14     	; 0x8d2 <Display_driver+0x3c4>
     8c4:	08 95       	ret
     8c6:	86 30       	cpi	r24, 0x06	; 6
     8c8:	91 05       	cpc	r25, r1
     8ca:	09 f1       	breq	.+66     	; 0x90e <__stack+0xf>
     8cc:	07 97       	sbiw	r24, 0x07	; 7
     8ce:	71 f1       	breq	.+92     	; 0x92c <__stack+0x2d>
     8d0:	08 95       	ret
     8d2:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     8d6:	80 ff       	sbrs	r24, 0
     8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <Display_driver+0x3d2>
     8da:	8b b1       	in	r24, 0x0b	; 11
     8dc:	83 7f       	andi	r24, 0xF3	; 243
     8de:	8b b9       	out	0x0b, r24	; 11
     8e0:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     8e4:	81 ff       	sbrs	r24, 1
     8e6:	30 c0       	rjmp	.+96     	; 0x948 <__stack+0x49>
     8e8:	8b b1       	in	r24, 0x0b	; 11
     8ea:	8f 79       	andi	r24, 0x9F	; 159
     8ec:	8b b9       	out	0x0b, r24	; 11
     8ee:	08 95       	ret
     8f0:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     8f4:	82 ff       	sbrs	r24, 2
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <Display_driver+0x3f0>
     8f8:	8b b1       	in	r24, 0x0b	; 11
     8fa:	83 7f       	andi	r24, 0xF3	; 243
     8fc:	8b b9       	out	0x0b, r24	; 11
     8fe:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     902:	83 ff       	sbrs	r24, 3
     904:	21 c0       	rjmp	.+66     	; 0x948 <__stack+0x49>
     906:	8b b1       	in	r24, 0x0b	; 11
     908:	8f 79       	andi	r24, 0x9F	; 159
     90a:	8b b9       	out	0x0b, r24	; 11
     90c:	08 95       	ret
     90e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     912:	84 ff       	sbrs	r24, 4
     914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0x1d>
     916:	8b b1       	in	r24, 0x0b	; 11
     918:	83 7f       	andi	r24, 0xF3	; 243
     91a:	8b b9       	out	0x0b, r24	; 11
     91c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     920:	85 ff       	sbrs	r24, 5
     922:	12 c0       	rjmp	.+36     	; 0x948 <__stack+0x49>
     924:	8b b1       	in	r24, 0x0b	; 11
     926:	8f 79       	andi	r24, 0x9F	; 159
     928:	8b b9       	out	0x0b, r24	; 11
     92a:	08 95       	ret
     92c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     930:	86 ff       	sbrs	r24, 6
     932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
     934:	8b b1       	in	r24, 0x0b	; 11
     936:	83 7f       	andi	r24, 0xF3	; 243
     938:	8b b9       	out	0x0b, r24	; 11
     93a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
     93e:	88 23       	and	r24, r24
     940:	1c f4       	brge	.+6      	; 0x948 <__stack+0x49>
     942:	8b b1       	in	r24, 0x0b	; 11
     944:	8f 79       	andi	r24, 0x9F	; 159
     946:	8b b9       	out	0x0b, r24	; 11
     948:	08 95       	ret

0000094a <update_timer>:
     94a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	09 f0       	breq	.+2      	; 0x954 <update_timer+0xa>
     952:	58 c0       	rjmp	.+176    	; 0xa04 <update_timer+0xba>
     954:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <clock_buf>
     958:	89 33       	cpi	r24, 0x39	; 57
     95a:	30 f4       	brcc	.+12     	; 0x968 <update_timer+0x1e>
     95c:	e8 ec       	ldi	r30, 0xC8	; 200
     95e:	f1 e0       	ldi	r31, 0x01	; 1
     960:	80 81       	ld	r24, Z
     962:	8f 5f       	subi	r24, 0xFF	; 255
     964:	80 83       	st	Z, r24
     966:	4e c0       	rjmp	.+156    	; 0xa04 <update_timer+0xba>
     968:	e8 ec       	ldi	r30, 0xC8	; 200
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	80 e3       	ldi	r24, 0x30	; 48
     96e:	80 83       	st	Z, r24
     970:	81 81       	ldd	r24, Z+1	; 0x01
     972:	85 33       	cpi	r24, 0x35	; 53
     974:	20 f4       	brcc	.+8      	; 0x97e <update_timer+0x34>
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	81 83       	std	Z+1, r24	; 0x01
     97c:	43 c0       	rjmp	.+134    	; 0xa04 <update_timer+0xba>
     97e:	e8 ec       	ldi	r30, 0xC8	; 200
     980:	f1 e0       	ldi	r31, 0x01	; 1
     982:	80 e3       	ldi	r24, 0x30	; 48
     984:	81 83       	std	Z+1, r24	; 0x01
     986:	83 81       	ldd	r24, Z+3	; 0x03
     988:	89 33       	cpi	r24, 0x39	; 57
     98a:	20 f4       	brcc	.+8      	; 0x994 <update_timer+0x4a>
     98c:	83 81       	ldd	r24, Z+3	; 0x03
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	83 83       	std	Z+3, r24	; 0x03
     992:	38 c0       	rjmp	.+112    	; 0xa04 <update_timer+0xba>
     994:	e8 ec       	ldi	r30, 0xC8	; 200
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 e3       	ldi	r24, 0x30	; 48
     99a:	83 83       	std	Z+3, r24	; 0x03
     99c:	84 81       	ldd	r24, Z+4	; 0x04
     99e:	85 33       	cpi	r24, 0x35	; 53
     9a0:	20 f4       	brcc	.+8      	; 0x9aa <update_timer+0x60>
     9a2:	84 81       	ldd	r24, Z+4	; 0x04
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	2d c0       	rjmp	.+90     	; 0xa04 <update_timer+0xba>
     9aa:	e8 ec       	ldi	r30, 0xC8	; 200
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	80 e3       	ldi	r24, 0x30	; 48
     9b0:	84 83       	std	Z+4, r24	; 0x04
     9b2:	87 81       	ldd	r24, Z+7	; 0x07
     9b4:	80 33       	cpi	r24, 0x30	; 48
     9b6:	30 f1       	brcs	.+76     	; 0xa04 <update_timer+0xba>
     9b8:	82 33       	cpi	r24, 0x32	; 50
     9ba:	18 f0       	brcs	.+6      	; 0x9c2 <update_timer+0x78>
     9bc:	82 33       	cpi	r24, 0x32	; 50
     9be:	99 f0       	breq	.+38     	; 0x9e6 <update_timer+0x9c>
     9c0:	21 c0       	rjmp	.+66     	; 0xa04 <update_timer+0xba>
     9c2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
     9c6:	89 33       	cpi	r24, 0x39	; 57
     9c8:	30 f4       	brcc	.+12     	; 0x9d6 <update_timer+0x8c>
     9ca:	e8 ec       	ldi	r30, 0xC8	; 200
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	86 81       	ldd	r24, Z+6	; 0x06
     9d0:	8f 5f       	subi	r24, 0xFF	; 255
     9d2:	86 83       	std	Z+6, r24	; 0x06
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <update_timer+0xba>
     9d6:	e8 ec       	ldi	r30, 0xC8	; 200
     9d8:	f1 e0       	ldi	r31, 0x01	; 1
     9da:	80 e3       	ldi	r24, 0x30	; 48
     9dc:	86 83       	std	Z+6, r24	; 0x06
     9de:	87 81       	ldd	r24, Z+7	; 0x07
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	87 83       	std	Z+7, r24	; 0x07
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <update_timer+0xba>
     9e6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
     9ea:	83 33       	cpi	r24, 0x33	; 51
     9ec:	30 f4       	brcc	.+12     	; 0x9fa <update_timer+0xb0>
     9ee:	e8 ec       	ldi	r30, 0xC8	; 200
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	86 81       	ldd	r24, Z+6	; 0x06
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	86 83       	std	Z+6, r24	; 0x06
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <update_timer+0xba>
     9fa:	e8 ec       	ldi	r30, 0xC8	; 200
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	80 e3       	ldi	r24, 0x30	; 48
     a00:	86 83       	std	Z+6, r24	; 0x06
     a02:	87 83       	std	Z+7, r24	; 0x07
     a04:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	71 f5       	brne	.+92     	; 0xa68 <update_timer+0x11e>
     a0c:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <stop_watch_buf+0x3>
     a10:	89 33       	cpi	r24, 0x39	; 57
     a12:	30 f4       	brcc	.+12     	; 0xa20 <update_timer+0xd6>
     a14:	e0 ea       	ldi	r30, 0xA0	; 160
     a16:	f2 e0       	ldi	r31, 0x02	; 2
     a18:	83 81       	ldd	r24, Z+3	; 0x03
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
     a1c:	83 83       	std	Z+3, r24	; 0x03
     a1e:	24 c0       	rjmp	.+72     	; 0xa68 <update_timer+0x11e>
     a20:	e0 ea       	ldi	r30, 0xA0	; 160
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	80 e3       	ldi	r24, 0x30	; 48
     a26:	83 83       	std	Z+3, r24	; 0x03
     a28:	84 81       	ldd	r24, Z+4	; 0x04
     a2a:	85 33       	cpi	r24, 0x35	; 53
     a2c:	20 f4       	brcc	.+8      	; 0xa36 <update_timer+0xec>
     a2e:	84 81       	ldd	r24, Z+4	; 0x04
     a30:	8f 5f       	subi	r24, 0xFF	; 255
     a32:	84 83       	std	Z+4, r24	; 0x04
     a34:	19 c0       	rjmp	.+50     	; 0xa68 <update_timer+0x11e>
     a36:	e0 ea       	ldi	r30, 0xA0	; 160
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	80 e3       	ldi	r24, 0x30	; 48
     a3c:	84 83       	std	Z+4, r24	; 0x04
     a3e:	86 81       	ldd	r24, Z+6	; 0x06
     a40:	89 33       	cpi	r24, 0x39	; 57
     a42:	20 f4       	brcc	.+8      	; 0xa4c <update_timer+0x102>
     a44:	86 81       	ldd	r24, Z+6	; 0x06
     a46:	8f 5f       	subi	r24, 0xFF	; 255
     a48:	86 83       	std	Z+6, r24	; 0x06
     a4a:	0e c0       	rjmp	.+28     	; 0xa68 <update_timer+0x11e>
     a4c:	e0 ea       	ldi	r30, 0xA0	; 160
     a4e:	f2 e0       	ldi	r31, 0x02	; 2
     a50:	80 e3       	ldi	r24, 0x30	; 48
     a52:	86 83       	std	Z+6, r24	; 0x06
     a54:	87 81       	ldd	r24, Z+7	; 0x07
     a56:	85 33       	cpi	r24, 0x35	; 53
     a58:	20 f4       	brcc	.+8      	; 0xa62 <update_timer+0x118>
     a5a:	87 81       	ldd	r24, Z+7	; 0x07
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	87 83       	std	Z+7, r24	; 0x07
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <update_timer+0x11e>
     a62:	80 e3       	ldi	r24, 0x30	; 48
     a64:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <stop_watch_buf+0x7>
     a68:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	c9 f5       	brne	.+114    	; 0xae2 <update_timer+0x198>
     a70:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <stop_watch_buf+0x2>
     a74:	89 33       	cpi	r24, 0x39	; 57
     a76:	30 f4       	brcc	.+12     	; 0xa84 <update_timer+0x13a>
     a78:	e0 ea       	ldi	r30, 0xA0	; 160
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	82 83       	std	Z+2, r24	; 0x02
     a82:	08 95       	ret
     a84:	e0 ea       	ldi	r30, 0xA0	; 160
     a86:	f2 e0       	ldi	r31, 0x02	; 2
     a88:	80 e3       	ldi	r24, 0x30	; 48
     a8a:	82 83       	std	Z+2, r24	; 0x02
     a8c:	83 81       	ldd	r24, Z+3	; 0x03
     a8e:	85 33       	cpi	r24, 0x35	; 53
     a90:	20 f4       	brcc	.+8      	; 0xa9a <update_timer+0x150>
     a92:	83 81       	ldd	r24, Z+3	; 0x03
     a94:	8f 5f       	subi	r24, 0xFF	; 255
     a96:	83 83       	std	Z+3, r24	; 0x03
     a98:	08 95       	ret
     a9a:	e0 ea       	ldi	r30, 0xA0	; 160
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	80 e3       	ldi	r24, 0x30	; 48
     aa0:	83 83       	std	Z+3, r24	; 0x03
     aa2:	85 81       	ldd	r24, Z+5	; 0x05
     aa4:	89 33       	cpi	r24, 0x39	; 57
     aa6:	20 f4       	brcc	.+8      	; 0xab0 <update_timer+0x166>
     aa8:	85 81       	ldd	r24, Z+5	; 0x05
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	85 83       	std	Z+5, r24	; 0x05
     aae:	08 95       	ret
     ab0:	e0 ea       	ldi	r30, 0xA0	; 160
     ab2:	f2 e0       	ldi	r31, 0x02	; 2
     ab4:	80 e3       	ldi	r24, 0x30	; 48
     ab6:	85 83       	std	Z+5, r24	; 0x05
     ab8:	86 81       	ldd	r24, Z+6	; 0x06
     aba:	85 33       	cpi	r24, 0x35	; 53
     abc:	20 f4       	brcc	.+8      	; 0xac6 <update_timer+0x17c>
     abe:	86 81       	ldd	r24, Z+6	; 0x06
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	86 83       	std	Z+6, r24	; 0x06
     ac4:	08 95       	ret
     ac6:	e0 ea       	ldi	r30, 0xA0	; 160
     ac8:	f2 e0       	ldi	r31, 0x02	; 2
     aca:	80 e3       	ldi	r24, 0x30	; 48
     acc:	86 83       	std	Z+6, r24	; 0x06
     ace:	87 81       	ldd	r24, Z+7	; 0x07
     ad0:	89 33       	cpi	r24, 0x39	; 57
     ad2:	20 f4       	brcc	.+8      	; 0xadc <update_timer+0x192>
     ad4:	87 81       	ldd	r24, Z+7	; 0x07
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	87 83       	std	Z+7, r24	; 0x07
     ada:	08 95       	ret
     adc:	80 e3       	ldi	r24, 0x30	; 48
     ade:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <stop_watch_buf+0x7>
     ae2:	08 95       	ret

00000ae4 <update_milli_sec_display>:
     ae4:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	81 f0       	breq	.+32     	; 0xb0c <update_milli_sec_display+0x28>
     aec:	83 30       	cpi	r24, 0x03	; 3
     aee:	31 f5       	brne	.+76     	; 0xb3c <update_milli_sec_display+0x58>
     af0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <stop_watch_buf>
     af4:	89 33       	cpi	r24, 0x39	; 57
     af6:	30 f4       	brcc	.+12     	; 0xb04 <update_milli_sec_display+0x20>
     af8:	e0 ea       	ldi	r30, 0xA0	; 160
     afa:	f2 e0       	ldi	r31, 0x02	; 2
     afc:	80 81       	ld	r24, Z
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 83       	st	Z, r24
     b02:	08 95       	ret
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <stop_watch_buf>
     b0a:	08 95       	ret
     b0c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <stop_watch_buf>
     b10:	89 33       	cpi	r24, 0x39	; 57
     b12:	30 f4       	brcc	.+12     	; 0xb20 <update_milli_sec_display+0x3c>
     b14:	e0 ea       	ldi	r30, 0xA0	; 160
     b16:	f2 e0       	ldi	r31, 0x02	; 2
     b18:	80 81       	ld	r24, Z
     b1a:	8f 5f       	subi	r24, 0xFF	; 255
     b1c:	80 83       	st	Z, r24
     b1e:	08 95       	ret
     b20:	e0 ea       	ldi	r30, 0xA0	; 160
     b22:	f2 e0       	ldi	r31, 0x02	; 2
     b24:	80 e3       	ldi	r24, 0x30	; 48
     b26:	80 83       	st	Z, r24
     b28:	81 81       	ldd	r24, Z+1	; 0x01
     b2a:	89 33       	cpi	r24, 0x39	; 57
     b2c:	20 f4       	brcc	.+8      	; 0xb36 <update_milli_sec_display+0x52>
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	81 83       	std	Z+1, r24	; 0x01
     b34:	08 95       	ret
     b36:	80 e3       	ldi	r24, 0x30	; 48
     b38:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <stop_watch_buf+0x1>
     b3c:	08 95       	ret

00000b3e <Timer_T1_sub>:
     b3e:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b42:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	96 bb       	out	0x16, r25	; 22
     b4a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     b4e:	b0 9b       	sbis	0x16, 0	; 22
     b50:	fe cf       	rjmp	.-4      	; 0xb4e <Timer_T1_sub+0x10>
     b52:	b0 9a       	sbi	0x16, 0	; 22
     b54:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     b58:	08 95       	ret

00000b5a <Disp_CharS>:


/*********************************************************************/
void Disp_CharS(signed char n){ 
unsigned char i; signed char sign;
for(int m = 0; m <= 3; m++){display_buf[m] = '\0';}
     b5a:	ef e0       	ldi	r30, 0x0F	; 15
     b5c:	f2 e0       	ldi	r31, 0x02	; 2
     b5e:	10 82       	st	Z, r1
     b60:	11 82       	std	Z+1, r1	; 0x01
     b62:	12 82       	std	Z+2, r1	; 0x02
     b64:	13 82       	std	Z+3, r1	; 0x03
if (n == -128) {display_buf[0] = '8';display_buf[1] = '2';display_buf[2] = '1';display_buf[3] = '-';}
     b66:	80 38       	cpi	r24, 0x80	; 128
     b68:	49 f4       	brne	.+18     	; 0xb7c <Disp_CharS+0x22>
     b6a:	88 e3       	ldi	r24, 0x38	; 56
     b6c:	80 83       	st	Z, r24
     b6e:	82 e3       	ldi	r24, 0x32	; 50
     b70:	81 83       	std	Z+1, r24	; 0x01
     b72:	81 e3       	ldi	r24, 0x31	; 49
     b74:	82 83       	std	Z+2, r24	; 0x02
     b76:	8d e2       	ldi	r24, 0x2D	; 45
     b78:	83 83       	std	Z+3, r24	; 0x03
     b7a:	08 95       	ret
else{
if ((sign = n) < 0) n = -n;
     b7c:	98 2f       	mov	r25, r24
     b7e:	97 fd       	sbrc	r25, 7
     b80:	91 95       	neg	r25
     b82:	40 e0       	ldi	r20, 0x00	; 0
i=0; 
do{
display_buf[i] = n % 10  +  '0';
     b84:	67 e6       	ldi	r22, 0x67	; 103
     b86:	e4 2f       	mov	r30, r20
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	96 02       	muls	r25, r22
     b8c:	21 2d       	mov	r18, r1
     b8e:	11 24       	eor	r1, r1
     b90:	25 95       	asr	r18
     b92:	25 95       	asr	r18
     b94:	97 fd       	sbrc	r25, 7
     b96:	23 95       	inc	r18
     b98:	52 2f       	mov	r21, r18
     b9a:	55 0f       	add	r21, r21
     b9c:	35 2f       	mov	r19, r21
     b9e:	33 0f       	add	r19, r19
     ba0:	33 0f       	add	r19, r19
     ba2:	35 0f       	add	r19, r21
     ba4:	93 1b       	sub	r25, r19
     ba6:	90 5d       	subi	r25, 0xD0	; 208
     ba8:	e1 5f       	subi	r30, 0xF1	; 241
     baa:	fd 4f       	sbci	r31, 0xFD	; 253
     bac:	90 83       	st	Z, r25
i++;
     bae:	4f 5f       	subi	r20, 0xFF	; 255
}while((n/=10)>0);
     bb0:	92 2f       	mov	r25, r18
     bb2:	12 16       	cp	r1, r18
     bb4:	44 f3       	brlt	.-48     	; 0xb86 <Disp_CharS+0x2c>
if (sign < 0)display_buf[i] = '-';}}
     bb6:	88 23       	and	r24, r24
     bb8:	34 f4       	brge	.+12     	; 0xbc6 <Disp_CharS+0x6c>
     bba:	e4 2f       	mov	r30, r20
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	e1 5f       	subi	r30, 0xF1	; 241
     bc0:	fd 4f       	sbci	r31, 0xFD	; 253
     bc2:	8d e2       	ldi	r24, 0x2D	; 45
     bc4:	80 83       	st	Z, r24
     bc6:	08 95       	ret

00000bc8 <Disp_CharU>:


/*********************************************************************/
void Disp_CharU(unsigned char n){ 
unsigned char i; 
for(int m = 0; m <= 3; m++){display_buf[m] = '\0';}
     bc8:	ef e0       	ldi	r30, 0x0F	; 15
     bca:	f2 e0       	ldi	r31, 0x02	; 2
     bcc:	10 82       	st	Z, r1
     bce:	11 82       	std	Z+1, r1	; 0x01
     bd0:	12 82       	std	Z+2, r1	; 0x02
     bd2:	13 82       	std	Z+3, r1	; 0x03
     bd4:	30 e0       	ldi	r19, 0x00	; 0
i=0; 
do{
display_buf[i] = n % 10  +  '0';
     bd6:	5d ec       	ldi	r21, 0xCD	; 205
     bd8:	e3 2f       	mov	r30, r19
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	85 9f       	mul	r24, r21
     bde:	91 2d       	mov	r25, r1
     be0:	11 24       	eor	r1, r1
     be2:	96 95       	lsr	r25
     be4:	96 95       	lsr	r25
     be6:	96 95       	lsr	r25
     be8:	49 2f       	mov	r20, r25
     bea:	44 0f       	add	r20, r20
     bec:	24 2f       	mov	r18, r20
     bee:	22 0f       	add	r18, r18
     bf0:	22 0f       	add	r18, r18
     bf2:	24 0f       	add	r18, r20
     bf4:	82 1b       	sub	r24, r18
     bf6:	80 5d       	subi	r24, 0xD0	; 208
     bf8:	e1 5f       	subi	r30, 0xF1	; 241
     bfa:	fd 4f       	sbci	r31, 0xFD	; 253
     bfc:	80 83       	st	Z, r24
i++;
     bfe:	3f 5f       	subi	r19, 0xFF	; 255
}while((n/=10)>0);}
     c00:	89 2f       	mov	r24, r25
     c02:	91 11       	cpse	r25, r1
     c04:	e9 cf       	rjmp	.-46     	; 0xbd8 <Disp_CharU+0x10>
     c06:	08 95       	ret

00000c08 <Disp_Long>:



/*********************************************************************/
void Disp_Long(unsigned long num, signed char exponent){ 
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	2c 97       	sbiw	r28, 0x0c	; 12
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	c4 2e       	mov	r12, r20
unsigned char i, display_mode, result[12]; 
signed char   zero_counter, digit_counter, string_length, string_shift;

for(int m = 0; m <= 7; m++){display_buf[m] = '\0';}
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	e1 5f       	subi	r30, 0xF1	; 241
     c3a:	fd 4f       	sbci	r31, 0xFD	; 253
     c3c:	10 82       	st	Z, r1
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	28 30       	cpi	r18, 0x08	; 8
     c44:	31 05       	cpc	r19, r1
     c46:	b9 f7       	brne	.-18     	; 0xc36 <Disp_Long+0x2e>
     c48:	8e 01       	movw	r16, r28
     c4a:	0f 5f       	subi	r16, 0xFF	; 255
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	9e 01       	movw	r18, r28
     c50:	25 5f       	subi	r18, 0xF5	; 245
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	f8 01       	movw	r30, r16
for(int m = 0; m <= 9; m++){result[m] = '\0';}
     c56:	11 92       	st	Z+, r1
     c58:	e2 17       	cp	r30, r18
     c5a:	f3 07       	cpc	r31, r19
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <Disp_Long+0x4e>

if (exponent >= 8)display_mode = 4;
     c5e:	27 e0       	ldi	r18, 0x07	; 7
     c60:	2c 15       	cp	r18, r12
     c62:	0c f4       	brge	.+2      	; 0xc66 <Disp_Long+0x5e>
     c64:	0c c1       	rjmp	.+536    	; 0xe7e <Disp_Long+0x276>
     c66:	d1 2c       	mov	r13, r1
else{

{i=0; do{
result[i] = num % 10  +  '0'; i++;}while((num/=10)>0);				//convert number to string
     c68:	0f 2e       	mov	r0, r31
     c6a:	fa e0       	ldi	r31, 0x0A	; 10
     c6c:	8f 2e       	mov	r8, r31
     c6e:	91 2c       	mov	r9, r1
     c70:	a1 2c       	mov	r10, r1
     c72:	b1 2c       	mov	r11, r1
     c74:	f0 2d       	mov	r31, r0
     c76:	ee 24       	eor	r14, r14
     c78:	e3 94       	inc	r14
     c7a:	f1 2c       	mov	r15, r1
     c7c:	ec 0e       	add	r14, r28
     c7e:	fd 1e       	adc	r15, r29
     c80:	ed 0c       	add	r14, r13
     c82:	f1 1c       	adc	r15, r1
     c84:	a5 01       	movw	r20, r10
     c86:	94 01       	movw	r18, r8
     c88:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
     c8c:	60 5d       	subi	r22, 0xD0	; 208
     c8e:	d7 01       	movw	r26, r14
     c90:	6c 93       	st	X, r22
     c92:	d3 94       	inc	r13
     c94:	62 2f       	mov	r22, r18
     c96:	73 2f       	mov	r23, r19
     c98:	84 2f       	mov	r24, r20
     c9a:	95 2f       	mov	r25, r21
     c9c:	61 15       	cp	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	81 05       	cpc	r24, r1
     ca2:	91 05       	cpc	r25, r1
     ca4:	41 f7       	brne	.-48     	; 0xc76 <Disp_Long+0x6e>

if (i > 8) {for(int m = 0; m <= 7; m++){result[m] = result[m+i-8];}}  
     ca6:	b8 e0       	ldi	r27, 0x08	; 8
     ca8:	bd 15       	cp	r27, r13
     caa:	68 f4       	brcc	.+26     	; 0xcc6 <Disp_Long+0xbe>
     cac:	de 01       	movw	r26, r28
     cae:	ad 0d       	add	r26, r13
     cb0:	b1 1d       	adc	r27, r1
     cb2:	17 97       	sbiw	r26, 0x07	; 7
     cb4:	9e 01       	movw	r18, r28
     cb6:	27 5f       	subi	r18, 0xF7	; 247
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	f8 01       	movw	r30, r16
     cbc:	8d 91       	ld	r24, X+
     cbe:	81 93       	st	Z+, r24
     cc0:	e2 17       	cp	r30, r18
     cc2:	f3 07       	cpc	r31, r19
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <Disp_Long+0xb4>
if (i < 8) exponent++;}				
     cc6:	e7 e0       	ldi	r30, 0x07	; 7
     cc8:	ed 15       	cp	r30, r13
     cca:	08 f0       	brcs	.+2      	; 0xcce <Disp_Long+0xc6>
     ccc:	c3 94       	inc	r12

zero_counter = 0; while (result[zero_counter] == '0')zero_counter++;	// count the number of trailing zeros
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	80 33       	cpi	r24, 0x30	; 48
     cd2:	71 f4       	brne	.+28     	; 0xcf0 <Disp_Long+0xe8>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	e1 e0       	ldi	r30, 0x01	; 1
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	ec 0f       	add	r30, r28
     cde:	fd 1f       	adc	r31, r29
     ce0:	e8 0f       	add	r30, r24
     ce2:	f1 1d       	adc	r31, r1
     ce4:	87 fd       	sbrc	r24, 7
     ce6:	fa 95       	dec	r31
     ce8:	90 81       	ld	r25, Z
     cea:	90 33       	cpi	r25, 0x30	; 48
     cec:	a1 f3       	breq	.-24     	; 0xcd6 <Disp_Long+0xce>
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <Disp_Long+0xea>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
digit_counter = 8 - zero_counter;

if (exponent > 0) display_mode = 1;
if (exponent < 0) {display_mode = 2; exponent = exponent * (-1);}
     cf2:	cc 20       	and	r12, r12
     cf4:	0c f0       	brlt	.+2      	; 0xcf8 <Disp_Long+0xf0>
     cf6:	15 c1       	rjmp	.+554    	; 0xf22 <Disp_Long+0x31a>
     cf8:	c1 94       	neg	r12
     cfa:	5e c0       	rjmp	.+188    	; 0xdb8 <Disp_Long+0x1b0>
if (exponent == 0) display_mode = 3;}

switch (display_mode){
case 1:
if(exponent <= (8 - zero_counter))
     cfc:	2c 2d       	mov	r18, r12
     cfe:	0c 2c       	mov	r0, r12
     d00:	00 0c       	add	r0, r0
     d02:	33 0b       	sbc	r19, r19
     d04:	68 2f       	mov	r22, r24
     d06:	08 2e       	mov	r0, r24
     d08:	00 0c       	add	r0, r0
     d0a:	77 0b       	sbc	r23, r23
     d0c:	48 e0       	ldi	r20, 0x08	; 8
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	46 1b       	sub	r20, r22
     d12:	57 0b       	sbc	r21, r23
     d14:	42 17       	cp	r20, r18
     d16:	53 07       	cpc	r21, r19
     d18:	24 f4       	brge	.+8      	; 0xd22 <Disp_Long+0x11a>
{for(int m = zero_counter; m <=7; m++) display_buf[m-zero_counter] = result[m];	//shift right to remove all zeros
display_mask = 0; for(int m = 0; m <= (8 - zero_counter - exponent); m++)display_mask = (display_mask << 1) + 1; 
display_mask = display_mask >> 1;}
else{
{for (int m=0; m<exponent; m++)display_buf[m] = result[8 - exponent + m];}}break;
     d1a:	12 16       	cp	r1, r18
     d1c:	13 06       	cpc	r1, r19
     d1e:	a4 f1       	brlt	.+104    	; 0xd88 <Disp_Long+0x180>
     d20:	fd c0       	rjmp	.+506    	; 0xf1c <Disp_Long+0x314>
if (exponent == 0) display_mode = 3;}

switch (display_mode){
case 1:
if(exponent <= (8 - zero_counter))
{for(int m = zero_counter; m <=7; m++) display_buf[m-zero_counter] = result[m];	//shift right to remove all zeros
     d22:	68 30       	cpi	r22, 0x08	; 8
     d24:	71 05       	cpc	r23, r1
     d26:	c4 f4       	brge	.+48     	; 0xd58 <Disp_Long+0x150>
     d28:	08 2e       	mov	r0, r24
     d2a:	00 0c       	add	r0, r0
     d2c:	99 0b       	sbc	r25, r25
     d2e:	e1 e0       	ldi	r30, 0x01	; 1
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	ec 0f       	add	r30, r28
     d34:	fd 1f       	adc	r31, r29
     d36:	e8 0f       	add	r30, r24
     d38:	f9 1f       	adc	r31, r25
     d3a:	08 e0       	ldi	r16, 0x08	; 8
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	08 1b       	sub	r16, r24
     d40:	19 0b       	sbc	r17, r25
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	61 91       	ld	r22, Z+
     d48:	dc 01       	movw	r26, r24
     d4a:	a1 5f       	subi	r26, 0xF1	; 241
     d4c:	bd 4f       	sbci	r27, 0xFD	; 253
     d4e:	6c 93       	st	X, r22
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	80 17       	cp	r24, r16
     d54:	91 07       	cpc	r25, r17
     d56:	b9 f7       	brne	.-18     	; 0xd46 <Disp_Long+0x13e>
display_mask = 0; for(int m = 0; m <= (8 - zero_counter - exponent); m++)display_mask = (display_mask << 1) + 1; 
     d58:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <display_mask>
     d5c:	42 1b       	sub	r20, r18
     d5e:	53 0b       	sbc	r21, r19
     d60:	6a f0       	brmi	.+26     	; 0xd7c <Disp_Long+0x174>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     d6a:	88 0f       	add	r24, r24
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
     d72:	2f 5f       	subi	r18, 0xFF	; 255
     d74:	3f 4f       	sbci	r19, 0xFF	; 255
     d76:	42 17       	cp	r20, r18
     d78:	53 07       	cpc	r21, r19
     d7a:	ac f7       	brge	.-22     	; 0xd66 <Disp_Long+0x15e>
display_mask = display_mask >> 1;}
     d7c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
     d80:	86 95       	lsr	r24
     d82:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
     d86:	ca c0       	rjmp	.+404    	; 0xf1c <Disp_Long+0x314>
     d88:	e8 e0       	ldi	r30, 0x08	; 8
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	ec 19       	sub	r30, r12
     d8e:	f1 09       	sbc	r31, r1
     d90:	c7 fc       	sbrc	r12, 7
     d92:	f3 95       	inc	r31
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	8c 0f       	add	r24, r28
     d9a:	9d 1f       	adc	r25, r29
     d9c:	e8 0f       	add	r30, r24
     d9e:	f9 1f       	adc	r31, r25
else{
{for (int m=0; m<exponent; m++)display_buf[m] = result[8 - exponent + m];}}break;
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	41 91       	ld	r20, Z+
     da6:	dc 01       	movw	r26, r24
     da8:	a1 5f       	subi	r26, 0xF1	; 241
     daa:	bd 4f       	sbci	r27, 0xFD	; 253
     dac:	4c 93       	st	X, r20
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	28 17       	cp	r18, r24
     db2:	39 07       	cpc	r19, r25
     db4:	b9 f7       	brne	.-18     	; 0xda4 <Disp_Long+0x19c>
     db6:	b2 c0       	rjmp	.+356    	; 0xf1c <Disp_Long+0x314>

if (i > 8) {for(int m = 0; m <= 7; m++){result[m] = result[m+i-8];}}  
if (i < 8) exponent++;}				

zero_counter = 0; while (result[zero_counter] == '0')zero_counter++;	// count the number of trailing zeros
digit_counter = 8 - zero_counter;
     db8:	98 2f       	mov	r25, r24
else{
{for (int m=0; m<exponent; m++)display_buf[m] = result[8 - exponent + m];}}break;
case 2:
case 3:
string_length = digit_counter + exponent;
string_shift = string_length - 6; if(string_shift < 0)string_shift = 0;
     dba:	6c 2d       	mov	r22, r12
     dbc:	68 1b       	sub	r22, r24
     dbe:	6e 5f       	subi	r22, 0xFE	; 254
     dc0:	0a f4       	brpl	.+2      	; 0xdc4 <Disp_Long+0x1bc>
     dc2:	60 e0       	ldi	r22, 0x00	; 0
for(int m = zero_counter; m <=7; m++) result[m-zero_counter] = result[m];				//shift out trailing zeros
     dc4:	88 30       	cpi	r24, 0x08	; 8
     dc6:	94 f4       	brge	.+36     	; 0xdec <Disp_Long+0x1e4>
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ec 0f       	add	r30, r28
     dce:	fd 1f       	adc	r31, r29
     dd0:	e8 0f       	add	r30, r24
     dd2:	f1 1d       	adc	r31, r1
     dd4:	87 fd       	sbrc	r24, 7
     dd6:	fa 95       	dec	r31
     dd8:	9e 01       	movw	r18, r28
     dda:	27 5f       	subi	r18, 0xF7	; 247
     ddc:	3f 4f       	sbci	r19, 0xFF	; 255
     dde:	81 91       	ld	r24, Z+
     de0:	d8 01       	movw	r26, r16
     de2:	8d 93       	st	X+, r24
     de4:	8d 01       	movw	r16, r26
     de6:	e2 17       	cp	r30, r18
     de8:	f3 07       	cpc	r31, r19
     dea:	c9 f7       	brne	.-14     	; 0xdde <Disp_Long+0x1d6>

if (i > 8) {for(int m = 0; m <= 7; m++){result[m] = result[m+i-8];}}  
if (i < 8) exponent++;}				

zero_counter = 0; while (result[zero_counter] == '0')zero_counter++;	// count the number of trailing zeros
digit_counter = 8 - zero_counter;
     dec:	48 e0       	ldi	r20, 0x08	; 8
     dee:	49 1b       	sub	r20, r25
case 3:
string_length = digit_counter + exponent;
string_shift = string_length - 6; if(string_shift < 0)string_shift = 0;
for(int m = zero_counter; m <=7; m++) result[m-zero_counter] = result[m];				//shift out trailing zeros

for (int m = 0; m < (digit_counter - string_shift); m++){display_buf[m] = result[m + string_shift];}
     df0:	24 2f       	mov	r18, r20
     df2:	04 2e       	mov	r0, r20
     df4:	00 0c       	add	r0, r0
     df6:	33 0b       	sbc	r19, r19
     df8:	26 1b       	sub	r18, r22
     dfa:	31 09       	sbc	r19, r1
     dfc:	67 fd       	sbrc	r22, 7
     dfe:	33 95       	inc	r19
     e00:	12 16       	cp	r1, r18
     e02:	13 06       	cpc	r1, r19
     e04:	9c f4       	brge	.+38     	; 0xe2c <Disp_Long+0x224>
     e06:	e1 e0       	ldi	r30, 0x01	; 1
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ec 0f       	add	r30, r28
     e0c:	fd 1f       	adc	r31, r29
     e0e:	e6 0f       	add	r30, r22
     e10:	f1 1d       	adc	r31, r1
     e12:	67 fd       	sbrc	r22, 7
     e14:	fa 95       	dec	r31
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	51 91       	ld	r21, Z+
     e1c:	dc 01       	movw	r26, r24
     e1e:	a1 5f       	subi	r26, 0xF1	; 241
     e20:	bd 4f       	sbci	r27, 0xFD	; 253
     e22:	5c 93       	st	X, r21
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	82 17       	cp	r24, r18
     e28:	93 07       	cpc	r25, r19
     e2a:	b9 f7       	brne	.-18     	; 0xe1a <Disp_Long+0x212>
for(int m = 0; m < exponent; m++){display_buf[m + digit_counter - string_shift] = '0';}
     e2c:	ac 2d       	mov	r26, r12
     e2e:	0c 2c       	mov	r0, r12
     e30:	00 0c       	add	r0, r0
     e32:	bb 0b       	sbc	r27, r27
     e34:	1a 16       	cp	r1, r26
     e36:	1b 06       	cpc	r1, r27
     e38:	ac f4       	brge	.+42     	; 0xe64 <Disp_Long+0x25c>
     e3a:	c9 01       	movw	r24, r18
     e3c:	04 2e       	mov	r0, r20
     e3e:	00 0c       	add	r0, r0
     e40:	55 0b       	sbc	r21, r21
     e42:	4c 0d       	add	r20, r12
     e44:	51 1d       	adc	r21, r1
     e46:	c7 fc       	sbrc	r12, 7
     e48:	5a 95       	dec	r21
     e4a:	46 1b       	sub	r20, r22
     e4c:	51 09       	sbc	r21, r1
     e4e:	67 fd       	sbrc	r22, 7
     e50:	53 95       	inc	r21
     e52:	60 e3       	ldi	r22, 0x30	; 48
     e54:	fc 01       	movw	r30, r24
     e56:	e1 5f       	subi	r30, 0xF1	; 241
     e58:	fd 4f       	sbci	r31, 0xFD	; 253
     e5a:	60 83       	st	Z, r22
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	84 17       	cp	r24, r20
     e60:	95 07       	cpc	r25, r21
     e62:	c1 f7       	brne	.-16     	; 0xe54 <Disp_Long+0x24c>
display_buf[digit_counter - string_shift + exponent] = '_';
     e64:	2a 0f       	add	r18, r26
     e66:	3b 1f       	adc	r19, r27
     e68:	f9 01       	movw	r30, r18
     e6a:	e1 5f       	subi	r30, 0xF1	; 241
     e6c:	fd 4f       	sbci	r31, 0xFD	; 253
     e6e:	8f e5       	ldi	r24, 0x5F	; 95
     e70:	80 83       	st	Z, r24
display_buf[digit_counter - string_shift + exponent + 1] = '0';
     e72:	f9 01       	movw	r30, r18
     e74:	e0 5f       	subi	r30, 0xF0	; 240
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	80 e3       	ldi	r24, 0x30	; 48
     e7a:	80 83       	st	Z, r24
break;
     e7c:	4f c0       	rjmp	.+158    	; 0xf1c <Disp_Long+0x314>
     e7e:	f1 2c       	mov	r15, r1
case 4:
{i=0; do{
result[i] = num % 10  +  '0'; i++;}while((num/=10)>0);}				//convert number to string
     e80:	0f 2e       	mov	r0, r31
     e82:	fa e0       	ldi	r31, 0x0A	; 10
     e84:	8f 2e       	mov	r8, r31
     e86:	91 2c       	mov	r9, r1
     e88:	a1 2c       	mov	r10, r1
     e8a:	b1 2c       	mov	r11, r1
     e8c:	f0 2d       	mov	r31, r0
     e8e:	01 e0       	ldi	r16, 0x01	; 1
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	0c 0f       	add	r16, r28
     e94:	1d 1f       	adc	r17, r29
     e96:	0f 0d       	add	r16, r15
     e98:	11 1d       	adc	r17, r1
     e9a:	a5 01       	movw	r20, r10
     e9c:	94 01       	movw	r18, r8
     e9e:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
     ea2:	60 5d       	subi	r22, 0xD0	; 208
     ea4:	f8 01       	movw	r30, r16
     ea6:	60 83       	st	Z, r22
     ea8:	f3 94       	inc	r15
     eaa:	62 2f       	mov	r22, r18
     eac:	73 2f       	mov	r23, r19
     eae:	84 2f       	mov	r24, r20
     eb0:	95 2f       	mov	r25, r21
     eb2:	61 15       	cp	r22, r1
     eb4:	71 05       	cpc	r23, r1
     eb6:	81 05       	cpc	r24, r1
     eb8:	91 05       	cpc	r25, r1
     eba:	49 f7       	brne	.-46     	; 0xe8e <Disp_Long+0x286>
for (int m = 0; m<= 4; m++){display_buf[7-m] = result[8-m];} display_buf[2] = 'X';  
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	ef e0       	ldi	r30, 0x0F	; 15
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	87 83       	std	Z+7, r24	; 0x07
     ec4:	88 85       	ldd	r24, Y+8	; 0x08
     ec6:	86 83       	std	Z+6, r24	; 0x06
     ec8:	8f 81       	ldd	r24, Y+7	; 0x07
     eca:	85 83       	std	Z+5, r24	; 0x05
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	84 83       	std	Z+4, r24	; 0x04
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	83 83       	std	Z+3, r24	; 0x03
     ed4:	88 e5       	ldi	r24, 0x58	; 88
     ed6:	82 83       	std	Z+2, r24	; 0x02
display_buf[1] = exponent/10 + '0';
     ed8:	87 e6       	ldi	r24, 0x67	; 103
     eda:	2c 2d       	mov	r18, r12
     edc:	28 02       	muls	r18, r24
     ede:	81 2d       	mov	r24, r1
     ee0:	11 24       	eor	r1, r1
     ee2:	85 95       	asr	r24
     ee4:	85 95       	asr	r24
     ee6:	c7 fc       	sbrc	r12, 7
     ee8:	83 95       	inc	r24
     eea:	90 e3       	ldi	r25, 0x30	; 48
     eec:	98 0f       	add	r25, r24
     eee:	91 83       	std	Z+1, r25	; 0x01
display_buf[0] = exponent%10 + '0';
     ef0:	88 0f       	add	r24, r24
     ef2:	98 2f       	mov	r25, r24
     ef4:	99 0f       	add	r25, r25
     ef6:	99 0f       	add	r25, r25
     ef8:	89 0f       	add	r24, r25
     efa:	c8 1a       	sub	r12, r24
     efc:	8c 2d       	mov	r24, r12
     efe:	80 5d       	subi	r24, 0xD0	; 208
     f00:	80 83       	st	Z, r24
display_mask = 0b11111000;
     f02:	88 ef       	ldi	r24, 0xF8	; 248
     f04:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
break;}
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <Disp_Long+0x314>

for(int p = 0; p < 8; p++)strobe[p] = 0;}					//synchronise strobe
     f0a:	fc 01       	movw	r30, r24
     f0c:	e4 57       	subi	r30, 0x74	; 116
     f0e:	fd 4f       	sbci	r31, 0xFD	; 253
     f10:	10 82       	st	Z, r1
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	91 05       	cpc	r25, r1
     f18:	c1 f7       	brne	.-16     	; 0xf0a <Disp_Long+0x302>
     f1a:	07 c0       	rjmp	.+14     	; 0xf2a <Disp_Long+0x322>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	f4 cf       	rjmp	.-24     	; 0xf0a <Disp_Long+0x302>
zero_counter = 0; while (result[zero_counter] == '0')zero_counter++;	// count the number of trailing zeros
digit_counter = 8 - zero_counter;

if (exponent > 0) display_mode = 1;
if (exponent < 0) {display_mode = 2; exponent = exponent * (-1);}
if (exponent == 0) display_mode = 3;}
     f22:	cc 20       	and	r12, r12
     f24:	09 f4       	brne	.+2      	; 0xf28 <Disp_Long+0x320>
     f26:	48 cf       	rjmp	.-368    	; 0xdb8 <Disp_Long+0x1b0>
     f28:	e9 ce       	rjmp	.-558    	; 0xcfc <Disp_Long+0xf4>
display_buf[1] = exponent/10 + '0';
display_buf[0] = exponent%10 + '0';
display_mask = 0b11111000;
break;}

for(int p = 0; p < 8; p++)strobe[p] = 0;}					//synchronise strobe
     f2a:	2c 96       	adiw	r28, 0x0c	; 12
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	08 95       	ret

00000f50 <Display_num>:



/*********************************************************************/
void Display_num(long n){
     f50:	8f 92       	push	r8
     f52:	9f 92       	push	r9
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	6b 01       	movw	r12, r22
     f68:	7c 01       	movw	r14, r24
unsigned char i; long sign;
for(int m = 0; m <= 7; m++){display_buf[m] = '\0';}
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	fc 01       	movw	r30, r24
     f70:	e1 5f       	subi	r30, 0xF1	; 241
     f72:	fd 4f       	sbci	r31, 0xFD	; 253
     f74:	10 82       	st	Z, r1
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	88 30       	cpi	r24, 0x08	; 8
     f7a:	91 05       	cpc	r25, r1
     f7c:	c1 f7       	brne	.-16     	; 0xf6e <Display_num+0x1e>
if ((n <= 99999999) && (n >= -9999999))
     f7e:	d7 01       	movw	r26, r14
     f80:	c6 01       	movw	r24, r12
     f82:	81 58       	subi	r24, 0x81	; 129
     f84:	99 46       	sbci	r25, 0x69	; 105
     f86:	a7 46       	sbci	r26, 0x67	; 103
     f88:	bf 4f       	sbci	r27, 0xFF	; 255
     f8a:	8f 37       	cpi	r24, 0x7F	; 127
     f8c:	97 47       	sbci	r25, 0x77	; 119
     f8e:	ae 48       	sbci	r26, 0x8E	; 142
     f90:	b6 40       	sbci	r27, 0x06	; 6
     f92:	90 f5       	brcc	.+100    	; 0xff8 <Display_num+0xa8>
     f94:	d7 01       	movw	r26, r14
     f96:	c6 01       	movw	r24, r12
     f98:	ff 20       	and	r15, r15
     f9a:	3c f4       	brge	.+14     	; 0xfaa <Display_num+0x5a>
     f9c:	88 27       	eor	r24, r24
     f9e:	99 27       	eor	r25, r25
     fa0:	dc 01       	movw	r26, r24
     fa2:	8c 19       	sub	r24, r12
     fa4:	9d 09       	sbc	r25, r13
     fa6:	ae 09       	sbc	r26, r14
     fa8:	bf 09       	sbc	r27, r15
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	10 e0       	ldi	r17, 0x00	; 0
{
if ((sign = n) < 0) n = -n;
i=0; 
do{
display_buf[i] = n % 10  +  '0';
     fb0:	0f 2e       	mov	r0, r31
     fb2:	fa e0       	ldi	r31, 0x0A	; 10
     fb4:	8f 2e       	mov	r8, r31
     fb6:	91 2c       	mov	r9, r1
     fb8:	a1 2c       	mov	r10, r1
     fba:	b1 2c       	mov	r11, r1
     fbc:	f0 2d       	mov	r31, r0
     fbe:	c1 2f       	mov	r28, r17
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	a5 01       	movw	r20, r10
     fc4:	94 01       	movw	r18, r8
     fc6:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__divmodsi4>
     fca:	60 5d       	subi	r22, 0xD0	; 208
     fcc:	c1 5f       	subi	r28, 0xF1	; 241
     fce:	dd 4f       	sbci	r29, 0xFD	; 253
     fd0:	68 83       	st	Y, r22
i++;
     fd2:	1f 5f       	subi	r17, 0xFF	; 255
}while((n/=10)>0);
     fd4:	62 2f       	mov	r22, r18
     fd6:	73 2f       	mov	r23, r19
     fd8:	84 2f       	mov	r24, r20
     fda:	95 2f       	mov	r25, r21
     fdc:	16 16       	cp	r1, r22
     fde:	17 06       	cpc	r1, r23
     fe0:	18 06       	cpc	r1, r24
     fe2:	19 06       	cpc	r1, r25
     fe4:	64 f3       	brlt	.-40     	; 0xfbe <Display_num+0x6e>
if (sign < 0)display_buf[i] = '-';}
     fe6:	ff 20       	and	r15, r15
     fe8:	94 f4       	brge	.+36     	; 0x100e <Display_num+0xbe>
     fea:	e1 2f       	mov	r30, r17
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	e1 5f       	subi	r30, 0xF1	; 241
     ff0:	fd 4f       	sbci	r31, 0xFD	; 253
     ff2:	8d e2       	ldi	r24, 0x2D	; 45
     ff4:	80 83       	st	Z, r24
     ff6:	0b c0       	rjmp	.+22     	; 0x100e <Display_num+0xbe>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
else 
{for(int m = 0; m <= 7; m++)display_buf[m] = '_';}}
     ffc:	2f e5       	ldi	r18, 0x5F	; 95
     ffe:	fc 01       	movw	r30, r24
    1000:	e1 5f       	subi	r30, 0xF1	; 241
    1002:	fd 4f       	sbci	r31, 0xFD	; 253
    1004:	20 83       	st	Z, r18
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	91 05       	cpc	r25, r1
    100c:	c1 f7       	brne	.-16     	; 0xffe <Display_num+0xae>
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	bf 90       	pop	r11
    101e:	af 90       	pop	r10
    1020:	9f 90       	pop	r9
    1022:	8f 90       	pop	r8
    1024:	08 95       	ret

00001026 <SBtoAL>:
displayNumericString(array);}				//Prints characters in reverse order



/*********************************************************************/
void SBtoAL(char array[], long num, char radix){					//Signed Binary to Askii
    1026:	2f 92       	push	r2
    1028:	3f 92       	push	r3
    102a:	4f 92       	push	r4
    102c:	5f 92       	push	r5
    102e:	6f 92       	push	r6
    1030:	7f 92       	push	r7
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	1c 01       	movw	r2, r24
    104c:	2a 01       	movw	r4, r20
    104e:	3b 01       	movw	r6, r22
int m=0;
long sign;

if (num == 0x80000000){
    1050:	41 15       	cp	r20, r1
    1052:	51 05       	cpc	r21, r1
    1054:	61 05       	cpc	r22, r1
    1056:	70 48       	sbci	r23, 0x80	; 128
    1058:	59 f5       	brne	.+86     	; 0x10b0 <SBtoAL+0x8a>
switch(radix){
    105a:	2a 30       	cpi	r18, 0x0A	; 10
    105c:	19 f0       	breq	.+6      	; 0x1064 <SBtoAL+0x3e>
    105e:	20 31       	cpi	r18, 0x10	; 16
    1060:	b9 f0       	breq	.+46     	; 0x1090 <SBtoAL+0x6a>
    1062:	64 c0       	rjmp	.+200    	; 0x112c <SBtoAL+0x106>
case 10: array[0] = '8';array[1] = '4'; array[2] = '6';		//0x80000000 * -1 = 0
    1064:	98 e3       	ldi	r25, 0x38	; 56
    1066:	f1 01       	movw	r30, r2
    1068:	90 83       	st	Z, r25
    106a:	84 e3       	ldi	r24, 0x34	; 52
    106c:	81 83       	std	Z+1, r24	; 0x01
    106e:	26 e3       	ldi	r18, 0x36	; 54
    1070:	22 83       	std	Z+2, r18	; 0x02
array[3] = '3';array[4] = '8';array[5] = '4'; array[6] = '7';
    1072:	23 e3       	ldi	r18, 0x33	; 51
    1074:	23 83       	std	Z+3, r18	; 0x03
    1076:	94 83       	std	Z+4, r25	; 0x04
    1078:	85 83       	std	Z+5, r24	; 0x05
    107a:	97 e3       	ldi	r25, 0x37	; 55
    107c:	96 83       	std	Z+6, r25	; 0x06
array[7] = '4';array[8] = '1';array[9] = '2';
    107e:	87 83       	std	Z+7, r24	; 0x07
    1080:	81 e3       	ldi	r24, 0x31	; 49
    1082:	80 87       	std	Z+8, r24	; 0x08
    1084:	82 e3       	ldi	r24, 0x32	; 50
    1086:	81 87       	std	Z+9, r24	; 0x09
array[10] = '-'; array[11] = '\0'; break;
    1088:	8d e2       	ldi	r24, 0x2D	; 45
    108a:	82 87       	std	Z+10, r24	; 0x0a
    108c:	13 86       	std	Z+11, r1	; 0x0b
    108e:	4e c0       	rjmp	.+156    	; 0x112c <SBtoAL+0x106>

case 16: array[0] = '0';array[1] = '0'; array[2] = '0';		//0x80000000 * -1 = 0
    1090:	80 e3       	ldi	r24, 0x30	; 48
    1092:	f1 01       	movw	r30, r2
    1094:	80 83       	st	Z, r24
    1096:	81 83       	std	Z+1, r24	; 0x01
    1098:	82 83       	std	Z+2, r24	; 0x02
array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
    109a:	83 83       	std	Z+3, r24	; 0x03
    109c:	84 83       	std	Z+4, r24	; 0x04
    109e:	85 83       	std	Z+5, r24	; 0x05
    10a0:	86 83       	std	Z+6, r24	; 0x06
array[7] = '8';array[8] = '\0';array[9] = '\0';
    10a2:	88 e3       	ldi	r24, 0x38	; 56
    10a4:	87 83       	std	Z+7, r24	; 0x07
    10a6:	10 86       	std	Z+8, r1	; 0x08
    10a8:	11 86       	std	Z+9, r1	; 0x09
array[10] = '\0'; array[11] = '\0'; break; } return;}
    10aa:	12 86       	std	Z+10, r1	; 0x0a
    10ac:	13 86       	std	Z+11, r1	; 0x0b
    10ae:	3e c0       	rjmp	.+124    	; 0x112c <SBtoAL+0x106>
    10b0:	e1 01       	movw	r28, r2
    10b2:	c1 01       	movw	r24, r2
    10b4:	0c 96       	adiw	r24, 0x0c	; 12
/*********************************************************************/
void SBtoAL(char array[], long num, char radix){					//Signed Binary to Askii
int m=0;
long sign;

if (num == 0x80000000){
    10b6:	f1 01       	movw	r30, r2
case 16: array[0] = '0';array[1] = '0'; array[2] = '0';		//0x80000000 * -1 = 0
array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
array[7] = '8';array[8] = '\0';array[9] = '\0';
array[10] = '\0'; array[11] = '\0'; break; } return;}

for (int n = 0; n <=11; n++)array[n] = 0;	
    10b8:	11 92       	st	Z+, r1
    10ba:	e8 17       	cp	r30, r24
    10bc:	f9 07       	cpc	r31, r25
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <SBtoAL+0x92>
    10c0:	73 01       	movw	r14, r6
    10c2:	62 01       	movw	r12, r4
    10c4:	77 20       	and	r7, r7
    10c6:	3c f4       	brge	.+14     	; 0x10d6 <SBtoAL+0xb0>
    10c8:	cc 24       	eor	r12, r12
    10ca:	dd 24       	eor	r13, r13
    10cc:	76 01       	movw	r14, r12
    10ce:	c4 18       	sub	r12, r4
    10d0:	d5 08       	sbc	r13, r5
    10d2:	e6 08       	sbc	r14, r6
    10d4:	f7 08       	sbc	r15, r7
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	10 e0       	ldi	r17, 0x00	; 0
if ((sign = num) < 0) num = num * (-1);

do {array[m] = num % radix;
    10da:	82 2e       	mov	r8, r18
    10dc:	91 2c       	mov	r9, r1
    10de:	a1 2c       	mov	r10, r1
    10e0:	b1 2c       	mov	r11, r1
    10e2:	c7 01       	movw	r24, r14
    10e4:	b6 01       	movw	r22, r12
    10e6:	a5 01       	movw	r20, r10
    10e8:	94 01       	movw	r18, r8
    10ea:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__divmodsi4>
    10ee:	68 83       	st	Y, r22
if(array[m] < 10)array[m] += '0'; else array[m] += '7';
    10f0:	6a 30       	cpi	r22, 0x0A	; 10
    10f2:	18 f4       	brcc	.+6      	; 0x10fa <SBtoAL+0xd4>
    10f4:	60 5d       	subi	r22, 0xD0	; 208
    10f6:	68 83       	st	Y, r22
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <SBtoAL+0xd8>
    10fa:	69 5c       	subi	r22, 0xC9	; 201
    10fc:	68 83       	st	Y, r22
m++;} while ((num = num/radix) > 0);
    10fe:	0f 5f       	subi	r16, 0xFF	; 255
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	c7 01       	movw	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	a5 01       	movw	r20, r10
    1108:	94 01       	movw	r18, r8
    110a:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__divmodsi4>
    110e:	69 01       	movw	r12, r18
    1110:	7a 01       	movw	r14, r20
    1112:	21 96       	adiw	r28, 0x01	; 1
    1114:	12 16       	cp	r1, r18
    1116:	13 06       	cpc	r1, r19
    1118:	14 06       	cpc	r1, r20
    111a:	15 06       	cpc	r1, r21
    111c:	14 f3       	brlt	.-60     	; 0x10e2 <SBtoAL+0xbc>
if (sign < 0) {array[m] = '-';m++;}}
    111e:	77 20       	and	r7, r7
    1120:	2c f4       	brge	.+10     	; 0x112c <SBtoAL+0x106>
    1122:	f1 01       	movw	r30, r2
    1124:	e0 0f       	add	r30, r16
    1126:	f1 1f       	adc	r31, r17
    1128:	8d e2       	ldi	r24, 0x2D	; 45
    112a:	80 83       	st	Z, r24
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	7f 90       	pop	r7
    1146:	6f 90       	pop	r6
    1148:	5f 90       	pop	r5
    114a:	4f 90       	pop	r4
    114c:	3f 90       	pop	r3
    114e:	2f 90       	pop	r2
    1150:	08 95       	ret

00001152 <displayNumericString>:



/*********************************************************************/
void displayNumericString(char* s){					
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
int n=0;
while (s[n] != '\0')n++;							//scroll to end of string counting the number of characters
    1158:	88 81       	ld	r24, Y
    115a:	88 23       	and	r24, r24
    115c:	c9 f0       	breq	.+50     	; 0x1190 <displayNumericString+0x3e>
    115e:	de 01       	movw	r26, r28
    1160:	11 96       	adiw	r26, 0x01	; 1
    1162:	e0 e0       	ldi	r30, 0x00	; 0
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	9d 91       	ld	r25, X+
    116a:	91 11       	cpse	r25, r1
    116c:	fc cf       	rjmp	.-8      	; 0x1166 <displayNumericString+0x14>
for(int m = n; m; m--)display_buf[7+m-n] = (*(s + m-1));}		//print last character first
    116e:	30 97       	sbiw	r30, 0x00	; 0
    1170:	79 f0       	breq	.+30     	; 0x1190 <displayNumericString+0x3e>
    1172:	ec 0f       	add	r30, r28
    1174:	fd 1f       	adc	r31, r29
    1176:	ae 01       	movw	r20, r28
    1178:	27 e0       	ldi	r18, 0x07	; 7
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	92 91       	ld	r25, -Z
    117e:	d9 01       	movw	r26, r18
    1180:	a1 5f       	subi	r26, 0xF1	; 241
    1182:	bd 4f       	sbci	r27, 0xFD	; 253
    1184:	9c 93       	st	X, r25
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	31 09       	sbc	r19, r1
    118a:	4e 17       	cp	r20, r30
    118c:	5f 07       	cpc	r21, r31
    118e:	b1 f7       	brne	.-20     	; 0x117c <displayNumericString+0x2a>
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <displayLongNum>:
displayDecimal(10, RHSDP, 5);}



/*********************************************************************/
void displayLongNum(char radix, long long_num){
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	2c 97       	sbiw	r28, 0x0c	; 12
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
char array[12];							//Long has 10 chars + sign + null terminator	
SBtoAL(array, long_num, radix);			//calls the Binary to askii subroutine
    11aa:	28 2f       	mov	r18, r24
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 13 08 	call	0x1026	; 0x1026 <SBtoAL>
displayNumericString(array);}				//Prints characters in reverse order
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 a9 08 	call	0x1152	; 0x1152 <displayNumericString>
    11bc:	2c 96       	adiw	r28, 0x0c	; 12
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <displayDecimal>:
for(int m = n; m; m--)display_buf[7+m-n] = (*(s + m-1));}		//print last character first



/*********************************************************************/
void displayDecimal(char radix, unsigned long Hex, int No_dps){ char print_out_string[12];
    11ce:	4f 92       	push	r4
    11d0:	5f 92       	push	r5
    11d2:	6f 92       	push	r6
    11d4:	7f 92       	push	r7
    11d6:	8f 92       	push	r8
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2c 97       	sbiw	r28, 0x0c	; 12
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
unsigned long inc;
Hex += 1000000000;				//define location decimal point
    11fa:	2a 01       	movw	r4, r20
    11fc:	3b 01       	movw	r6, r22
    11fe:	96 e3       	ldi	r25, 0x36	; 54
    1200:	59 1a       	sub	r5, r25
    1202:	95 e6       	ldi	r25, 0x65	; 101
    1204:	69 0a       	sbc	r6, r25
    1206:	94 ec       	ldi	r25, 0xC4	; 196
    1208:	79 0a       	sbc	r7, r25
inc = 1;
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
    120a:	e8 e0       	ldi	r30, 0x08	; 8
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	7f 01       	movw	r14, r30
    1210:	e2 1a       	sub	r14, r18
    1212:	f3 0a       	sbc	r15, r19
    1214:	1e 14       	cp	r1, r14
    1216:	1f 04       	cpc	r1, r15
    1218:	f4 f4       	brge	.+60     	; 0x1256 <displayDecimal+0x88>
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	01 e0       	ldi	r16, 0x01	; 1
    1220:	10 e0       	ldi	r17, 0x00	; 0
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	00 0f       	add	r16, r16
    1228:	11 1f       	adc	r17, r17
    122a:	22 1f       	adc	r18, r18
    122c:	33 1f       	adc	r19, r19
    122e:	48 01       	movw	r8, r16
    1230:	59 01       	movw	r10, r18
    1232:	88 0c       	add	r8, r8
    1234:	99 1c       	adc	r9, r9
    1236:	aa 1c       	adc	r10, r10
    1238:	bb 1c       	adc	r11, r11
    123a:	88 0c       	add	r8, r8
    123c:	99 1c       	adc	r9, r9
    123e:	aa 1c       	adc	r10, r10
    1240:	bb 1c       	adc	r11, r11
    1242:	08 0d       	add	r16, r8
    1244:	19 1d       	adc	r17, r9
    1246:	2a 1d       	adc	r18, r10
    1248:	3b 1d       	adc	r19, r11
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	6e 15       	cp	r22, r14
    1250:	7f 05       	cpc	r23, r15
    1252:	49 f7       	brne	.-46     	; 0x1226 <displayDecimal+0x58>
    1254:	31 c0       	rjmp	.+98     	; 0x12b8 <displayDecimal+0xea>
inc = inc*5;
Hex += inc;
SBtoAL(print_out_string, Hex, radix);
    1256:	4b 5f       	subi	r20, 0xFB	; 251
    1258:	55 43       	sbci	r21, 0x35	; 53
    125a:	65 46       	sbci	r22, 0x65	; 101
    125c:	74 4c       	sbci	r23, 0xC4	; 196
    125e:	28 2f       	mov	r18, r24
    1260:	ce 01       	movw	r24, r28
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	0e 94 13 08 	call	0x1026	; 0x1026 <SBtoAL>
for(int k = 0; k <= (8-No_dps); k++)print_out_string[k] = ' ';
    1268:	ff 20       	and	r15, r15
    126a:	54 f0       	brlt	.+20     	; 0x1280 <displayDecimal+0xb2>
    126c:	fe 01       	movw	r30, r28
    126e:	31 96       	adiw	r30, 0x01	; 1
/*********************************************************************/
void displayDecimal(char radix, unsigned long Hex, int No_dps){ char print_out_string[12];
unsigned long inc;
Hex += 1000000000;				//define location decimal point
inc = 1;
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
inc = inc*5;
Hex += inc;
SBtoAL(print_out_string, Hex, radix);
for(int k = 0; k <= (8-No_dps); k++)print_out_string[k] = ' ';
    1274:	20 e2       	ldi	r18, 0x20	; 32
    1276:	21 93       	st	Z+, r18
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	e8 16       	cp	r14, r24
    127c:	f9 06       	cpc	r15, r25
    127e:	dc f7       	brge	.-10     	; 0x1276 <displayDecimal+0xa8>
print_out_string[9] = '.'; 
    1280:	8e e2       	ldi	r24, 0x2E	; 46
    1282:	8a 87       	std	Y+10, r24	; 0x0a

{int m=8, n=0; while(display_buf[m-1]) m--; while(m) {display_buf[m-1] = print_out_string[9-n];m--, n++;}}} 
    1284:	88 e0       	ldi	r24, 0x08	; 8
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	01 c0       	rjmp	.+2      	; 0x128c <displayDecimal+0xbe>
    128a:	c9 01       	movw	r24, r18
    128c:	9c 01       	movw	r18, r24
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	31 09       	sbc	r19, r1
    1292:	f9 01       	movw	r30, r18
    1294:	e1 5f       	subi	r30, 0xF1	; 241
    1296:	fd 4f       	sbci	r31, 0xFD	; 253
    1298:	40 81       	ld	r20, Z
    129a:	41 11       	cpse	r20, r1
    129c:	f6 cf       	rjmp	.-20     	; 0x128a <displayDecimal+0xbc>
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	29 f1       	breq	.+74     	; 0x12ec <displayDecimal+0x11e>
    12a2:	fe 01       	movw	r30, r28
    12a4:	3b 96       	adiw	r30, 0x0b	; 11
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	22 91       	ld	r18, -Z
    12aa:	dc 01       	movw	r26, r24
    12ac:	a1 5f       	subi	r26, 0xF1	; 241
    12ae:	bd 4f       	sbci	r27, 0xFD	; 253
    12b0:	2c 93       	st	X, r18
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	c1 f7       	brne	.-16     	; 0x12a6 <displayDecimal+0xd8>
    12b6:	1a c0       	rjmp	.+52     	; 0x12ec <displayDecimal+0x11e>
Hex += 1000000000;				//define location decimal point
inc = 1;
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
inc = inc*5;
Hex += inc;
SBtoAL(print_out_string, Hex, radix);
    12b8:	b9 01       	movw	r22, r18
    12ba:	a8 01       	movw	r20, r16
    12bc:	44 0f       	add	r20, r20
    12be:	55 1f       	adc	r21, r21
    12c0:	66 1f       	adc	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	44 0f       	add	r20, r20
    12c6:	55 1f       	adc	r21, r21
    12c8:	66 1f       	adc	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	04 0f       	add	r16, r20
    12ce:	15 1f       	adc	r17, r21
    12d0:	26 1f       	adc	r18, r22
    12d2:	37 1f       	adc	r19, r23
    12d4:	b9 01       	movw	r22, r18
    12d6:	a8 01       	movw	r20, r16
    12d8:	44 0d       	add	r20, r4
    12da:	55 1d       	adc	r21, r5
    12dc:	66 1d       	adc	r22, r6
    12de:	77 1d       	adc	r23, r7
    12e0:	28 2f       	mov	r18, r24
    12e2:	ce 01       	movw	r24, r28
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	0e 94 13 08 	call	0x1026	; 0x1026 <SBtoAL>
    12ea:	c0 cf       	rjmp	.-128    	; 0x126c <displayDecimal+0x9e>
for(int k = 0; k <= (8-No_dps); k++)print_out_string[k] = ' ';
print_out_string[9] = '.'; 

{int m=8, n=0; while(display_buf[m-1]) m--; while(m) {display_buf[m-1] = print_out_string[9-n];m--, n++;}}} 
    12ec:	2c 96       	adiw	r28, 0x0c	; 12
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	9f 90       	pop	r9
    130a:	8f 90       	pop	r8
    130c:	7f 90       	pop	r7
    130e:	6f 90       	pop	r6
    1310:	5f 90       	pop	r5
    1312:	4f 90       	pop	r4
    1314:	08 95       	ret

00001316 <decimalOverflow>:
display_char_skip_counter = 0;}



/*********************************************************************/
char decimalOverflow(char radix, unsigned long Hex, int No_dps){
    1316:	8f 92       	push	r8
    1318:	9f 92       	push	r9
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
long inc=1;

Hex += 1000000000;				//define location decimal point
    1326:	4a 01       	movw	r8, r20
    1328:	5b 01       	movw	r10, r22
    132a:	86 e3       	ldi	r24, 0x36	; 54
    132c:	98 1a       	sub	r9, r24
    132e:	85 e6       	ldi	r24, 0x65	; 101
    1330:	a8 0a       	sbc	r10, r24
    1332:	84 ec       	ldi	r24, 0xC4	; 196
    1334:	b8 0a       	sbc	r11, r24
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
    1336:	68 e0       	ldi	r22, 0x08	; 8
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	62 1b       	sub	r22, r18
    133c:	73 0b       	sbc	r23, r19
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	f4 f4       	brge	.+60     	; 0x1380 <decimalOverflow+0x6a>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	aa 1f       	adc	r26, r26
    1356:	bb 1f       	adc	r27, r27
    1358:	6c 01       	movw	r12, r24
    135a:	7d 01       	movw	r14, r26
    135c:	cc 0c       	add	r12, r12
    135e:	dd 1c       	adc	r13, r13
    1360:	ee 1c       	adc	r14, r14
    1362:	ff 1c       	adc	r15, r15
    1364:	cc 0c       	add	r12, r12
    1366:	dd 1c       	adc	r13, r13
    1368:	ee 1c       	adc	r14, r14
    136a:	ff 1c       	adc	r15, r15
    136c:	8c 0d       	add	r24, r12
    136e:	9d 1d       	adc	r25, r13
    1370:	ae 1d       	adc	r26, r14
    1372:	bf 1d       	adc	r27, r15
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	26 17       	cp	r18, r22
    137a:	37 07       	cpc	r19, r23
    137c:	49 f7       	brne	.-46     	; 0x1350 <decimalOverflow+0x3a>
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <decimalOverflow+0x72>



/*********************************************************************/
char decimalOverflow(char radix, unsigned long Hex, int No_dps){
long inc=1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ac 01       	movw	r20, r24
    138a:	bd 01       	movw	r22, r26
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	44 0f       	add	r20, r20
    1396:	55 1f       	adc	r21, r21
    1398:	66 1f       	adc	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	84 0f       	add	r24, r20
    139e:	95 1f       	adc	r25, r21
    13a0:	a6 1f       	adc	r26, r22
    13a2:	b7 1f       	adc	r27, r23
    13a4:	88 0d       	add	r24, r8
    13a6:	99 1d       	adc	r25, r9
    13a8:	aa 1d       	adc	r26, r10
    13aa:	bb 1d       	adc	r27, r11
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	81 15       	cp	r24, r1
    13b0:	94 49       	sbci	r25, 0x94	; 148
    13b2:	a5 43       	sbci	r26, 0x35	; 53
    13b4:	b7 47       	sbci	r27, 0x77	; 119
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <decimalOverflow+0xa4>
    13b8:	20 e0       	ldi	r18, 0x00	; 0

Hex += 1000000000;				//define location decimal point
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
inc = inc*5;
Hex += inc;
if(Hex >= 2000000000)return 0; else return 1;}
    13ba:	82 2f       	mov	r24, r18
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	bf 90       	pop	r11
    13c6:	af 90       	pop	r10
    13c8:	9f 90       	pop	r9
    13ca:	8f 90       	pop	r8
    13cc:	08 95       	ret

000013ce <display_float>:



/*********************************************************************/
void display_float(char Sc_Num_string[])
{char display_mode;
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ac 01       	movw	r20, r24

Initialise_I2C_master_read;
    13d4:	ec eb       	ldi	r30, 0xBC	; 188
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	84 ea       	ldi	r24, 0xA4	; 164
    13da:	cb eb       	ldi	r28, 0xBB	; 187
    13dc:	d0 e0       	ldi	r29, 0x00	; 0
    13de:	33 e0       	ldi	r19, 0x03	; 3
    13e0:	24 e8       	ldi	r18, 0x84	; 132
    13e2:	a9 eb       	ldi	r26, 0xB9	; 185
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	80 83       	st	Z, r24
    13e8:	90 81       	ld	r25, Z
    13ea:	99 23       	and	r25, r25
    13ec:	ec f7       	brge	.-6      	; 0x13e8 <display_float+0x1a>
    13ee:	38 83       	st	Y, r19
    13f0:	20 83       	st	Z, r18
    13f2:	90 81       	ld	r25, Z
    13f4:	99 23       	and	r25, r25
    13f6:	ec f7       	brge	.-6      	; 0x13f2 <display_float+0x24>
    13f8:	9c 91       	ld	r25, X
    13fa:	90 34       	cpi	r25, 0x40	; 64
    13fc:	a1 f7       	brne	.-24     	; 0x13e6 <display_float+0x18>
TWCR = (1 << TWINT) | (1 << TWEN);				// Acquire single char: display mode
    13fe:	84 e8       	ldi	r24, 0x84	; 132
    1400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
while (!(TWCR & (1 << TWINT)));
    1404:	ec eb       	ldi	r30, 0xBC	; 188
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	90 81       	ld	r25, Z
    140a:	99 23       	and	r25, r25
    140c:	ec f7       	brge	.-6      	; 0x1408 <display_float+0x3a>
display_mode = TWDR;
    140e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
TWCR =  (1 << TWINT) | (1 << TWEN);
    1412:	94 e8       	ldi	r25, 0x84	; 132
    1414:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

switch (display_mode){
    1418:	80 33       	cpi	r24, 0x30	; 48
    141a:	21 f0       	breq	.+8      	; 0x1424 <display_float+0x56>
    141c:	82 33       	cpi	r24, 0x32	; 50
    141e:	09 f4       	brne	.+2      	; 0x1422 <display_float+0x54>
    1420:	44 c0       	rjmp	.+136    	; 0x14aa <display_float+0xdc>
    1422:	50 c0       	rjmp	.+160    	; 0x14c4 <display_float+0xf6>
    1424:	28 e0       	ldi	r18, 0x08	; 8
    1426:	30 e0       	ldi	r19, 0x00	; 0
case  '0':
for(int p = 8; p; p--)display_buf[p] = display_buf[p-1];
    1428:	c9 01       	movw	r24, r18
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	fc 01       	movw	r30, r24
    142e:	e1 5f       	subi	r30, 0xF1	; 241
    1430:	fd 4f       	sbci	r31, 0xFD	; 253
    1432:	60 81       	ld	r22, Z
    1434:	f9 01       	movw	r30, r18
    1436:	e1 5f       	subi	r30, 0xF1	; 241
    1438:	fd 4f       	sbci	r31, 0xFD	; 253
    143a:	60 83       	st	Z, r22
    143c:	9c 01       	movw	r18, r24
    143e:	89 2b       	or	r24, r25
    1440:	99 f7       	brne	.-26     	; 0x1428 <display_float+0x5a>

if(Sc_Num_string_length-Sc_Num_string_pointer)
    1442:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <Sc_Num_string_length>
    1446:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <Sc_Num_string_length+0x1>
    144a:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <Sc_Num_string_pointer>
    144e:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <Sc_Num_string_pointer+0x1>
    1452:	82 17       	cp	r24, r18
    1454:	93 07       	cpc	r25, r19
    1456:	81 f0       	breq	.+32     	; 0x1478 <display_float+0xaa>
{display_buf[0] = Sc_Num_string[Sc_Num_string_length-Sc_Num_string_pointer-1];
    1458:	82 1b       	sub	r24, r18
    145a:	93 0b       	sbc	r25, r19
    145c:	48 0f       	add	r20, r24
    145e:	59 1f       	adc	r21, r25
    1460:	fa 01       	movw	r30, r20
    1462:	31 97       	sbiw	r30, 0x01	; 1
    1464:	80 81       	ld	r24, Z
    1466:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <display_buf>
Sc_Num_string_pointer++; }
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	30 93 9d 02 	sts	0x029D, r19	; 0x80029d <Sc_Num_string_pointer+0x1>
    1472:	20 93 9c 02 	sts	0x029C, r18	; 0x80029c <Sc_Num_string_pointer>
    1476:	26 c0       	rjmp	.+76     	; 0x14c4 <display_float+0xf6>

else
{if (display_char_skip_counter <=2){display_buf[0] = 'a'; display_char_skip_counter++;} 
    1478:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <display_char_skip_counter>
    147c:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <display_char_skip_counter+0x1>
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	4c f4       	brge	.+18     	; 0x1498 <display_float+0xca>
    1486:	21 e6       	ldi	r18, 0x61	; 97
    1488:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <display_buf>
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <display_char_skip_counter+0x1>
    1492:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <display_char_skip_counter>
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <display_float+0xf6>
else{display_char_skip_counter = 0;Sc_Num_string_pointer=0; }}
    1498:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <display_char_skip_counter+0x1>
    149c:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <display_char_skip_counter>
    14a0:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <Sc_Num_string_pointer+0x1>
    14a4:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <Sc_Num_string_pointer>
    14a8:	0d c0       	rjmp	.+26     	; 0x14c4 <display_float+0xf6>

break;
case '1': break;
case '2': mode = 0; 
    14aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
timer_2_counter=0;				//Initialsise timer_2_counter to zero
    14ae:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <timer_2_counter>
TCNT2 = 0;						//Reset counter register
    14b2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
TCCR2B = 0;						//Stop the clock
    14b6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
TIMSK2 &= (~(1 << TOIE2));
    14ba:	e0 e7       	ldi	r30, 0x70	; 112
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8e 7f       	andi	r24, 0xFE	; 254
    14c2:	80 83       	st	Z, r24
break;}}
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <string_to_slave_I2C>:

void string_to_slave_I2C(char strg_ptr[]){
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	8c 01       	movw	r16, r24
int String_length;
String_length = 0; while (strg_ptr[String_length])String_length++;
    14d4:	fc 01       	movw	r30, r24
    14d6:	80 81       	ld	r24, Z
    14d8:	88 23       	and	r24, r24
    14da:	49 f0       	breq	.+18     	; 0x14ee <string_to_slave_I2C+0x24>
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	81 91       	ld	r24, Z+
    14e8:	81 11       	cpse	r24, r1
    14ea:	fb cf       	rjmp	.-10     	; 0x14e2 <string_to_slave_I2C+0x18>
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <string_to_slave_I2C+0x28>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
	while(1){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14f2:	ec eb       	ldi	r30, 0xBC	; 188
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	54 ea       	ldi	r21, 0xA4	; 164
	while (!(TWCR & (1 << TWINT)));
	TWDR = 0x02;
    14f8:	cb eb       	ldi	r28, 0xBB	; 187
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
    14fc:	42 e0       	ldi	r20, 0x02	; 2
	TWCR = (1 << TWINT) | (1 << TWEN); 
    14fe:	94 e8       	ldi	r25, 0x84	; 132
	while (!(TWCR & (1 << TWINT)));
	if (TWSR == 0x18)break;	}
    1500:	a9 eb       	ldi	r26, 0xB9	; 185
    1502:	b0 e0       	ldi	r27, 0x00	; 0

void string_to_slave_I2C(char strg_ptr[]){
int String_length;
String_length = 0; while (strg_ptr[String_length])String_length++;
	while(1){
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1504:	50 83       	st	Z, r21
	while (!(TWCR & (1 << TWINT)));
    1506:	80 81       	ld	r24, Z
    1508:	88 23       	and	r24, r24
    150a:	ec f7       	brge	.-6      	; 0x1506 <string_to_slave_I2C+0x3c>
	TWDR = 0x02;
    150c:	48 83       	st	Y, r20
	TWCR = (1 << TWINT) | (1 << TWEN); 
    150e:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT)));
    1510:	80 81       	ld	r24, Z
    1512:	88 23       	and	r24, r24
    1514:	ec f7       	brge	.-6      	; 0x1510 <string_to_slave_I2C+0x46>
	if (TWSR == 0x18)break;	}
    1516:	8c 91       	ld	r24, X
    1518:	88 31       	cpi	r24, 0x18	; 24
    151a:	a1 f7       	brne	.-24     	; 0x1504 <string_to_slave_I2C+0x3a>
	TWDR = (String_length/10)+'0';
    151c:	c9 01       	movw	r24, r18
    151e:	6a e0       	ldi	r22, 0x0A	; 10
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    1526:	60 5d       	subi	r22, 0xD0	; 208
    1528:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
    152c:	84 e8       	ldi	r24, 0x84	; 132
    152e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)));
    1532:	ec eb       	ldi	r30, 0xBC	; 188
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 23       	and	r24, r24
    153a:	ec f7       	brge	.-6      	; 0x1536 <string_to_slave_I2C+0x6c>
	TWDR = (String_length%10)+'0';
    153c:	c9 01       	movw	r24, r18
    153e:	6a e0       	ldi	r22, 0x0A	; 10
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    1546:	80 5d       	subi	r24, 0xD0	; 208
    1548:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
    154c:	84 e8       	ldi	r24, 0x84	; 132
    154e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)));
    1552:	ec eb       	ldi	r30, 0xBC	; 188
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	88 23       	and	r24, r24
    155a:	ec f7       	brge	.-6      	; 0x1556 <string_to_slave_I2C+0x8c>
	for(int m = 0; m<=(String_length - 1); m++)
    155c:	c9 01       	movw	r24, r18
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	8a f0       	brmi	.+34     	; 0x1584 <string_to_slave_I2C+0xba>
    1562:	d8 01       	movw	r26, r16
    1564:	20 0f       	add	r18, r16
    1566:	31 1f       	adc	r19, r17
	{TWDR = strg_ptr[m];
    1568:	cb eb       	ldi	r28, 0xBB	; 187
    156a:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR = (1 << TWINT) | (1 << TWEN);
    156c:	ec eb       	ldi	r30, 0xBC	; 188
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	44 e8       	ldi	r20, 0x84	; 132
	while (!(TWCR & (1 << TWINT)));
	TWDR = (String_length%10)+'0';
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
	for(int m = 0; m<=(String_length - 1); m++)
	{TWDR = strg_ptr[m];
    1572:	8d 91       	ld	r24, X+
    1574:	88 83       	st	Y, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
    1576:	40 83       	st	Z, r20
	while (!(TWCR & (1 << TWINT)));}
    1578:	90 81       	ld	r25, Z
    157a:	99 23       	and	r25, r25
    157c:	ec f7       	brge	.-6      	; 0x1578 <string_to_slave_I2C+0xae>
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
	TWDR = (String_length%10)+'0';
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));
	for(int m = 0; m<=(String_length - 1); m++)
    157e:	2a 17       	cp	r18, r26
    1580:	3b 07       	cpc	r19, r27
    1582:	b9 f7       	brne	.-18     	; 0x1572 <string_to_slave_I2C+0xa8>
	{TWDR = strg_ptr[m];
	TWCR = (1 << TWINT) | (1 << TWEN);
	while (!(TWCR & (1 << TWINT)));}
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}
    1584:	84 e9       	ldi	r24, 0x94	; 148
    1586:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <Fraction_to_Binary_D>:
long Binary_points_to_Decimal_Signed (long);



/**************************************************************************************************/
void Fraction_to_Binary_D(unsigned long rem,unsigned long Den, unsigned int* Res_LB,unsigned int*  Res_HB){		//Positive fraction: Askii to Binary
    1594:	4f 92       	push	r4
    1596:	5f 92       	push	r5
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	49 01       	movw	r8, r18
    15b6:	5a 01       	movw	r10, r20
(*Res_LB) = 0; (*Res_HB) = 0;
    15b8:	f8 01       	movw	r30, r16
    15ba:	11 82       	std	Z+1, r1	; 0x01
    15bc:	10 82       	st	Z, r1
    15be:	f7 01       	movw	r30, r14
    15c0:	11 82       	std	Z+1, r1	; 0x01
    15c2:	10 82       	st	Z, r1
    15c4:	cf e0       	ldi	r28, 0x0F	; 15
    15c6:	d0 e0       	ldi	r29, 0x00	; 0
for(int n = 0; n <= 15; n++){
if ((2*(rem))/Den) {(*Res_HB) |= (1 << (15-n));}	
    15c8:	cc 24       	eor	r12, r12
    15ca:	c3 94       	inc	r12
    15cc:	d1 2c       	mov	r13, r1
    15ce:	2b 01       	movw	r4, r22
    15d0:	3c 01       	movw	r6, r24
    15d2:	44 0c       	add	r4, r4
    15d4:	55 1c       	adc	r5, r5
    15d6:	66 1c       	adc	r6, r6
    15d8:	77 1c       	adc	r7, r7
    15da:	c3 01       	movw	r24, r6
    15dc:	b2 01       	movw	r22, r4
    15de:	a5 01       	movw	r20, r10
    15e0:	94 01       	movw	r18, r8
    15e2:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    15e6:	23 2b       	or	r18, r19
    15e8:	24 2b       	or	r18, r20
    15ea:	25 2b       	or	r18, r21
    15ec:	79 f0       	breq	.+30     	; 0x160c <Fraction_to_Binary_D+0x78>
    15ee:	f7 01       	movw	r30, r14
    15f0:	20 81       	ld	r18, Z
    15f2:	31 81       	ldd	r19, Z+1	; 0x01
    15f4:	c6 01       	movw	r24, r12
    15f6:	0c 2e       	mov	r0, r28
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <Fraction_to_Binary_D+0x6a>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <Fraction_to_Binary_D+0x66>
    1602:	82 2b       	or	r24, r18
    1604:	93 2b       	or	r25, r19
    1606:	f7 01       	movw	r30, r14
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
(rem) = (2*(rem))%Den;}
    160c:	c3 01       	movw	r24, r6
    160e:	b2 01       	movw	r22, r4
    1610:	a5 01       	movw	r20, r10
    1612:	94 01       	movw	r18, r8
    1614:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    1618:	21 97       	sbiw	r28, 0x01	; 1
    161a:	c8 f6       	brcc	.-78     	; 0x15ce <Fraction_to_Binary_D+0x3a>
    161c:	cf e0       	ldi	r28, 0x0F	; 15
    161e:	d0 e0       	ldi	r29, 0x00	; 0
for(int n = 0; n <= 15; n++){
if ((2*(rem))/Den) {(*Res_LB) |= (1 << (15-n));} 	
    1620:	ee 24       	eor	r14, r14
    1622:	e3 94       	inc	r14
    1624:	f1 2c       	mov	r15, r1
    1626:	2b 01       	movw	r4, r22
    1628:	3c 01       	movw	r6, r24
    162a:	44 0c       	add	r4, r4
    162c:	55 1c       	adc	r5, r5
    162e:	66 1c       	adc	r6, r6
    1630:	77 1c       	adc	r7, r7
    1632:	c3 01       	movw	r24, r6
    1634:	b2 01       	movw	r22, r4
    1636:	a5 01       	movw	r20, r10
    1638:	94 01       	movw	r18, r8
    163a:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    163e:	23 2b       	or	r18, r19
    1640:	24 2b       	or	r18, r20
    1642:	25 2b       	or	r18, r21
    1644:	79 f0       	breq	.+30     	; 0x1664 <Fraction_to_Binary_D+0xd0>
    1646:	f8 01       	movw	r30, r16
    1648:	20 81       	ld	r18, Z
    164a:	31 81       	ldd	r19, Z+1	; 0x01
    164c:	c7 01       	movw	r24, r14
    164e:	0c 2e       	mov	r0, r28
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <Fraction_to_Binary_D+0xc2>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <Fraction_to_Binary_D+0xbe>
    165a:	82 2b       	or	r24, r18
    165c:	93 2b       	or	r25, r19
    165e:	f8 01       	movw	r30, r16
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
(rem) = (2*(rem))%Den;}}
    1664:	c3 01       	movw	r24, r6
    1666:	b2 01       	movw	r22, r4
    1668:	a5 01       	movw	r20, r10
    166a:	94 01       	movw	r18, r8
    166c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    1670:	21 97       	sbiw	r28, 0x01	; 1
    1672:	c8 f6       	brcc	.-78     	; 0x1626 <Fraction_to_Binary_D+0x92>
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	08 95       	ret

00001696 <Binary_points_to_Decimal_L>:



/**************************************************************************************************/
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
    1696:	2f 92       	push	r2
    1698:	3f 92       	push	r3
    169a:	4f 92       	push	r4
    169c:	5f 92       	push	r5
    169e:	6f 92       	push	r6
    16a0:	7f 92       	push	r7
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	2e 97       	sbiw	r28, 0x0e	; 14
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	30 e0       	ldi	r19, 0x00	; 0
RHSofDP = 0;
    16ce:	41 2c       	mov	r4, r1
    16d0:	51 2c       	mov	r5, r1
    16d2:	32 01       	movw	r6, r4
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
    16d4:	8b 01       	movw	r16, r22
    16d6:	02 70       	andi	r16, 0x02	; 2
    16d8:	11 27       	eor	r17, r17
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
    16da:	ab 01       	movw	r20, r22
    16dc:	44 70       	andi	r20, 0x04	; 4
    16de:	55 27       	eor	r21, r21
    16e0:	5e 87       	std	Y+14, r21	; 0x0e
    16e2:	4d 87       	std	Y+13, r20	; 0x0d
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
    16e4:	db 01       	movw	r26, r22
    16e6:	a8 70       	andi	r26, 0x08	; 8
    16e8:	bb 27       	eor	r27, r27
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
    16ea:	ab 01       	movw	r20, r22
    16ec:	40 71       	andi	r20, 0x10	; 16
    16ee:	55 27       	eor	r21, r21
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
    16f0:	7b 01       	movw	r14, r22
    16f2:	e0 e2       	ldi	r30, 0x20	; 32
    16f4:	ee 22       	and	r14, r30
    16f6:	ff 24       	eor	r15, r15
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
    16f8:	6b 01       	movw	r12, r22
    16fa:	f0 e4       	ldi	r31, 0x40	; 64
    16fc:	cf 22       	and	r12, r31
    16fe:	dd 24       	eor	r13, r13
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
    1700:	5b 01       	movw	r10, r22
    1702:	e0 e8       	ldi	r30, 0x80	; 128
    1704:	ae 22       	and	r10, r30
    1706:	bb 24       	eor	r11, r11
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
    1708:	4b 01       	movw	r8, r22
    170a:	88 24       	eor	r8, r8
    170c:	f1 e0       	ldi	r31, 0x01	; 1
    170e:	9f 22       	and	r9, r31
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
    1710:	fb 01       	movw	r30, r22
    1712:	ee 27       	eor	r30, r30
    1714:	f2 70       	andi	r31, 0x02	; 2
    1716:	fa 83       	std	Y+2, r31	; 0x02
    1718:	e9 83       	std	Y+1, r30	; 0x01
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
    171a:	fb 01       	movw	r30, r22
    171c:	ee 27       	eor	r30, r30
    171e:	f4 70       	andi	r31, 0x04	; 4
    1720:	fc 83       	std	Y+4, r31	; 0x04
    1722:	eb 83       	std	Y+3, r30	; 0x03
for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
    1724:	fb 01       	movw	r30, r22
    1726:	ee 27       	eor	r30, r30
    1728:	f8 70       	andi	r31, 0x08	; 8
    172a:	fe 83       	std	Y+6, r31	; 0x06
    172c:	ed 83       	std	Y+5, r30	; 0x05
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
    172e:	fb 01       	movw	r30, r22
    1730:	ee 27       	eor	r30, r30
    1732:	f0 71       	andi	r31, 0x10	; 16
    1734:	f8 87       	std	Y+8, r31	; 0x08
    1736:	ef 83       	std	Y+7, r30	; 0x07
{unsigned long  RHSofDP;
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
    1738:	fb 01       	movw	r30, r22
    173a:	ee 27       	eor	r30, r30
    173c:	f0 72       	andi	r31, 0x20	; 32
    173e:	fa 87       	std	Y+10, r31	; 0x0a
    1740:	e9 87       	std	Y+9, r30	; 0x09
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
    1742:	fb 01       	movw	r30, r22
    1744:	ee 27       	eor	r30, r30
    1746:	f0 74       	andi	r31, 0x40	; 64
    1748:	fc 87       	std	Y+12, r31	; 0x0c
    174a:	eb 87       	std	Y+11, r30	; 0x0b
/**************************************************************************************************/
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
    174c:	1b 01       	movw	r2, r22
    174e:	22 24       	eor	r2, r2
    1750:	f0 e8       	ldi	r31, 0x80	; 128
    1752:	3f 22       	and	r3, r31
    1754:	02 c0       	rjmp	.+4      	; 0x175a <Binary_points_to_Decimal_L+0xc4>
    1756:	2f 5f       	subi	r18, 0xFF	; 255
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	f9 01       	movw	r30, r18
    175c:	31 97       	sbiw	r30, 0x01	; 1

/**************************************************************************************************/
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
    175e:	e0 31       	cpi	r30, 0x10	; 16
    1760:	f1 05       	cpc	r31, r1
    1762:	08 f0       	brcs	.+2      	; 0x1766 <Binary_points_to_Decimal_L+0xd0>
    1764:	c4 c0       	rjmp	.+392    	; 0x18ee <Binary_points_to_Decimal_L+0x258>
    1766:	eb 52       	subi	r30, 0x2B	; 43
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 0: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 500000000; break;
    176e:	21 14       	cp	r2, r1
    1770:	31 04       	cpc	r3, r1
    1772:	89 f3       	breq	.-30     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1774:	fb e9       	ldi	r31, 0x9B	; 155
    1776:	5f 1a       	sub	r5, r31
    1778:	f2 e3       	ldi	r31, 0x32	; 50
    177a:	6f 0a       	sbc	r6, r31
    177c:	f2 ee       	ldi	r31, 0xE2	; 226
    177e:	7f 0a       	sbc	r7, r31
    1780:	ea cf       	rjmp	.-44     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 1: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 250000000; break;
    1782:	eb 85       	ldd	r30, Y+11	; 0x0b
    1784:	fc 85       	ldd	r31, Y+12	; 0x0c
    1786:	ef 2b       	or	r30, r31
    1788:	31 f3       	breq	.-52     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    178a:	f0 e8       	ldi	r31, 0x80	; 128
    178c:	4f 1a       	sub	r4, r31
    178e:	fd e4       	ldi	r31, 0x4D	; 77
    1790:	5f 0a       	sbc	r5, r31
    1792:	f9 e1       	ldi	r31, 0x19	; 25
    1794:	6f 0a       	sbc	r6, r31
    1796:	f1 ef       	ldi	r31, 0xF1	; 241
    1798:	7f 0a       	sbc	r7, r31
    179a:	dd cf       	rjmp	.-70     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 2: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 125000000; break;
    179c:	e9 85       	ldd	r30, Y+9	; 0x09
    179e:	fa 85       	ldd	r31, Y+10	; 0x0a
    17a0:	ef 2b       	or	r30, r31
    17a2:	c9 f2       	breq	.-78     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    17a4:	f0 ec       	ldi	r31, 0xC0	; 192
    17a6:	4f 1a       	sub	r4, r31
    17a8:	f6 ea       	ldi	r31, 0xA6	; 166
    17aa:	5f 0a       	sbc	r5, r31
    17ac:	fc e8       	ldi	r31, 0x8C	; 140
    17ae:	6f 0a       	sbc	r6, r31
    17b0:	f8 ef       	ldi	r31, 0xF8	; 248
    17b2:	7f 0a       	sbc	r7, r31
    17b4:	d0 cf       	rjmp	.-96     	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 3: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 62500000; break;
    17b6:	ef 81       	ldd	r30, Y+7	; 0x07
    17b8:	f8 85       	ldd	r31, Y+8	; 0x08
    17ba:	ef 2b       	or	r30, r31
    17bc:	61 f2       	breq	.-104    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    17be:	f0 e6       	ldi	r31, 0x60	; 96
    17c0:	4f 1a       	sub	r4, r31
    17c2:	f3 e5       	ldi	r31, 0x53	; 83
    17c4:	5f 0a       	sbc	r5, r31
    17c6:	f6 e4       	ldi	r31, 0x46	; 70
    17c8:	6f 0a       	sbc	r6, r31
    17ca:	fc ef       	ldi	r31, 0xFC	; 252
    17cc:	7f 0a       	sbc	r7, r31
    17ce:	c3 cf       	rjmp	.-122    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 4: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 31250000; break;
    17d0:	ed 81       	ldd	r30, Y+5	; 0x05
    17d2:	fe 81       	ldd	r31, Y+6	; 0x06
    17d4:	ef 2b       	or	r30, r31
    17d6:	09 f4       	brne	.+2      	; 0x17da <Binary_points_to_Decimal_L+0x144>
    17d8:	be cf       	rjmp	.-132    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    17da:	f0 eb       	ldi	r31, 0xB0	; 176
    17dc:	4f 1a       	sub	r4, r31
    17de:	f9 e2       	ldi	r31, 0x29	; 41
    17e0:	5f 0a       	sbc	r5, r31
    17e2:	f3 e2       	ldi	r31, 0x23	; 35
    17e4:	6f 0a       	sbc	r6, r31
    17e6:	fe ef       	ldi	r31, 0xFE	; 254
    17e8:	7f 0a       	sbc	r7, r31
    17ea:	b5 cf       	rjmp	.-150    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 5: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15625000; break;
    17ec:	eb 81       	ldd	r30, Y+3	; 0x03
    17ee:	fc 81       	ldd	r31, Y+4	; 0x04
    17f0:	ef 2b       	or	r30, r31
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <Binary_points_to_Decimal_L+0x160>
    17f4:	b0 cf       	rjmp	.-160    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    17f6:	f8 e2       	ldi	r31, 0x28	; 40
    17f8:	4f 0e       	add	r4, r31
    17fa:	fb e6       	ldi	r31, 0x6B	; 107
    17fc:	5f 1e       	adc	r5, r31
    17fe:	fe ee       	ldi	r31, 0xEE	; 238
    1800:	6f 1e       	adc	r6, r31
    1802:	71 1c       	adc	r7, r1
    1804:	a8 cf       	rjmp	.-176    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 6: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 7812500; break;
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	ef 2b       	or	r30, r31
    180c:	09 f4       	brne	.+2      	; 0x1810 <Binary_points_to_Decimal_L+0x17a>
    180e:	a3 cf       	rjmp	.-186    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1810:	f4 e9       	ldi	r31, 0x94	; 148
    1812:	4f 0e       	add	r4, r31
    1814:	f5 e3       	ldi	r31, 0x35	; 53
    1816:	5f 1e       	adc	r5, r31
    1818:	f7 e7       	ldi	r31, 0x77	; 119
    181a:	6f 1e       	adc	r6, r31
    181c:	71 1c       	adc	r7, r1
    181e:	9b cf       	rjmp	.-202    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 7: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 3906250; break;
    1820:	81 14       	cp	r8, r1
    1822:	91 04       	cpc	r9, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <Binary_points_to_Decimal_L+0x192>
    1826:	97 cf       	rjmp	.-210    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1828:	ea ec       	ldi	r30, 0xCA	; 202
    182a:	4e 0e       	add	r4, r30
    182c:	ea e9       	ldi	r30, 0x9A	; 154
    182e:	5e 1e       	adc	r5, r30
    1830:	eb e3       	ldi	r30, 0x3B	; 59
    1832:	6e 1e       	adc	r6, r30
    1834:	71 1c       	adc	r7, r1
    1836:	8f cf       	rjmp	.-226    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 8: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 1953125; break;
    1838:	a1 14       	cp	r10, r1
    183a:	b1 04       	cpc	r11, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <Binary_points_to_Decimal_L+0x1aa>
    183e:	8b cf       	rjmp	.-234    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1840:	f5 e6       	ldi	r31, 0x65	; 101
    1842:	4f 0e       	add	r4, r31
    1844:	fd ec       	ldi	r31, 0xCD	; 205
    1846:	5f 1e       	adc	r5, r31
    1848:	fd e1       	ldi	r31, 0x1D	; 29
    184a:	6f 1e       	adc	r6, r31
    184c:	71 1c       	adc	r7, r1
    184e:	83 cf       	rjmp	.-250    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 9: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 976563; break;
    1850:	c1 14       	cp	r12, r1
    1852:	d1 04       	cpc	r13, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <Binary_points_to_Decimal_L+0x1c2>
    1856:	7f cf       	rjmp	.-258    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1858:	e3 eb       	ldi	r30, 0xB3	; 179
    185a:	4e 0e       	add	r4, r30
    185c:	e6 ee       	ldi	r30, 0xE6	; 230
    185e:	5e 1e       	adc	r5, r30
    1860:	ee e0       	ldi	r30, 0x0E	; 14
    1862:	6e 1e       	adc	r6, r30
    1864:	71 1c       	adc	r7, r1
    1866:	77 cf       	rjmp	.-274    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 10: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 488281; break;
    1868:	e1 14       	cp	r14, r1
    186a:	f1 04       	cpc	r15, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <Binary_points_to_Decimal_L+0x1da>
    186e:	73 cf       	rjmp	.-282    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1870:	f9 e5       	ldi	r31, 0x59	; 89
    1872:	4f 0e       	add	r4, r31
    1874:	f3 e7       	ldi	r31, 0x73	; 115
    1876:	5f 1e       	adc	r5, r31
    1878:	f7 e0       	ldi	r31, 0x07	; 7
    187a:	6f 1e       	adc	r6, r31
    187c:	71 1c       	adc	r7, r1
    187e:	6b cf       	rjmp	.-298    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
    1880:	41 15       	cp	r20, r1
    1882:	51 05       	cpc	r21, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <Binary_points_to_Decimal_L+0x1f2>
    1886:	67 cf       	rjmp	.-306    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    1888:	ed ea       	ldi	r30, 0xAD	; 173
    188a:	4e 0e       	add	r4, r30
    188c:	e9 eb       	ldi	r30, 0xB9	; 185
    188e:	5e 1e       	adc	r5, r30
    1890:	e3 e0       	ldi	r30, 0x03	; 3
    1892:	6e 1e       	adc	r6, r30
    1894:	71 1c       	adc	r7, r1
    1896:	5f cf       	rjmp	.-322    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
    1898:	10 97       	sbiw	r26, 0x00	; 0
    189a:	09 f4       	brne	.+2      	; 0x189e <Binary_points_to_Decimal_L+0x208>
    189c:	5c cf       	rjmp	.-328    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    189e:	f6 ed       	ldi	r31, 0xD6	; 214
    18a0:	4f 0e       	add	r4, r31
    18a2:	fc ed       	ldi	r31, 0xDC	; 220
    18a4:	5f 1e       	adc	r5, r31
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	6f 1e       	adc	r6, r31
    18aa:	71 1c       	adc	r7, r1
    18ac:	54 cf       	rjmp	.-344    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
    18ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    18b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    18b2:	ef 2b       	or	r30, r31
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <Binary_points_to_Decimal_L+0x222>
    18b6:	4f cf       	rjmp	.-354    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    18b8:	fb e6       	ldi	r31, 0x6B	; 107
    18ba:	4f 0e       	add	r4, r31
    18bc:	fe ee       	ldi	r31, 0xEE	; 238
    18be:	5f 1e       	adc	r5, r31
    18c0:	61 1c       	adc	r6, r1
    18c2:	71 1c       	adc	r7, r1
    18c4:	48 cf       	rjmp	.-368    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
    18c6:	01 15       	cp	r16, r1
    18c8:	11 05       	cpc	r17, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <Binary_points_to_Decimal_L+0x238>
    18cc:	44 cf       	rjmp	.-376    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
    18ce:	e6 e3       	ldi	r30, 0x36	; 54
    18d0:	4e 0e       	add	r4, r30
    18d2:	e7 e7       	ldi	r30, 0x77	; 119
    18d4:	5e 1e       	adc	r5, r30
    18d6:	61 1c       	adc	r6, r1
    18d8:	71 1c       	adc	r7, r1
    18da:	3d cf       	rjmp	.-390    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
    18dc:	60 ff       	sbrs	r22, 0
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <Binary_points_to_Decimal_L+0x260>
    18e0:	fb e9       	ldi	r31, 0x9B	; 155
    18e2:	4f 0e       	add	r4, r31
    18e4:	fb e3       	ldi	r31, 0x3B	; 59
    18e6:	5f 1e       	adc	r5, r31
    18e8:	61 1c       	adc	r6, r1
    18ea:	71 1c       	adc	r7, r1
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <Binary_points_to_Decimal_L+0x260>

/**************************************************************************************************/
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
RHSofDP = 0;
for(int n = 0; n <= 15; n++){switch(n){
    18ee:	20 31       	cpi	r18, 0x10	; 16
    18f0:	31 05       	cpc	r19, r1
    18f2:	0c f4       	brge	.+2      	; 0x18f6 <Binary_points_to_Decimal_L+0x260>
    18f4:	30 cf       	rjmp	.-416    	; 0x1756 <Binary_points_to_Decimal_L+0xc0>


/**************************************************************************************************/
unsigned long Binary_points_to_Decimal_L (unsigned int RHSofBP_LB, unsigned int RHSofBP_HB)
{unsigned long  RHSofDP;
RHSofDP = 0;
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    18fa:	5c 01       	movw	r10, r24
    18fc:	44 e0       	ldi	r20, 0x04	; 4
    18fe:	a4 22       	and	r10, r20
    1900:	bb 24       	eor	r11, r11
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    1902:	6c 01       	movw	r12, r24
    1904:	58 e0       	ldi	r21, 0x08	; 8
    1906:	c5 22       	and	r12, r21
    1908:	dd 24       	eor	r13, r13
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    190a:	7c 01       	movw	r14, r24
    190c:	60 e1       	ldi	r22, 0x10	; 16
    190e:	e6 22       	and	r14, r22
    1910:	ff 24       	eor	r15, r15
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    1912:	8c 01       	movw	r16, r24
    1914:	00 72       	andi	r16, 0x20	; 32
    1916:	11 27       	eor	r17, r17
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    1918:	fc 01       	movw	r30, r24
    191a:	e0 74       	andi	r30, 0x40	; 64
    191c:	ff 27       	eor	r31, r31
    191e:	f8 87       	std	Y+8, r31	; 0x08
    1920:	ef 83       	std	Y+7, r30	; 0x07
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    1922:	dc 01       	movw	r26, r24
    1924:	a0 78       	andi	r26, 0x80	; 128
    1926:	bb 27       	eor	r27, r27
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    1928:	ac 01       	movw	r20, r24
    192a:	44 27       	eor	r20, r20
    192c:	51 70       	andi	r21, 0x01	; 1
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    192e:	4c 01       	movw	r8, r24
    1930:	88 24       	eor	r8, r8
    1932:	f2 e0       	ldi	r31, 0x02	; 2
    1934:	9f 22       	and	r9, r31
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    1936:	bc 01       	movw	r22, r24
    1938:	66 27       	eor	r22, r22
    193a:	74 70       	andi	r23, 0x04	; 4
    193c:	7a 83       	std	Y+2, r23	; 0x02
    193e:	69 83       	std	Y+1, r22	; 0x01
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    1940:	bc 01       	movw	r22, r24
    1942:	66 27       	eor	r22, r22
    1944:	78 70       	andi	r23, 0x08	; 8
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    1946:	fc 01       	movw	r30, r24
    1948:	ee 27       	eor	r30, r30
    194a:	f0 71       	andi	r31, 0x10	; 16
    194c:	fc 83       	std	Y+4, r31	; 0x04
    194e:	eb 83       	std	Y+3, r30	; 0x03
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    1950:	fc 01       	movw	r30, r24
    1952:	ee 27       	eor	r30, r30
    1954:	f0 72       	andi	r31, 0x20	; 32
    1956:	fe 83       	std	Y+6, r31	; 0x06
    1958:	ed 83       	std	Y+5, r30	; 0x05
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    195a:	1c 01       	movw	r2, r24
    195c:	22 24       	eor	r2, r2
    195e:	f0 e4       	ldi	r31, 0x40	; 64
    1960:	3f 22       	and	r3, r31
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    1962:	88 27       	eor	r24, r24
    1964:	90 78       	andi	r25, 0x80	; 128
    1966:	02 c0       	rjmp	.+4      	; 0x196c <Binary_points_to_Decimal_L+0x2d6>
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	f9 01       	movw	r30, r18
    196e:	31 97       	sbiw	r30, 0x01	; 1
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    1970:	ee 30       	cpi	r30, 0x0E	; 14
    1972:	f1 05       	cpc	r31, r1
    1974:	08 f0       	brcs	.+2      	; 0x1978 <Binary_points_to_Decimal_L+0x2e2>
    1976:	92 c0       	rjmp	.+292    	; 0x1a9c <Binary_points_to_Decimal_L+0x406>
    1978:	eb 51       	subi	r30, 0x1B	; 27
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	91 f3       	breq	.-28     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1984:	fd ec       	ldi	r31, 0xCD	; 205
    1986:	4f 0e       	add	r4, r31
    1988:	fd e1       	ldi	r31, 0x1D	; 29
    198a:	5f 1e       	adc	r5, r31
    198c:	61 1c       	adc	r6, r1
    198e:	71 1c       	adc	r7, r1
    1990:	eb cf       	rjmp	.-42     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    1992:	21 14       	cp	r2, r1
    1994:	31 04       	cpc	r3, r1
    1996:	41 f3       	breq	.-48     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1998:	e7 ee       	ldi	r30, 0xE7	; 231
    199a:	4e 0e       	add	r4, r30
    199c:	ee e0       	ldi	r30, 0x0E	; 14
    199e:	5e 1e       	adc	r5, r30
    19a0:	61 1c       	adc	r6, r1
    19a2:	71 1c       	adc	r7, r1
    19a4:	e1 cf       	rjmp	.-62     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    19a6:	ed 81       	ldd	r30, Y+5	; 0x05
    19a8:	fe 81       	ldd	r31, Y+6	; 0x06
    19aa:	ef 2b       	or	r30, r31
    19ac:	e9 f2       	breq	.-70     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    19ae:	f3 e7       	ldi	r31, 0x73	; 115
    19b0:	4f 0e       	add	r4, r31
    19b2:	f7 e0       	ldi	r31, 0x07	; 7
    19b4:	5f 1e       	adc	r5, r31
    19b6:	61 1c       	adc	r6, r1
    19b8:	71 1c       	adc	r7, r1
    19ba:	d6 cf       	rjmp	.-84     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    19bc:	eb 81       	ldd	r30, Y+3	; 0x03
    19be:	fc 81       	ldd	r31, Y+4	; 0x04
    19c0:	ef 2b       	or	r30, r31
    19c2:	91 f2       	breq	.-92     	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    19c4:	fa eb       	ldi	r31, 0xBA	; 186
    19c6:	4f 0e       	add	r4, r31
    19c8:	f3 e0       	ldi	r31, 0x03	; 3
    19ca:	5f 1e       	adc	r5, r31
    19cc:	61 1c       	adc	r6, r1
    19ce:	71 1c       	adc	r7, r1
    19d0:	cb cf       	rjmp	.-106    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    19d2:	61 15       	cp	r22, r1
    19d4:	71 05       	cpc	r23, r1
    19d6:	41 f2       	breq	.-112    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    19d8:	ed ed       	ldi	r30, 0xDD	; 221
    19da:	4e 0e       	add	r4, r30
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	5e 1e       	adc	r5, r30
    19e0:	61 1c       	adc	r6, r1
    19e2:	71 1c       	adc	r7, r1
    19e4:	c1 cf       	rjmp	.-126    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	ef 2b       	or	r30, r31
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <Binary_points_to_Decimal_L+0x35a>
    19ee:	bc cf       	rjmp	.-136    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    19f0:	fe ee       	ldi	r31, 0xEE	; 238
    19f2:	4f 0e       	add	r4, r31
    19f4:	51 1c       	adc	r5, r1
    19f6:	61 1c       	adc	r6, r1
    19f8:	71 1c       	adc	r7, r1
    19fa:	b6 cf       	rjmp	.-148    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    19fc:	81 14       	cp	r8, r1
    19fe:	91 04       	cpc	r9, r1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <Binary_points_to_Decimal_L+0x36e>
    1a02:	b2 cf       	rjmp	.-156    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a04:	e7 e7       	ldi	r30, 0x77	; 119
    1a06:	4e 0e       	add	r4, r30
    1a08:	51 1c       	adc	r5, r1
    1a0a:	61 1c       	adc	r6, r1
    1a0c:	71 1c       	adc	r7, r1
    1a0e:	ac cf       	rjmp	.-168    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    1a10:	41 15       	cp	r20, r1
    1a12:	51 05       	cpc	r21, r1
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <Binary_points_to_Decimal_L+0x382>
    1a16:	a8 cf       	rjmp	.-176    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a18:	fc e3       	ldi	r31, 0x3C	; 60
    1a1a:	4f 0e       	add	r4, r31
    1a1c:	51 1c       	adc	r5, r1
    1a1e:	61 1c       	adc	r6, r1
    1a20:	71 1c       	adc	r7, r1
    1a22:	a2 cf       	rjmp	.-188    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    1a24:	10 97       	sbiw	r26, 0x00	; 0
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <Binary_points_to_Decimal_L+0x394>
    1a28:	9f cf       	rjmp	.-194    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a2a:	ee e1       	ldi	r30, 0x1E	; 30
    1a2c:	4e 0e       	add	r4, r30
    1a2e:	51 1c       	adc	r5, r1
    1a30:	61 1c       	adc	r6, r1
    1a32:	71 1c       	adc	r7, r1
    1a34:	99 cf       	rjmp	.-206    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    1a36:	ef 81       	ldd	r30, Y+7	; 0x07
    1a38:	f8 85       	ldd	r31, Y+8	; 0x08
    1a3a:	ef 2b       	or	r30, r31
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <Binary_points_to_Decimal_L+0x3aa>
    1a3e:	94 cf       	rjmp	.-216    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a40:	ff e0       	ldi	r31, 0x0F	; 15
    1a42:	4f 0e       	add	r4, r31
    1a44:	51 1c       	adc	r5, r1
    1a46:	61 1c       	adc	r6, r1
    1a48:	71 1c       	adc	r7, r1
    1a4a:	8e cf       	rjmp	.-228    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    1a4c:	01 15       	cp	r16, r1
    1a4e:	11 05       	cpc	r17, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <Binary_points_to_Decimal_L+0x3be>
    1a52:	8a cf       	rjmp	.-236    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a54:	e7 e0       	ldi	r30, 0x07	; 7
    1a56:	4e 0e       	add	r4, r30
    1a58:	51 1c       	adc	r5, r1
    1a5a:	61 1c       	adc	r6, r1
    1a5c:	71 1c       	adc	r7, r1
    1a5e:	84 cf       	rjmp	.-248    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    1a60:	e1 14       	cp	r14, r1
    1a62:	f1 04       	cpc	r15, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <Binary_points_to_Decimal_L+0x3d2>
    1a66:	80 cf       	rjmp	.-256    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a68:	f4 e0       	ldi	r31, 0x04	; 4
    1a6a:	4f 0e       	add	r4, r31
    1a6c:	51 1c       	adc	r5, r1
    1a6e:	61 1c       	adc	r6, r1
    1a70:	71 1c       	adc	r7, r1
    1a72:	7a cf       	rjmp	.-268    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    1a74:	c1 14       	cp	r12, r1
    1a76:	d1 04       	cpc	r13, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <Binary_points_to_Decimal_L+0x3e6>
    1a7a:	76 cf       	rjmp	.-276    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a7c:	e2 e0       	ldi	r30, 0x02	; 2
    1a7e:	4e 0e       	add	r4, r30
    1a80:	51 1c       	adc	r5, r1
    1a82:	61 1c       	adc	r6, r1
    1a84:	71 1c       	adc	r7, r1
    1a86:	70 cf       	rjmp	.-288    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    1a88:	a1 14       	cp	r10, r1
    1a8a:	b1 04       	cpc	r11, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <Binary_points_to_Decimal_L+0x3fa>
    1a8e:	6c cf       	rjmp	.-296    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
    1a90:	ff ef       	ldi	r31, 0xFF	; 255
    1a92:	4f 1a       	sub	r4, r31
    1a94:	5f 0a       	sbc	r5, r31
    1a96:	6f 0a       	sbc	r6, r31
    1a98:	7f 0a       	sbc	r7, r31
    1a9a:	66 cf       	rjmp	.-308    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 11: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP_HB & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    1a9c:	20 31       	cpi	r18, 0x10	; 16
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	0c f4       	brge	.+2      	; 0x1aa4 <Binary_points_to_Decimal_L+0x40e>
    1aa2:	62 cf       	rjmp	.-316    	; 0x1968 <Binary_points_to_Decimal_L+0x2d2>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;
case 15: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;}}
RHSofDP += 0x00000008; 	RHSofDP = RHSofDP & 0xFFFFFFF0;  											//Round to 8 decimal places	
    1aa4:	d3 01       	movw	r26, r6
    1aa6:	c2 01       	movw	r24, r4
    1aa8:	08 96       	adiw	r24, 0x08	; 8
    1aaa:	a1 1d       	adc	r26, r1
    1aac:	b1 1d       	adc	r27, r1
return RHSofDP;}
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	60 7f       	andi	r22, 0xF0	; 240
    1ab4:	2e 96       	adiw	r28, 0x0e	; 14
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	ff 90       	pop	r15
    1aca:	ef 90       	pop	r14
    1acc:	df 90       	pop	r13
    1ace:	cf 90       	pop	r12
    1ad0:	bf 90       	pop	r11
    1ad2:	af 90       	pop	r10
    1ad4:	9f 90       	pop	r9
    1ad6:	8f 90       	pop	r8
    1ad8:	7f 90       	pop	r7
    1ada:	6f 90       	pop	r6
    1adc:	5f 90       	pop	r5
    1ade:	4f 90       	pop	r4
    1ae0:	3f 90       	pop	r3
    1ae2:	2f 90       	pop	r2
    1ae4:	08 95       	ret

00001ae6 <Display_real_num>:
{for(int m = 0; m <= 7; m++)display_buf[m] = '_';}}



/*********************************************************************/
void Display_real_num(long number_1){
    1ae6:	8f 92       	push	r8
    1ae8:	9f 92       	push	r9
    1aea:	af 92       	push	r10
    1aec:	bf 92       	push	r11
    1aee:	cf 92       	push	r12
    1af0:	df 92       	push	r13
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	6b 01       	movw	r12, r22
    1af8:	7c 01       	movw	r14, r24
unsigned int RHS_of_BP_LB, RHS_of_BP_HB;
unsigned long RHSDP;

if(number_1 < 0)RHS_of_BP_HB = ~number_1 & 0x0000FFFF;
    1afa:	99 23       	and	r25, r25
    1afc:	a4 f4       	brge	.+40     	; 0x1b26 <Display_real_num+0x40>
else RHS_of_BP_HB = number_1 & 0x0000FFFF;
RHS_of_BP_LB = 0;

RHSDP = Binary_points_to_Decimal_L (RHS_of_BP_LB,  RHS_of_BP_HB);
    1afe:	60 95       	com	r22
    1b00:	70 95       	com	r23
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Binary_points_to_Decimal_L>
    1b0a:	4b 01       	movw	r8, r22
    1b0c:	5c 01       	movw	r10, r24

if(number_1 < 0){
if (!((number_1 >> 16)+1)){display_buf[7] = '-'; display_buf[6] = '0';}	
    1b0e:	67 01       	movw	r12, r14
    1b10:	ff 24       	eor	r15, r15
    1b12:	d7 fc       	sbrc	r13, 7
    1b14:	f0 94       	com	r15
    1b16:	ef 2c       	mov	r14, r15
    1b18:	8f ef       	ldi	r24, 0xFF	; 255
    1b1a:	c8 16       	cp	r12, r24
    1b1c:	d8 06       	cpc	r13, r24
    1b1e:	e8 06       	cpc	r14, r24
    1b20:	f8 06       	cpc	r15, r24
    1b22:	b9 f4       	brne	.+46     	; 0x1b52 <Display_real_num+0x6c>
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <Display_real_num+0x5e>

if(number_1 < 0)RHS_of_BP_HB = ~number_1 & 0x0000FFFF;
else RHS_of_BP_HB = number_1 & 0x0000FFFF;
RHS_of_BP_LB = 0;

RHSDP = Binary_points_to_Decimal_L (RHS_of_BP_LB,  RHS_of_BP_HB);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Binary_points_to_Decimal_L>
    1b2e:	4b 01       	movw	r8, r22
    1b30:	5c 01       	movw	r10, r24

if(number_1 < 0){
if (!((number_1 >> 16)+1)){display_buf[7] = '-'; display_buf[6] = '0';}	
else displayLongNum(10, ((number_1 >> 16)+1));}

else displayLongNum(10, (number_1 >> 16));
    1b32:	a7 01       	movw	r20, r14
    1b34:	77 27       	eor	r23, r23
    1b36:	57 fd       	sbrc	r21, 7
    1b38:	70 95       	com	r23
    1b3a:	67 2f       	mov	r22, r23
    1b3c:	8a e0       	ldi	r24, 0x0A	; 10
    1b3e:	0e 94 cb 08 	call	0x1196	; 0x1196 <displayLongNum>
    1b42:	10 c0       	rjmp	.+32     	; 0x1b64 <Display_real_num+0x7e>
RHS_of_BP_LB = 0;

RHSDP = Binary_points_to_Decimal_L (RHS_of_BP_LB,  RHS_of_BP_HB);

if(number_1 < 0){
if (!((number_1 >> 16)+1)){display_buf[7] = '-'; display_buf[6] = '0';}	
    1b44:	ef e0       	ldi	r30, 0x0F	; 15
    1b46:	f2 e0       	ldi	r31, 0x02	; 2
    1b48:	8d e2       	ldi	r24, 0x2D	; 45
    1b4a:	87 83       	std	Z+7, r24	; 0x07
    1b4c:	80 e3       	ldi	r24, 0x30	; 48
    1b4e:	86 83       	std	Z+6, r24	; 0x06
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <Display_real_num+0x7e>
else displayLongNum(10, ((number_1 >> 16)+1));}
    1b52:	b7 01       	movw	r22, r14
    1b54:	a6 01       	movw	r20, r12
    1b56:	4f 5f       	subi	r20, 0xFF	; 255
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	8a e0       	ldi	r24, 0x0A	; 10
    1b60:	0e 94 cb 08 	call	0x1196	; 0x1196 <displayLongNum>

else displayLongNum(10, (number_1 >> 16));
displayDecimal(10, RHSDP, 5);}
    1b64:	25 e0       	ldi	r18, 0x05	; 5
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	b5 01       	movw	r22, r10
    1b6a:	a4 01       	movw	r20, r8
    1b6c:	8a e0       	ldi	r24, 0x0A	; 10
    1b6e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <displayDecimal>
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	9f 90       	pop	r9
    1b80:	8f 90       	pop	r8
    1b82:	08 95       	ret

00001b84 <divide_scientific>:



/**************************************************************************************************/
unsigned long divide_scientific(signed char *exponent, unsigned int  *RHSofBP_LB,unsigned int *RHSofBP_HB){
    1b84:	2f 92       	push	r2
    1b86:	3f 92       	push	r3
    1b88:	4f 92       	push	r4
    1b8a:	5f 92       	push	r5
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <divide_scientific+0x26>
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <divide_scientific+0x28>
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	7c 83       	std	Y+4, r23	; 0x04
    1bb6:	6b 83       	std	Y+3, r22	; 0x03
    1bb8:	6a 01       	movw	r12, r20
unsigned long  Denominator, Numerator;
unsigned int res_LHS_BP;
unsigned long  RHSofDP;

Numerator = 	RHSofBP_HB[0]; Numerator = 	 (Numerator << 16) + RHSofBP_LB[0];
    1bba:	fa 01       	movw	r30, r20
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	99 27       	eor	r25, r25
    1bca:	88 27       	eor	r24, r24
    1bcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bce:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd0:	20 81       	ld	r18, Z
    1bd2:	31 81       	ldd	r19, Z+1	; 0x01
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	62 0f       	add	r22, r18
    1bda:	73 1f       	adc	r23, r19
    1bdc:	81 1d       	adc	r24, r1
    1bde:	91 1d       	adc	r25, r1
Denominator = 	RHSofBP_HB[1]; Denominator  = (Denominator << 16) + RHSofBP_LB[1];
    1be0:	fa 01       	movw	r30, r20
    1be2:	22 81       	ldd	r18, Z+2	; 0x02
    1be4:	33 81       	ldd	r19, Z+3	; 0x03
    1be6:	49 01       	movw	r8, r18
    1be8:	a1 2c       	mov	r10, r1
    1bea:	b1 2c       	mov	r11, r1
    1bec:	54 01       	movw	r10, r8
    1bee:	99 24       	eor	r9, r9
    1bf0:	88 24       	eor	r8, r8
    1bf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf6:	42 81       	ldd	r20, Z+2	; 0x02
    1bf8:	53 81       	ldd	r21, Z+3	; 0x03
    1bfa:	84 0e       	add	r8, r20
    1bfc:	95 1e       	adc	r9, r21
    1bfe:	a1 1c       	adc	r10, r1
    1c00:	b1 1c       	adc	r11, r1
if(RHSofBP_HB[1] & (1 << 15)) {Numerator = Numerator >> 1;Denominator = Denominator >> 1;}		// detect overflow of long
    1c02:	33 23       	and	r19, r19
    1c04:	44 f4       	brge	.+16     	; 0x1c16 <divide_scientific+0x92>
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	77 95       	ror	r23
    1c0c:	67 95       	ror	r22
    1c0e:	b6 94       	lsr	r11
    1c10:	a7 94       	ror	r10
    1c12:	97 94       	ror	r9
    1c14:	87 94       	ror	r8

res_LHS_BP = Numerator / Denominator;		//Obtain LHS of product
    1c16:	a5 01       	movw	r20, r10
    1c18:	94 01       	movw	r18, r8
    1c1a:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    1c1e:	29 01       	movw	r4, r18
    1c20:	3a 01       	movw	r6, r20
Fraction_to_Binary_D(Numerator % Denominator, Denominator, &RHSofBP_LB[2], &RHSofBP_HB[2] );		//Obtain RHS of product
    1c22:	76 01       	movw	r14, r12
    1c24:	f4 e0       	ldi	r31, 0x04	; 4
    1c26:	ef 0e       	add	r14, r31
    1c28:	f1 1c       	adc	r15, r1
    1c2a:	0b 81       	ldd	r16, Y+3	; 0x03
    1c2c:	1c 81       	ldd	r17, Y+4	; 0x04
    1c2e:	0c 5f       	subi	r16, 0xFC	; 252
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	a5 01       	movw	r20, r10
    1c34:	94 01       	movw	r18, r8
    1c36:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>
RHSofDP = Binary_points_to_Decimal_L ( RHSofBP_LB[2], RHSofBP_HB[2]);								//Convert RHS to decimal notation
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	64 81       	ldd	r22, Z+4	; 0x04
    1c3e:	75 81       	ldd	r23, Z+5	; 0x05
    1c40:	eb 81       	ldd	r30, Y+3	; 0x03
    1c42:	fc 81       	ldd	r31, Y+4	; 0x04
    1c44:	84 81       	ldd	r24, Z+4	; 0x04
    1c46:	95 81       	ldd	r25, Z+5	; 0x05
    1c48:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Binary_points_to_Decimal_L>


if(res_LHS_BP){RHSofDP = RHSofDP/10;
    1c4c:	41 14       	cp	r4, r1
    1c4e:	51 04       	cpc	r5, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <divide_scientific+0xd0>
    1c52:	4b c0       	rjmp	.+150    	; 0x1cea <divide_scientific+0x166>
    1c54:	2a e0       	ldi	r18, 0x0A	; 10
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    1c60:	ca 01       	movw	r24, r20
    1c62:	b9 01       	movw	r22, r18
switch (res_LHS_BP){
    1c64:	f2 01       	movw	r30, r4
    1c66:	31 97       	sbiw	r30, 0x01	; 1
    1c68:	e9 30       	cpi	r30, 0x09	; 9
    1c6a:	f1 05       	cpc	r31, r1
    1c6c:	c8 f5       	brcc	.+114    	; 0x1ce0 <divide_scientific+0x15c>
    1c6e:	ed 50       	subi	r30, 0x0D	; 13
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 1:  RHSofDP = RHSofDP + 100000000;break;
    1c76:	ca 01       	movw	r24, r20
    1c78:	b9 01       	movw	r22, r18
    1c7a:	7f 51       	subi	r23, 0x1F	; 31
    1c7c:	8a 40       	sbci	r24, 0x0A	; 10
    1c7e:	9a 4f       	sbci	r25, 0xFA	; 250
    1c80:	2f c0       	rjmp	.+94     	; 0x1ce0 <divide_scientific+0x15c>
case 2:  RHSofDP = RHSofDP + 200000000;break;
    1c82:	ca 01       	movw	r24, r20
    1c84:	b9 01       	movw	r22, r18
    1c86:	7e 53       	subi	r23, 0x3E	; 62
    1c88:	84 41       	sbci	r24, 0x14	; 20
    1c8a:	94 4f       	sbci	r25, 0xF4	; 244
    1c8c:	29 c0       	rjmp	.+82     	; 0x1ce0 <divide_scientific+0x15c>
case 3:  RHSofDP = RHSofDP + 300000000;break;
    1c8e:	ca 01       	movw	r24, r20
    1c90:	b9 01       	movw	r22, r18
    1c92:	7d 55       	subi	r23, 0x5D	; 93
    1c94:	8e 41       	sbci	r24, 0x1E	; 30
    1c96:	9e 4e       	sbci	r25, 0xEE	; 238
    1c98:	23 c0       	rjmp	.+70     	; 0x1ce0 <divide_scientific+0x15c>
case 4:  RHSofDP = RHSofDP + 400000000;break;
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	7c 57       	subi	r23, 0x7C	; 124
    1ca0:	88 42       	sbci	r24, 0x28	; 40
    1ca2:	98 4e       	sbci	r25, 0xE8	; 232
    1ca4:	1d c0       	rjmp	.+58     	; 0x1ce0 <divide_scientific+0x15c>
case 5:  RHSofDP = RHSofDP + 500000000;break;
    1ca6:	ca 01       	movw	r24, r20
    1ca8:	b9 01       	movw	r22, r18
    1caa:	7b 59       	subi	r23, 0x9B	; 155
    1cac:	82 43       	sbci	r24, 0x32	; 50
    1cae:	92 4e       	sbci	r25, 0xE2	; 226
    1cb0:	17 c0       	rjmp	.+46     	; 0x1ce0 <divide_scientific+0x15c>
case 6:  RHSofDP = RHSofDP + 600000000;break;
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	7a 5b       	subi	r23, 0xBA	; 186
    1cb8:	8c 43       	sbci	r24, 0x3C	; 60
    1cba:	9c 4d       	sbci	r25, 0xDC	; 220
    1cbc:	11 c0       	rjmp	.+34     	; 0x1ce0 <divide_scientific+0x15c>
case 7:  RHSofDP = RHSofDP + 700000000;break;
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	79 5d       	subi	r23, 0xD9	; 217
    1cc4:	86 44       	sbci	r24, 0x46	; 70
    1cc6:	96 4d       	sbci	r25, 0xD6	; 214
    1cc8:	0b c0       	rjmp	.+22     	; 0x1ce0 <divide_scientific+0x15c>
case 8:  RHSofDP = RHSofDP + 800000000;break;
    1cca:	ca 01       	movw	r24, r20
    1ccc:	b9 01       	movw	r22, r18
    1cce:	78 5f       	subi	r23, 0xF8	; 248
    1cd0:	80 45       	sbci	r24, 0x50	; 80
    1cd2:	90 4d       	sbci	r25, 0xD0	; 208
    1cd4:	05 c0       	rjmp	.+10     	; 0x1ce0 <divide_scientific+0x15c>
case 9:  RHSofDP = RHSofDP + 900000000;break;}
    1cd6:	ca 01       	movw	r24, r20
    1cd8:	b9 01       	movw	r22, r18
    1cda:	77 51       	subi	r23, 0x17	; 23
    1cdc:	8b 45       	sbci	r24, 0x5B	; 91
    1cde:	9a 4c       	sbci	r25, 0xCA	; 202
exponent[2]++; res_LHS_BP = 0;}
    1ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce4:	22 81       	ldd	r18, Z+2	; 0x02
    1ce6:	2f 5f       	subi	r18, 0xFF	; 255
    1ce8:	22 83       	std	Z+2, r18	; 0x02
return RHSofDP;}
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	9f 90       	pop	r9
    1d08:	8f 90       	pop	r8
    1d0a:	7f 90       	pop	r7
    1d0c:	6f 90       	pop	r6
    1d0e:	5f 90       	pop	r5
    1d10:	4f 90       	pop	r4
    1d12:	3f 90       	pop	r3
    1d14:	2f 90       	pop	r2
    1d16:	08 95       	ret

00001d18 <divide_real>:



/**************************************************************************************************/
unsigned long divide_real(unsigned long *data, signed char *exponent ){		
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	2c 97       	sbiw	r28, 0x0c	; 12
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	6c 01       	movw	r12, r24
    1d3e:	5b 01       	movw	r10, r22
unsigned int  RHSofBP_LB[3], RHSofBP_HB[3];
unsigned long  RHSofDP;

data[2] = 1; while (data[0] >= data[2]) {data[2] = data[2] * 10; exponent[0]++;}
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e0       	ldi	r26, 0x00	; 0
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	f6 01       	movw	r30, r12
    1d4a:	80 87       	std	Z+8, r24	; 0x08
    1d4c:	91 87       	std	Z+9, r25	; 0x09
    1d4e:	a2 87       	std	Z+10, r26	; 0x0a
    1d50:	b3 87       	std	Z+11, r27	; 0x0b
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	61 15       	cp	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	81 05       	cpc	r24, r1
    1d60:	91 05       	cpc	r25, r1
    1d62:	81 f1       	breq	.+96     	; 0x1dc4 <divide_real+0xac>
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	ba 01       	movw	r22, r20
    1d6e:	a9 01       	movw	r20, r18
    1d70:	44 0f       	add	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	66 1f       	adc	r22, r22
    1d76:	77 1f       	adc	r23, r23
    1d78:	db 01       	movw	r26, r22
    1d7a:	ca 01       	movw	r24, r20
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	aa 1f       	adc	r26, r26
    1d82:	bb 1f       	adc	r27, r27
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	84 0f       	add	r24, r20
    1d8e:	95 1f       	adc	r25, r21
    1d90:	a6 1f       	adc	r26, r22
    1d92:	b7 1f       	adc	r27, r23
    1d94:	f6 01       	movw	r30, r12
    1d96:	80 87       	std	Z+8, r24	; 0x08
    1d98:	91 87       	std	Z+9, r25	; 0x09
    1d9a:	a2 87       	std	Z+10, r26	; 0x0a
    1d9c:	b3 87       	std	Z+11, r27	; 0x0b
    1d9e:	f5 01       	movw	r30, r10
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	80 83       	st	Z, r24
    1da6:	f6 01       	movw	r30, r12
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 85       	ldd	r18, Z+8	; 0x08
    1db2:	31 85       	ldd	r19, Z+9	; 0x09
    1db4:	42 85       	ldd	r20, Z+10	; 0x0a
    1db6:	53 85       	ldd	r21, Z+11	; 0x0b
    1db8:	62 17       	cp	r22, r18
    1dba:	73 07       	cpc	r23, r19
    1dbc:	84 07       	cpc	r24, r20
    1dbe:	95 07       	cpc	r25, r21
    1dc0:	a8 f6       	brcc	.-86     	; 0x1d6c <divide_real+0x54>
    1dc2:	04 c0       	rjmp	.+8      	; 0x1dcc <divide_real+0xb4>
    1dc4:	21 e0       	ldi	r18, 0x01	; 1
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	50 e0       	ldi	r21, 0x00	; 0
Fraction_to_Binary_D(data[0], data[2],  &RHSofBP_LB[0], &RHSofBP_HB[0]);
    1dcc:	fe 01       	movw	r30, r28
    1dce:	37 96       	adiw	r30, 0x07	; 7
    1dd0:	7f 01       	movw	r14, r30
    1dd2:	8e 01       	movw	r16, r28
    1dd4:	0f 5f       	subi	r16, 0xFF	; 255
    1dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

data[3] = 1; while (data[1] >= data[3]) {data[3] = data[3] * 10; exponent[1]++;}
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	f6 01       	movw	r30, r12
    1de6:	84 87       	std	Z+12, r24	; 0x0c
    1de8:	95 87       	std	Z+13, r25	; 0x0d
    1dea:	a6 87       	std	Z+14, r26	; 0x0e
    1dec:	b7 87       	std	Z+15, r27	; 0x0f
    1dee:	64 81       	ldd	r22, Z+4	; 0x04
    1df0:	75 81       	ldd	r23, Z+5	; 0x05
    1df2:	86 81       	ldd	r24, Z+6	; 0x06
    1df4:	97 81       	ldd	r25, Z+7	; 0x07
    1df6:	61 15       	cp	r22, r1
    1df8:	71 05       	cpc	r23, r1
    1dfa:	81 05       	cpc	r24, r1
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	81 f1       	breq	.+96     	; 0x1e60 <divide_real+0x148>
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	ba 01       	movw	r22, r20
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	44 0f       	add	r20, r20
    1e0e:	55 1f       	adc	r21, r21
    1e10:	66 1f       	adc	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	db 01       	movw	r26, r22
    1e16:	ca 01       	movw	r24, r20
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	aa 1f       	adc	r26, r26
    1e1e:	bb 1f       	adc	r27, r27
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	aa 1f       	adc	r26, r26
    1e26:	bb 1f       	adc	r27, r27
    1e28:	84 0f       	add	r24, r20
    1e2a:	95 1f       	adc	r25, r21
    1e2c:	a6 1f       	adc	r26, r22
    1e2e:	b7 1f       	adc	r27, r23
    1e30:	f6 01       	movw	r30, r12
    1e32:	84 87       	std	Z+12, r24	; 0x0c
    1e34:	95 87       	std	Z+13, r25	; 0x0d
    1e36:	a6 87       	std	Z+14, r26	; 0x0e
    1e38:	b7 87       	std	Z+15, r27	; 0x0f
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	81 81       	ldd	r24, Z+1	; 0x01
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	81 83       	std	Z+1, r24	; 0x01
    1e42:	f6 01       	movw	r30, r12
    1e44:	64 81       	ldd	r22, Z+4	; 0x04
    1e46:	75 81       	ldd	r23, Z+5	; 0x05
    1e48:	86 81       	ldd	r24, Z+6	; 0x06
    1e4a:	97 81       	ldd	r25, Z+7	; 0x07
    1e4c:	24 85       	ldd	r18, Z+12	; 0x0c
    1e4e:	35 85       	ldd	r19, Z+13	; 0x0d
    1e50:	46 85       	ldd	r20, Z+14	; 0x0e
    1e52:	57 85       	ldd	r21, Z+15	; 0x0f
    1e54:	62 17       	cp	r22, r18
    1e56:	73 07       	cpc	r23, r19
    1e58:	84 07       	cpc	r24, r20
    1e5a:	95 07       	cpc	r25, r21
    1e5c:	a8 f6       	brcc	.-86     	; 0x1e08 <divide_real+0xf0>
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <divide_real+0x150>
    1e60:	21 e0       	ldi	r18, 0x01	; 1
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
Fraction_to_Binary_D(data[1], data[3],  &RHSofBP_LB[1], &RHSofBP_HB[1]);
    1e68:	fe 01       	movw	r30, r28
    1e6a:	39 96       	adiw	r30, 0x09	; 9
    1e6c:	7f 01       	movw	r14, r30
    1e6e:	8e 01       	movw	r16, r28
    1e70:	0d 5f       	subi	r16, 0xFD	; 253
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

exponent[2] = exponent[0] - exponent[1];
    1e78:	f5 01       	movw	r30, r10
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	89 1b       	sub	r24, r25
    1e80:	82 83       	std	Z+2, r24	; 0x02

RHSofDP = divide_scientific(exponent,  RHSofBP_LB, RHSofBP_HB);
    1e82:	ae 01       	movw	r20, r28
    1e84:	49 5f       	subi	r20, 0xF9	; 249
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	be 01       	movw	r22, r28
    1e8a:	6f 5f       	subi	r22, 0xFF	; 255
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8e:	c5 01       	movw	r24, r10
    1e90:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <divide_scientific>
return RHSofDP;}
    1e94:	2c 96       	adiw	r28, 0x0c	; 12
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	bf 90       	pop	r11
    1eb2:	af 90       	pop	r10
    1eb4:	08 95       	ret

00001eb6 <multiply_real>:



/**************************************************************************************************/
unsigned long multiply_real(unsigned long *data, signed char *exponent ){		
    1eb6:	af 92       	push	r10
    1eb8:	bf 92       	push	r11
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	2c 97       	sbiw	r28, 0x0c	; 12
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	6c 01       	movw	r12, r24
    1edc:	5b 01       	movw	r10, r22
unsigned int  RHSofBP_LB[3], RHSofBP_HB[3];
unsigned long  RHSofDP;

//**********Convert data[1] to scientific notation**********

data[2] = 1; while (data[1] >= data[2]) {data[2] = data[2] * 10; exponent[1]++;}
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	80 87       	std	Z+8, r24	; 0x08
    1eea:	91 87       	std	Z+9, r25	; 0x09
    1eec:	a2 87       	std	Z+10, r26	; 0x0a
    1eee:	b3 87       	std	Z+11, r27	; 0x0b
    1ef0:	64 81       	ldd	r22, Z+4	; 0x04
    1ef2:	75 81       	ldd	r23, Z+5	; 0x05
    1ef4:	86 81       	ldd	r24, Z+6	; 0x06
    1ef6:	97 81       	ldd	r25, Z+7	; 0x07
    1ef8:	61 15       	cp	r22, r1
    1efa:	71 05       	cpc	r23, r1
    1efc:	81 05       	cpc	r24, r1
    1efe:	91 05       	cpc	r25, r1
    1f00:	81 f1       	breq	.+96     	; 0x1f62 <multiply_real+0xac>
    1f02:	21 e0       	ldi	r18, 0x01	; 1
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	ba 01       	movw	r22, r20
    1f0c:	a9 01       	movw	r20, r18
    1f0e:	44 0f       	add	r20, r20
    1f10:	55 1f       	adc	r21, r21
    1f12:	66 1f       	adc	r22, r22
    1f14:	77 1f       	adc	r23, r23
    1f16:	db 01       	movw	r26, r22
    1f18:	ca 01       	movw	r24, r20
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	aa 1f       	adc	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	aa 1f       	adc	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	84 0f       	add	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	a6 1f       	adc	r26, r22
    1f30:	b7 1f       	adc	r27, r23
    1f32:	f6 01       	movw	r30, r12
    1f34:	80 87       	std	Z+8, r24	; 0x08
    1f36:	91 87       	std	Z+9, r25	; 0x09
    1f38:	a2 87       	std	Z+10, r26	; 0x0a
    1f3a:	b3 87       	std	Z+11, r27	; 0x0b
    1f3c:	f5 01       	movw	r30, r10
    1f3e:	81 81       	ldd	r24, Z+1	; 0x01
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	81 83       	std	Z+1, r24	; 0x01
    1f44:	f6 01       	movw	r30, r12
    1f46:	64 81       	ldd	r22, Z+4	; 0x04
    1f48:	75 81       	ldd	r23, Z+5	; 0x05
    1f4a:	86 81       	ldd	r24, Z+6	; 0x06
    1f4c:	97 81       	ldd	r25, Z+7	; 0x07
    1f4e:	20 85       	ldd	r18, Z+8	; 0x08
    1f50:	31 85       	ldd	r19, Z+9	; 0x09
    1f52:	42 85       	ldd	r20, Z+10	; 0x0a
    1f54:	53 85       	ldd	r21, Z+11	; 0x0b
    1f56:	62 17       	cp	r22, r18
    1f58:	73 07       	cpc	r23, r19
    1f5a:	84 07       	cpc	r24, r20
    1f5c:	95 07       	cpc	r25, r21
    1f5e:	a8 f6       	brcc	.-86     	; 0x1f0a <multiply_real+0x54>
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <multiply_real+0xb4>
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	50 e0       	ldi	r21, 0x00	; 0
Fraction_to_Binary_D(data[1], data[2],  &RHSofBP_LB[0], &RHSofBP_HB[0]);
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	37 96       	adiw	r30, 0x07	; 7
    1f6e:	7f 01       	movw	r14, r30
    1f70:	8e 01       	movw	r16, r28
    1f72:	0f 5f       	subi	r16, 0xFF	; 255
    1f74:	1f 4f       	sbci	r17, 0xFF	; 255
    1f76:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

//**********Convert reciprocal of data[0] to scientific notation**********

data[3] = 1; while (data[0] >= data[3]) {data[3] = data[3] * 10; exponent[0]++;} data[3] = data[3]/10; exponent[0]--;	
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	f6 01       	movw	r30, r12
    1f84:	84 87       	std	Z+12, r24	; 0x0c
    1f86:	95 87       	std	Z+13, r25	; 0x0d
    1f88:	a6 87       	std	Z+14, r26	; 0x0e
    1f8a:	b7 87       	std	Z+15, r27	; 0x0f
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	a2 81       	ldd	r26, Z+2	; 0x02
    1f92:	b3 81       	ldd	r27, Z+3	; 0x03
    1f94:	89 2b       	or	r24, r25
    1f96:	8a 2b       	or	r24, r26
    1f98:	8b 2b       	or	r24, r27
    1f9a:	81 f1       	breq	.+96     	; 0x1ffc <multiply_real+0x146>
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	9d 01       	movw	r18, r26
    1fb4:	00 0f       	add	r16, r16
    1fb6:	11 1f       	adc	r17, r17
    1fb8:	22 1f       	adc	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	00 0f       	add	r16, r16
    1fbe:	11 1f       	adc	r17, r17
    1fc0:	22 1f       	adc	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	80 0f       	add	r24, r16
    1fc6:	91 1f       	adc	r25, r17
    1fc8:	a2 1f       	adc	r26, r18
    1fca:	b3 1f       	adc	r27, r19
    1fcc:	f6 01       	movw	r30, r12
    1fce:	84 87       	std	Z+12, r24	; 0x0c
    1fd0:	95 87       	std	Z+13, r25	; 0x0d
    1fd2:	a6 87       	std	Z+14, r26	; 0x0e
    1fd4:	b7 87       	std	Z+15, r27	; 0x0f
    1fd6:	f5 01       	movw	r30, r10
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 5f       	subi	r24, 0xFF	; 255
    1fdc:	80 83       	st	Z, r24
    1fde:	f6 01       	movw	r30, r12
    1fe0:	64 85       	ldd	r22, Z+12	; 0x0c
    1fe2:	75 85       	ldd	r23, Z+13	; 0x0d
    1fe4:	86 85       	ldd	r24, Z+14	; 0x0e
    1fe6:	97 85       	ldd	r25, Z+15	; 0x0f
    1fe8:	00 81       	ld	r16, Z
    1fea:	11 81       	ldd	r17, Z+1	; 0x01
    1fec:	22 81       	ldd	r18, Z+2	; 0x02
    1fee:	33 81       	ldd	r19, Z+3	; 0x03
    1ff0:	06 17       	cp	r16, r22
    1ff2:	17 07       	cpc	r17, r23
    1ff4:	28 07       	cpc	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	a8 f6       	brcc	.-86     	; 0x1fa4 <multiply_real+0xee>
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <multiply_real+0x14e>
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	2a e0       	ldi	r18, 0x0A	; 10
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    2010:	f6 01       	movw	r30, r12
    2012:	24 87       	std	Z+12, r18	; 0x0c
    2014:	35 87       	std	Z+13, r19	; 0x0d
    2016:	46 87       	std	Z+14, r20	; 0x0e
    2018:	57 87       	std	Z+15, r21	; 0x0f
    201a:	f5 01       	movw	r30, r10
    201c:	80 81       	ld	r24, Z
    201e:	81 50       	subi	r24, 0x01	; 1
    2020:	80 83       	st	Z, r24

if(data[0] == data[3]){data[0] = data[0] * 10; exponent[0]--; }						//detect values of 1,10,100,1000 etc for Num_1
    2022:	f6 01       	movw	r30, r12
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	a2 81       	ldd	r26, Z+2	; 0x02
    202a:	b3 81       	ldd	r27, Z+3	; 0x03
    202c:	44 85       	ldd	r20, Z+12	; 0x0c
    202e:	55 85       	ldd	r21, Z+13	; 0x0d
    2030:	66 85       	ldd	r22, Z+14	; 0x0e
    2032:	77 85       	ldd	r23, Z+15	; 0x0f
    2034:	84 17       	cp	r24, r20
    2036:	95 07       	cpc	r25, r21
    2038:	a6 07       	cpc	r26, r22
    203a:	b7 07       	cpc	r27, r23
    203c:	d1 f4       	brne	.+52     	; 0x2072 <multiply_real+0x1bc>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	aa 1f       	adc	r26, r26
    2044:	bb 1f       	adc	r27, r27
    2046:	ac 01       	movw	r20, r24
    2048:	bd 01       	movw	r22, r26
    204a:	44 0f       	add	r20, r20
    204c:	55 1f       	adc	r21, r21
    204e:	66 1f       	adc	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	44 0f       	add	r20, r20
    2054:	55 1f       	adc	r21, r21
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	84 0f       	add	r24, r20
    205c:	95 1f       	adc	r25, r21
    205e:	a6 1f       	adc	r26, r22
    2060:	b7 1f       	adc	r27, r23
    2062:	80 83       	st	Z, r24
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	a2 83       	std	Z+2, r26	; 0x02
    2068:	b3 83       	std	Z+3, r27	; 0x03
    206a:	f5 01       	movw	r30, r10
    206c:	80 81       	ld	r24, Z
    206e:	81 50       	subi	r24, 0x01	; 1
    2070:	80 83       	st	Z, r24

Fraction_to_Binary_D(data[3], data[0], &RHSofBP_LB[1],  &RHSofBP_HB[1]);
    2072:	f6 01       	movw	r30, r12
    2074:	20 81       	ld	r18, Z
    2076:	31 81       	ldd	r19, Z+1	; 0x01
    2078:	42 81       	ldd	r20, Z+2	; 0x02
    207a:	53 81       	ldd	r21, Z+3	; 0x03
    207c:	64 85       	ldd	r22, Z+12	; 0x0c
    207e:	75 85       	ldd	r23, Z+13	; 0x0d
    2080:	86 85       	ldd	r24, Z+14	; 0x0e
    2082:	97 85       	ldd	r25, Z+15	; 0x0f
    2084:	fe 01       	movw	r30, r28
    2086:	39 96       	adiw	r30, 0x09	; 9
    2088:	7f 01       	movw	r14, r30
    208a:	8e 01       	movw	r16, r28
    208c:	0d 5f       	subi	r16, 0xFD	; 253
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

exponent[2] = exponent[1] + exponent[0];
    2094:	f5 01       	movw	r30, r10
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	80 81       	ld	r24, Z
    209a:	89 0f       	add	r24, r25
    209c:	82 83       	std	Z+2, r24	; 0x02
RHSofDP = divide_scientific(exponent,  RHSofBP_LB, RHSofBP_HB);
    209e:	ae 01       	movw	r20, r28
    20a0:	49 5f       	subi	r20, 0xF9	; 249
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	be 01       	movw	r22, r28
    20a6:	6f 5f       	subi	r22, 0xFF	; 255
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	c5 01       	movw	r24, r10
    20ac:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <divide_scientific>

return RHSofDP;}
    20b0:	2c 96       	adiw	r28, 0x0c	; 12
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	08 95       	ret

000020d2 <product_loop>:



/**************************************************************************************************/
unsigned long product_loop(unsigned long *data, signed char *exponent, char power ){
    20d2:	2f 92       	push	r2
    20d4:	3f 92       	push	r3
    20d6:	4f 92       	push	r4
    20d8:	5f 92       	push	r5
    20da:	6f 92       	push	r6
    20dc:	7f 92       	push	r7
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	65 97       	sbiw	r28, 0x15	; 21
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	6c 01       	movw	r12, r24
    2108:	1b 01       	movw	r2, r22
    210a:	b4 2e       	mov	r11, r20
Overflow_1 =0;
RHSofDP = 0;

/**********Convert data[1] to scientific notation**********/

data[2] = 1; while (data[1] >= data[2]) {data[2] = data[2] * 10; exponent[1]++;}
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e0       	ldi	r26, 0x00	; 0
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	f6 01       	movw	r30, r12
    2116:	80 87       	std	Z+8, r24	; 0x08
    2118:	91 87       	std	Z+9, r25	; 0x09
    211a:	a2 87       	std	Z+10, r26	; 0x0a
    211c:	b3 87       	std	Z+11, r27	; 0x0b
    211e:	64 81       	ldd	r22, Z+4	; 0x04
    2120:	75 81       	ldd	r23, Z+5	; 0x05
    2122:	86 81       	ldd	r24, Z+6	; 0x06
    2124:	97 81       	ldd	r25, Z+7	; 0x07
    2126:	61 15       	cp	r22, r1
    2128:	71 05       	cpc	r23, r1
    212a:	81 05       	cpc	r24, r1
    212c:	91 05       	cpc	r25, r1
    212e:	91 f1       	breq	.+100    	; 0x2194 <product_loop+0xc2>
    2130:	21 e0       	ldi	r18, 0x01	; 1
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	ba 01       	movw	r22, r20
    213a:	a9 01       	movw	r20, r18
    213c:	44 0f       	add	r20, r20
    213e:	55 1f       	adc	r21, r21
    2140:	66 1f       	adc	r22, r22
    2142:	77 1f       	adc	r23, r23
    2144:	db 01       	movw	r26, r22
    2146:	ca 01       	movw	r24, r20
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	aa 1f       	adc	r26, r26
    214e:	bb 1f       	adc	r27, r27
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	aa 1f       	adc	r26, r26
    2156:	bb 1f       	adc	r27, r27
    2158:	84 0f       	add	r24, r20
    215a:	95 1f       	adc	r25, r21
    215c:	a6 1f       	adc	r26, r22
    215e:	b7 1f       	adc	r27, r23
    2160:	f6 01       	movw	r30, r12
    2162:	80 87       	std	Z+8, r24	; 0x08
    2164:	91 87       	std	Z+9, r25	; 0x09
    2166:	a2 87       	std	Z+10, r26	; 0x0a
    2168:	b3 87       	std	Z+11, r27	; 0x0b
    216a:	d1 01       	movw	r26, r2
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	8c 91       	ld	r24, X
    2170:	11 97       	sbiw	r26, 0x01	; 1
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	11 96       	adiw	r26, 0x01	; 1
    2176:	8c 93       	st	X, r24
    2178:	64 81       	ldd	r22, Z+4	; 0x04
    217a:	75 81       	ldd	r23, Z+5	; 0x05
    217c:	86 81       	ldd	r24, Z+6	; 0x06
    217e:	97 81       	ldd	r25, Z+7	; 0x07
    2180:	20 85       	ldd	r18, Z+8	; 0x08
    2182:	31 85       	ldd	r19, Z+9	; 0x09
    2184:	42 85       	ldd	r20, Z+10	; 0x0a
    2186:	53 85       	ldd	r21, Z+11	; 0x0b
    2188:	62 17       	cp	r22, r18
    218a:	73 07       	cpc	r23, r19
    218c:	84 07       	cpc	r24, r20
    218e:	95 07       	cpc	r25, r21
    2190:	98 f6       	brcc	.-90     	; 0x2138 <product_loop+0x66>
    2192:	04 c0       	rjmp	.+8      	; 0x219c <product_loop+0xca>
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	50 e0       	ldi	r21, 0x00	; 0
Fraction_to_Binary_D(data[1], data[2],  &RHSofBP_LB[1], &RHSofBP_HB[1]);
    219c:	fe 01       	movw	r30, r28
    219e:	39 96       	adiw	r30, 0x09	; 9
    21a0:	7f 01       	movw	r14, r30
    21a2:	8e 01       	movw	r16, r28
    21a4:	0d 5f       	subi	r16, 0xFD	; 253
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

/**********Convert reciprocal of data[0] to scientific notation**********/
data_store = data[0];		//subroutine must not be allowed to change data[0];
    21ac:	d6 01       	movw	r26, r12
    21ae:	4d 90       	ld	r4, X+
    21b0:	5d 90       	ld	r5, X+
    21b2:	6d 90       	ld	r6, X+
    21b4:	7c 90       	ld	r7, X

data[3] = 1; while (data[0] >= data[3]) {data[3] = data[3] * 10; exponent[0]++;} data[3] = data[3]/10; exponent[0]--;	
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	f6 01       	movw	r30, r12
    21c0:	84 87       	std	Z+12, r24	; 0x0c
    21c2:	95 87       	std	Z+13, r25	; 0x0d
    21c4:	a6 87       	std	Z+14, r26	; 0x0e
    21c6:	b7 87       	std	Z+15, r27	; 0x0f
    21c8:	41 14       	cp	r4, r1
    21ca:	51 04       	cpc	r5, r1
    21cc:	61 04       	cpc	r6, r1
    21ce:	71 04       	cpc	r7, r1
    21d0:	79 f1       	breq	.+94     	; 0x2230 <product_loop+0x15e>
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	ab 01       	movw	r20, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	44 0f       	add	r20, r20
    21e0:	55 1f       	adc	r21, r21
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	db 01       	movw	r26, r22
    21e8:	ca 01       	movw	r24, r20
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	aa 1f       	adc	r26, r26
    21f0:	bb 1f       	adc	r27, r27
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	aa 1f       	adc	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	84 0f       	add	r24, r20
    21fc:	95 1f       	adc	r25, r21
    21fe:	a6 1f       	adc	r26, r22
    2200:	b7 1f       	adc	r27, r23
    2202:	f6 01       	movw	r30, r12
    2204:	84 87       	std	Z+12, r24	; 0x0c
    2206:	95 87       	std	Z+13, r25	; 0x0d
    2208:	a6 87       	std	Z+14, r26	; 0x0e
    220a:	b7 87       	std	Z+15, r27	; 0x0f
    220c:	d1 01       	movw	r26, r2
    220e:	8c 91       	ld	r24, X
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8c 93       	st	X, r24
    2214:	64 85       	ldd	r22, Z+12	; 0x0c
    2216:	75 85       	ldd	r23, Z+13	; 0x0d
    2218:	86 85       	ldd	r24, Z+14	; 0x0e
    221a:	97 85       	ldd	r25, Z+15	; 0x0f
    221c:	00 81       	ld	r16, Z
    221e:	11 81       	ldd	r17, Z+1	; 0x01
    2220:	22 81       	ldd	r18, Z+2	; 0x02
    2222:	33 81       	ldd	r19, Z+3	; 0x03
    2224:	06 17       	cp	r16, r22
    2226:	17 07       	cpc	r17, r23
    2228:	28 07       	cpc	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	b0 f6       	brcc	.-84     	; 0x21da <product_loop+0x108>
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <product_loop+0x166>
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	2a e0       	ldi	r18, 0x0A	; 10
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    2244:	f6 01       	movw	r30, r12
    2246:	24 87       	std	Z+12, r18	; 0x0c
    2248:	35 87       	std	Z+13, r19	; 0x0d
    224a:	46 87       	std	Z+14, r20	; 0x0e
    224c:	57 87       	std	Z+15, r21	; 0x0f
    224e:	d1 01       	movw	r26, r2
    2250:	8c 91       	ld	r24, X
    2252:	81 50       	subi	r24, 0x01	; 1
    2254:	8c 93       	st	X, r24
if(data[0] == data[3]){data[0] = data[0] * 10; exponent[0]--; }					//detect values of 1,10,100,1000 etc for Num_1
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	a2 81       	ldd	r26, Z+2	; 0x02
    225c:	b3 81       	ldd	r27, Z+3	; 0x03
    225e:	44 85       	ldd	r20, Z+12	; 0x0c
    2260:	55 85       	ldd	r21, Z+13	; 0x0d
    2262:	66 85       	ldd	r22, Z+14	; 0x0e
    2264:	77 85       	ldd	r23, Z+15	; 0x0f
    2266:	84 17       	cp	r24, r20
    2268:	95 07       	cpc	r25, r21
    226a:	a6 07       	cpc	r26, r22
    226c:	b7 07       	cpc	r27, r23
    226e:	d1 f4       	brne	.+52     	; 0x22a4 <product_loop+0x1d2>
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	aa 1f       	adc	r26, r26
    2276:	bb 1f       	adc	r27, r27
    2278:	ac 01       	movw	r20, r24
    227a:	bd 01       	movw	r22, r26
    227c:	44 0f       	add	r20, r20
    227e:	55 1f       	adc	r21, r21
    2280:	66 1f       	adc	r22, r22
    2282:	77 1f       	adc	r23, r23
    2284:	44 0f       	add	r20, r20
    2286:	55 1f       	adc	r21, r21
    2288:	66 1f       	adc	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	84 0f       	add	r24, r20
    228e:	95 1f       	adc	r25, r21
    2290:	a6 1f       	adc	r26, r22
    2292:	b7 1f       	adc	r27, r23
    2294:	80 83       	st	Z, r24
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	a2 83       	std	Z+2, r26	; 0x02
    229a:	b3 83       	std	Z+3, r27	; 0x03
    229c:	d1 01       	movw	r26, r2
    229e:	8c 91       	ld	r24, X
    22a0:	81 50       	subi	r24, 0x01	; 1
    22a2:	8c 93       	st	X, r24
Fraction_to_Binary_D(data[3], data[0], &RHSofBP_LB[0],  &RHSofBP_HB[0]);
    22a4:	f6 01       	movw	r30, r12
    22a6:	20 81       	ld	r18, Z
    22a8:	31 81       	ldd	r19, Z+1	; 0x01
    22aa:	42 81       	ldd	r20, Z+2	; 0x02
    22ac:	53 81       	ldd	r21, Z+3	; 0x03
    22ae:	64 85       	ldd	r22, Z+12	; 0x0c
    22b0:	75 85       	ldd	r23, Z+13	; 0x0d
    22b2:	86 85       	ldd	r24, Z+14	; 0x0e
    22b4:	97 85       	ldd	r25, Z+15	; 0x0f
    22b6:	8e 01       	movw	r16, r28
    22b8:	09 5f       	subi	r16, 0xF9	; 249
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	78 01       	movw	r14, r16
    22be:	06 50       	subi	r16, 0x06	; 6
    22c0:	11 09       	sbc	r17, r1
    22c2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>

data[0] = data_store;																//restore value of data[0] which may have been changed
    22c6:	d6 01       	movw	r26, r12
    22c8:	4d 92       	st	X+, r4
    22ca:	5d 92       	st	X+, r5
    22cc:	6d 92       	st	X+, r6
    22ce:	7c 92       	st	X, r7
    22d0:	13 97       	sbiw	r26, 0x03	; 3

Denominator = 	RHSofBP_HB[0]; Denominator  = (Denominator << 16) + RHSofBP_LB[0];
    22d2:	2f 81       	ldd	r18, Y+7	; 0x07
    22d4:	38 85       	ldd	r19, Y+8	; 0x08
    22d6:	c9 01       	movw	r24, r18
    22d8:	a0 e0       	ldi	r26, 0x00	; 0
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	dc 01       	movw	r26, r24
    22de:	99 27       	eor	r25, r25
    22e0:	88 27       	eor	r24, r24
    22e2:	49 81       	ldd	r20, Y+1	; 0x01
    22e4:	5a 81       	ldd	r21, Y+2	; 0x02
    22e6:	7c 01       	movw	r14, r24
    22e8:	8d 01       	movw	r16, r26
    22ea:	e4 0e       	add	r14, r20
    22ec:	f5 1e       	adc	r15, r21
    22ee:	01 1d       	adc	r16, r1
    22f0:	11 1d       	adc	r17, r1
    22f2:	e9 8a       	std	Y+17, r14	; 0x11
    22f4:	fa 8a       	std	Y+18, r15	; 0x12
    22f6:	0b 8b       	std	Y+19, r16	; 0x13
    22f8:	1c 8b       	std	Y+20, r17	; 0x14
if(RHSofBP_HB[0] & (1 << 15)) {Denominator = Denominator >> 1; Overflow_1 =1;}
    22fa:	33 23       	and	r19, r19
    22fc:	5c f4       	brge	.+22     	; 0x2314 <product_loop+0x242>
    22fe:	16 95       	lsr	r17
    2300:	07 95       	ror	r16
    2302:	f7 94       	ror	r15
    2304:	e7 94       	ror	r14
    2306:	e9 8a       	std	Y+17, r14	; 0x11
    2308:	fa 8a       	std	Y+18, r15	; 0x12
    230a:	0b 8b       	std	Y+19, r16	; 0x13
    230c:	1c 8b       	std	Y+20, r17	; 0x14
    230e:	01 e0       	ldi	r16, 0x01	; 1
    2310:	0d 8b       	std	Y+21, r16	; 0x15
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <product_loop+0x244>
unsigned long product_loop(unsigned long *data, signed char *exponent, char power ){
unsigned int  RHSofBP_LB[3], RHSofBP_HB[3], res_LHS_BP;
unsigned long  Denominator, Numerator, numerator_update, scale_factor,data_store;
unsigned long  RHSofDP;
char Overflow_1;
Overflow_1 =0;
    2314:	1d 8a       	std	Y+21, r1	; 0x15
data[0] = data_store;																//restore value of data[0] which may have been changed

Denominator = 	RHSofBP_HB[0]; Denominator  = (Denominator << 16) + RHSofBP_LB[0];
if(RHSofBP_HB[0] & (1 << 15)) {Denominator = Denominator >> 1; Overflow_1 =1;}

for(int p = 0; p <= (power-2); p++){ //setup repeated multiplication
    2316:	8b 2d       	mov	r24, r11
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	2c 01       	movw	r4, r24
    231c:	12 e0       	ldi	r17, 0x02	; 2
    231e:	41 1a       	sub	r4, r17
    2320:	51 08       	sbc	r5, r1
    2322:	0a f4       	brpl	.+2      	; 0x2326 <product_loop+0x254>
    2324:	f0 c0       	rjmp	.+480    	; 0x2506 <product_loop+0x434>
    2326:	c1 2c       	mov	r12, r1
    2328:	d1 2c       	mov	r13, r1

/****************Divide Num_2 by the reciprocal of Num_1 to get power****************/

Numerator = 	RHSofBP_HB[1]; Numerator = 	 (Numerator << 16) + RHSofBP_LB[1];
    232a:	69 85       	ldd	r22, Y+9	; 0x09
    232c:	7a 85       	ldd	r23, Y+10	; 0x0a
    232e:	cb 01       	movw	r24, r22
    2330:	a0 e0       	ldi	r26, 0x00	; 0
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	dc 01       	movw	r26, r24
    2336:	99 27       	eor	r25, r25
    2338:	88 27       	eor	r24, r24
    233a:	2b 81       	ldd	r18, Y+3	; 0x03
    233c:	3c 81       	ldd	r19, Y+4	; 0x04
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	62 0f       	add	r22, r18
    2344:	73 1f       	adc	r23, r19
    2346:	81 1d       	adc	r24, r1
    2348:	91 1d       	adc	r25, r1
if ((Overflow_1 ==1) )Numerator = Numerator >> 1;		//&& (p == 0)
    234a:	2d 89       	ldd	r18, Y+21	; 0x15
    234c:	21 30       	cpi	r18, 0x01	; 1
    234e:	21 f4       	brne	.+8      	; 0x2358 <product_loop+0x286>
    2350:	96 95       	lsr	r25
    2352:	87 95       	ror	r24
    2354:	77 95       	ror	r23
    2356:	67 95       	ror	r22
exponent[2] = exponent[1] + exponent[0];
    2358:	d1 01       	movw	r26, r2
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	3c 91       	ld	r19, X
    235e:	11 97       	sbiw	r26, 0x01	; 1
    2360:	2c 91       	ld	r18, X
    2362:	23 0f       	add	r18, r19
    2364:	12 96       	adiw	r26, 0x02	; 2
    2366:	2c 93       	st	X, r18

res_LHS_BP = Numerator / Denominator;																//Obtain LHS of product
    2368:	29 89       	ldd	r18, Y+17	; 0x11
    236a:	3a 89       	ldd	r19, Y+18	; 0x12
    236c:	4b 89       	ldd	r20, Y+19	; 0x13
    236e:	5c 89       	ldd	r21, Y+20	; 0x14
    2370:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    2374:	2d 87       	std	Y+13, r18	; 0x0d
    2376:	3e 87       	std	Y+14, r19	; 0x0e
    2378:	4f 87       	std	Y+15, r20	; 0x0f
    237a:	58 8b       	std	Y+16, r21	; 0x10
    237c:	6d 84       	ldd	r6, Y+13	; 0x0d
    237e:	7e 84       	ldd	r7, Y+14	; 0x0e
Fraction_to_Binary_D(Numerator % Denominator, Denominator, &RHSofBP_LB[2], &RHSofBP_HB[2] );		//Obtain RHS of product
    2380:	fe 01       	movw	r30, r28
    2382:	3b 96       	adiw	r30, 0x0b	; 11
    2384:	7f 01       	movw	r14, r30
    2386:	8e 01       	movw	r16, r28
    2388:	0b 5f       	subi	r16, 0xFB	; 251
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	29 89       	ldd	r18, Y+17	; 0x11
    238e:	3a 89       	ldd	r19, Y+18	; 0x12
    2390:	4b 89       	ldd	r20, Y+19	; 0x13
    2392:	5c 89       	ldd	r21, Y+20	; 0x14
    2394:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>
RHSofDP = Binary_points_to_Decimal_L ( RHSofBP_LB[2], RHSofBP_HB[2]);				//Convert RHS to decimal notation
    2398:	6b 85       	ldd	r22, Y+11	; 0x0b
    239a:	7c 85       	ldd	r23, Y+12	; 0x0c
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Binary_points_to_Decimal_L>
    23a4:	4b 01       	movw	r8, r22
    23a6:	5c 01       	movw	r10, r24
if(res_LHS_BP){RHSofDP = RHSofDP/10;												//shift LHS of product to RHS to obtain scientific notation
    23a8:	67 28       	or	r6, r7
    23aa:	09 f4       	brne	.+2      	; 0x23ae <product_loop+0x2dc>
    23ac:	6b c0       	rjmp	.+214    	; 0x2484 <product_loop+0x3b2>
    23ae:	2a e0       	ldi	r18, 0x0A	; 10
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    23ba:	49 01       	movw	r8, r18
    23bc:	5a 01       	movw	r10, r20
switch (res_LHS_BP){
    23be:	ed 84       	ldd	r14, Y+13	; 0x0d
    23c0:	fe 84       	ldd	r15, Y+14	; 0x0e
    23c2:	f7 01       	movw	r30, r14
    23c4:	31 97       	sbiw	r30, 0x01	; 1
    23c6:	e9 30       	cpi	r30, 0x09	; 9
    23c8:	f1 05       	cpc	r31, r1
    23ca:	08 f0       	brcs	.+2      	; 0x23ce <product_loop+0x2fc>
    23cc:	54 c0       	rjmp	.+168    	; 0x2476 <product_loop+0x3a4>
    23ce:	e4 50       	subi	r30, 0x04	; 4
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 1:  RHSofDP = RHSofDP + 100000000;break;
    23d6:	49 01       	movw	r8, r18
    23d8:	5a 01       	movw	r10, r20
    23da:	0f e1       	ldi	r16, 0x1F	; 31
    23dc:	90 1a       	sub	r9, r16
    23de:	0a e0       	ldi	r16, 0x0A	; 10
    23e0:	a0 0a       	sbc	r10, r16
    23e2:	0a ef       	ldi	r16, 0xFA	; 250
    23e4:	b0 0a       	sbc	r11, r16
    23e6:	47 c0       	rjmp	.+142    	; 0x2476 <product_loop+0x3a4>
case 2:  RHSofDP = RHSofDP + 200000000;break;
    23e8:	49 01       	movw	r8, r18
    23ea:	5a 01       	movw	r10, r20
    23ec:	1e e3       	ldi	r17, 0x3E	; 62
    23ee:	91 1a       	sub	r9, r17
    23f0:	14 e1       	ldi	r17, 0x14	; 20
    23f2:	a1 0a       	sbc	r10, r17
    23f4:	14 ef       	ldi	r17, 0xF4	; 244
    23f6:	b1 0a       	sbc	r11, r17
    23f8:	3e c0       	rjmp	.+124    	; 0x2476 <product_loop+0x3a4>
case 3:  RHSofDP = RHSofDP + 300000000;break;
    23fa:	49 01       	movw	r8, r18
    23fc:	5a 01       	movw	r10, r20
    23fe:	6d e5       	ldi	r22, 0x5D	; 93
    2400:	96 1a       	sub	r9, r22
    2402:	6e e1       	ldi	r22, 0x1E	; 30
    2404:	a6 0a       	sbc	r10, r22
    2406:	6e ee       	ldi	r22, 0xEE	; 238
    2408:	b6 0a       	sbc	r11, r22
    240a:	35 c0       	rjmp	.+106    	; 0x2476 <product_loop+0x3a4>
case 4:  RHSofDP = RHSofDP + 400000000;break;
    240c:	49 01       	movw	r8, r18
    240e:	5a 01       	movw	r10, r20
    2410:	7c e7       	ldi	r23, 0x7C	; 124
    2412:	97 1a       	sub	r9, r23
    2414:	78 e2       	ldi	r23, 0x28	; 40
    2416:	a7 0a       	sbc	r10, r23
    2418:	78 ee       	ldi	r23, 0xE8	; 232
    241a:	b7 0a       	sbc	r11, r23
    241c:	2c c0       	rjmp	.+88     	; 0x2476 <product_loop+0x3a4>
case 5:  RHSofDP = RHSofDP + 500000000;break;
    241e:	49 01       	movw	r8, r18
    2420:	5a 01       	movw	r10, r20
    2422:	8b e9       	ldi	r24, 0x9B	; 155
    2424:	98 1a       	sub	r9, r24
    2426:	82 e3       	ldi	r24, 0x32	; 50
    2428:	a8 0a       	sbc	r10, r24
    242a:	82 ee       	ldi	r24, 0xE2	; 226
    242c:	b8 0a       	sbc	r11, r24
    242e:	23 c0       	rjmp	.+70     	; 0x2476 <product_loop+0x3a4>
case 6:  RHSofDP = RHSofDP + 600000000;break;
    2430:	49 01       	movw	r8, r18
    2432:	5a 01       	movw	r10, r20
    2434:	9a eb       	ldi	r25, 0xBA	; 186
    2436:	99 1a       	sub	r9, r25
    2438:	9c e3       	ldi	r25, 0x3C	; 60
    243a:	a9 0a       	sbc	r10, r25
    243c:	9c ed       	ldi	r25, 0xDC	; 220
    243e:	b9 0a       	sbc	r11, r25
    2440:	1a c0       	rjmp	.+52     	; 0x2476 <product_loop+0x3a4>
case 7:  RHSofDP = RHSofDP + 700000000;break;
    2442:	49 01       	movw	r8, r18
    2444:	5a 01       	movw	r10, r20
    2446:	a9 ed       	ldi	r26, 0xD9	; 217
    2448:	9a 1a       	sub	r9, r26
    244a:	a6 e4       	ldi	r26, 0x46	; 70
    244c:	aa 0a       	sbc	r10, r26
    244e:	a6 ed       	ldi	r26, 0xD6	; 214
    2450:	ba 0a       	sbc	r11, r26
    2452:	11 c0       	rjmp	.+34     	; 0x2476 <product_loop+0x3a4>
case 8:  RHSofDP = RHSofDP + 800000000;break;
    2454:	49 01       	movw	r8, r18
    2456:	5a 01       	movw	r10, r20
    2458:	b8 ef       	ldi	r27, 0xF8	; 248
    245a:	9b 1a       	sub	r9, r27
    245c:	b0 e5       	ldi	r27, 0x50	; 80
    245e:	ab 0a       	sbc	r10, r27
    2460:	b0 ed       	ldi	r27, 0xD0	; 208
    2462:	bb 0a       	sbc	r11, r27
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <product_loop+0x3a4>
case 9:  RHSofDP = RHSofDP + 900000000;break;}
    2466:	49 01       	movw	r8, r18
    2468:	5a 01       	movw	r10, r20
    246a:	e7 e1       	ldi	r30, 0x17	; 23
    246c:	9e 1a       	sub	r9, r30
    246e:	eb e5       	ldi	r30, 0x5B	; 91
    2470:	ae 0a       	sbc	r10, r30
    2472:	ea ec       	ldi	r30, 0xCA	; 202
    2474:	be 0a       	sbc	r11, r30
exponent[2]++; res_LHS_BP = 0;}
    2476:	d1 01       	movw	r26, r2
    2478:	12 96       	adiw	r26, 0x02	; 2
    247a:	8c 91       	ld	r24, X
    247c:	12 97       	sbiw	r26, 0x02	; 2
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	12 96       	adiw	r26, 0x02	; 2
    2482:	8c 93       	st	X, r24
numerator_update = RHSofDP; 
scale_factor = 1; while (numerator_update >= scale_factor) {scale_factor = scale_factor * 10; } 
    2484:	81 14       	cp	r8, r1
    2486:	91 04       	cpc	r9, r1
    2488:	a1 04       	cpc	r10, r1
    248a:	b1 04       	cpc	r11, r1
    248c:	01 f1       	breq	.+64     	; 0x24ce <product_loop+0x3fc>
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	ba 01       	movw	r22, r20
    2498:	a9 01       	movw	r20, r18
    249a:	44 0f       	add	r20, r20
    249c:	55 1f       	adc	r21, r21
    249e:	66 1f       	adc	r22, r22
    24a0:	77 1f       	adc	r23, r23
    24a2:	db 01       	movw	r26, r22
    24a4:	ca 01       	movw	r24, r20
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	aa 1f       	adc	r26, r26
    24ac:	bb 1f       	adc	r27, r27
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	aa 1f       	adc	r26, r26
    24b4:	bb 1f       	adc	r27, r27
    24b6:	9a 01       	movw	r18, r20
    24b8:	ab 01       	movw	r20, r22
    24ba:	28 0f       	add	r18, r24
    24bc:	39 1f       	adc	r19, r25
    24be:	4a 1f       	adc	r20, r26
    24c0:	5b 1f       	adc	r21, r27
    24c2:	82 16       	cp	r8, r18
    24c4:	93 06       	cpc	r9, r19
    24c6:	a4 06       	cpc	r10, r20
    24c8:	b5 06       	cpc	r11, r21
    24ca:	28 f7       	brcc	.-54     	; 0x2496 <product_loop+0x3c4>
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <product_loop+0x404>
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	50 e0       	ldi	r21, 0x00	; 0
Fraction_to_Binary_D(numerator_update, scale_factor,  &RHSofBP_LB[1], &RHSofBP_HB[1]);
    24d6:	fe 01       	movw	r30, r28
    24d8:	39 96       	adiw	r30, 0x09	; 9
    24da:	7f 01       	movw	r14, r30
    24dc:	8e 01       	movw	r16, r28
    24de:	0d 5f       	subi	r16, 0xFD	; 253
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	c5 01       	movw	r24, r10
    24e4:	b4 01       	movw	r22, r8
    24e6:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>
exponent[1] = exponent[2];}															//Update numerator
    24ea:	d1 01       	movw	r26, r2
    24ec:	12 96       	adiw	r26, 0x02	; 2
    24ee:	8c 91       	ld	r24, X
    24f0:	12 97       	sbiw	r26, 0x02	; 2
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	8c 93       	st	X, r24
data[0] = data_store;																//restore value of data[0] which may have been changed

Denominator = 	RHSofBP_HB[0]; Denominator  = (Denominator << 16) + RHSofBP_LB[0];
if(RHSofBP_HB[0] & (1 << 15)) {Denominator = Denominator >> 1; Overflow_1 =1;}

for(int p = 0; p <= (power-2); p++){ //setup repeated multiplication
    24f6:	bf ef       	ldi	r27, 0xFF	; 255
    24f8:	cb 1a       	sub	r12, r27
    24fa:	db 0a       	sbc	r13, r27
    24fc:	4c 14       	cp	r4, r12
    24fe:	5d 04       	cpc	r5, r13
    2500:	0c f0       	brlt	.+2      	; 0x2504 <product_loop+0x432>
    2502:	13 cf       	rjmp	.-474    	; 0x232a <product_loop+0x258>
    2504:	03 c0       	rjmp	.+6      	; 0x250c <product_loop+0x43a>
unsigned int  RHSofBP_LB[3], RHSofBP_HB[3], res_LHS_BP;
unsigned long  Denominator, Numerator, numerator_update, scale_factor,data_store;
unsigned long  RHSofDP;
char Overflow_1;
Overflow_1 =0;
RHSofDP = 0;
    2506:	81 2c       	mov	r8, r1
    2508:	91 2c       	mov	r9, r1
    250a:	54 01       	movw	r10, r8
exponent[2]++; res_LHS_BP = 0;}
numerator_update = RHSofDP; 
scale_factor = 1; while (numerator_update >= scale_factor) {scale_factor = scale_factor * 10; } 
Fraction_to_Binary_D(numerator_update, scale_factor,  &RHSofBP_LB[1], &RHSofBP_HB[1]);
exponent[1] = exponent[2];}															//Update numerator
return RHSofDP;}
    250c:	c5 01       	movw	r24, r10
    250e:	b4 01       	movw	r22, r8
    2510:	65 96       	adiw	r28, 0x15	; 21
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	9f 90       	pop	r9
    2532:	8f 90       	pop	r8
    2534:	7f 90       	pop	r7
    2536:	6f 90       	pop	r6
    2538:	5f 90       	pop	r5
    253a:	4f 90       	pop	r4
    253c:	3f 90       	pop	r3
    253e:	2f 90       	pop	r2
    2540:	08 95       	ret

00002542 <any_root>:



/**************************************************************************************************/
unsigned long any_root (unsigned long * number, signed char * exponent){
    2542:	2f 92       	push	r2
    2544:	3f 92       	push	r3
    2546:	4f 92       	push	r4
    2548:	5f 92       	push	r5
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	27 97       	sbiw	r28, 0x07	; 7
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	6c 01       	movw	r12, r24
    2578:	5b 01       	movw	r10, r22
unsigned int  RHSofBP_LB,  RHSofBP_HB, expnt_calculator;
unsigned long  RHSofDP_input, RHSofDP;
signed char expnt_input,expnt_result,temp_0,temp_1;	
signed char root;	

temp_0 = exponent[0];
    257a:	fb 01       	movw	r30, r22
    257c:	f0 81       	ld	r31, Z
    257e:	fe 83       	std	Y+6, r31	; 0x06
temp_1 = exponent[1];
    2580:	fb 01       	movw	r30, r22
    2582:	f1 81       	ldd	r31, Z+1	; 0x01
    2584:	ff 83       	std	Y+7, r31	; 0x07

RHSofDP=0;
expnt_input = exponent[0];
root = exponent[1];

number[3] = 1; while (number[0] >= number[3]) {number[3] = number[3] * 10; expnt_input++;}
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e0       	ldi	r26, 0x00	; 0
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	f6 01       	movw	r30, r12
    2590:	84 87       	std	Z+12, r24	; 0x0c
    2592:	95 87       	std	Z+13, r25	; 0x0d
    2594:	a6 87       	std	Z+14, r26	; 0x0e
    2596:	b7 87       	std	Z+15, r27	; 0x0f
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	61 15       	cp	r22, r1
    25a2:	71 05       	cpc	r23, r1
    25a4:	81 05       	cpc	r24, r1
    25a6:	91 05       	cpc	r25, r1
    25a8:	39 f1       	breq	.+78     	; 0x25f8 <any_root+0xb6>
    25aa:	9e 80       	ldd	r9, Y+6	; 0x06
    25ac:	21 e0       	ldi	r18, 0x01	; 1
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	89 01       	movw	r16, r18
    25b6:	9a 01       	movw	r18, r20
    25b8:	00 0f       	add	r16, r16
    25ba:	11 1f       	adc	r17, r17
    25bc:	22 1f       	adc	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	28 01       	movw	r4, r16
    25c2:	39 01       	movw	r6, r18
    25c4:	44 0c       	add	r4, r4
    25c6:	55 1c       	adc	r5, r5
    25c8:	66 1c       	adc	r6, r6
    25ca:	77 1c       	adc	r7, r7
    25cc:	44 0c       	add	r4, r4
    25ce:	55 1c       	adc	r5, r5
    25d0:	66 1c       	adc	r6, r6
    25d2:	77 1c       	adc	r7, r7
    25d4:	a9 01       	movw	r20, r18
    25d6:	98 01       	movw	r18, r16
    25d8:	24 0d       	add	r18, r4
    25da:	35 1d       	adc	r19, r5
    25dc:	46 1d       	adc	r20, r6
    25de:	57 1d       	adc	r21, r7
    25e0:	93 94       	inc	r9
    25e2:	62 17       	cp	r22, r18
    25e4:	73 07       	cpc	r23, r19
    25e6:	84 07       	cpc	r24, r20
    25e8:	95 07       	cpc	r25, r21
    25ea:	20 f7       	brcc	.-56     	; 0x25b4 <any_root+0x72>
    25ec:	f6 01       	movw	r30, r12
    25ee:	24 87       	std	Z+12, r18	; 0x0c
    25f0:	35 87       	std	Z+13, r19	; 0x0d
    25f2:	46 87       	std	Z+14, r20	; 0x0e
    25f4:	57 87       	std	Z+15, r21	; 0x0f
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <any_root+0xc0>

temp_0 = exponent[0];
temp_1 = exponent[1];

RHSofDP=0;
expnt_input = exponent[0];
    25f8:	9e 80       	ldd	r9, Y+6	; 0x06
root = exponent[1];

number[3] = 1; while (number[0] >= number[3]) {number[3] = number[3] * 10; expnt_input++;}
    25fa:	21 e0       	ldi	r18, 0x01	; 1
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0

Fraction_to_Binary_D(number[0], number[3],  &RHSofBP_LB, &RHSofBP_HB);
    2602:	fe 01       	movw	r30, r28
    2604:	33 96       	adiw	r30, 0x03	; 3
    2606:	7f 01       	movw	r14, r30
    2608:	8e 01       	movw	r16, r28
    260a:	0f 5f       	subi	r16, 0xFF	; 255
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Fraction_to_Binary_D>
RHSofDP_input = Binary_points_to_Decimal_L (RHSofBP_LB,RHSofBP_HB); 
    2612:	6b 81       	ldd	r22, Y+3	; 0x03
    2614:	7c 81       	ldd	r23, Y+4	; 0x04
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <Binary_points_to_Decimal_L>
    261e:	2b 01       	movw	r4, r22
    2620:	3c 01       	movw	r6, r24

number[0] = 1; number[1] = 1; exponent[2] = 0;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	a0 e0       	ldi	r26, 0x00	; 0
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	f6 01       	movw	r30, r12
    262c:	80 83       	st	Z, r24
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	a2 83       	std	Z+2, r26	; 0x02
    2632:	b3 83       	std	Z+3, r27	; 0x03
    2634:	84 83       	std	Z+4, r24	; 0x04
    2636:	95 83       	std	Z+5, r25	; 0x05
    2638:	a6 83       	std	Z+6, r26	; 0x06
    263a:	b7 83       	std	Z+7, r27	; 0x07
    263c:	f5 01       	movw	r30, r10
    263e:	12 82       	std	Z+2, r1	; 0x02

/******Hole number iteration************/
while(1){
(exponent[0]) = 0; (exponent[1]) = 0;
RHSofDP = product_loop(number,exponent, root);
    2640:	1f 81       	ldd	r17, Y+7	; 0x07

number[0] = 1; number[1] = 1; exponent[2] = 0;

/******Hole number iteration************/
while(1){
(exponent[0]) = 0; (exponent[1]) = 0;
    2642:	f5 01       	movw	r30, r10
    2644:	10 82       	st	Z, r1
    2646:	11 82       	std	Z+1, r1	; 0x01
RHSofDP = product_loop(number,exponent, root);
    2648:	1d 83       	std	Y+5, r17	; 0x05
    264a:	41 2f       	mov	r20, r17
    264c:	b5 01       	movw	r22, r10
    264e:	c6 01       	movw	r24, r12
    2650:	0e 94 69 10 	call	0x20d2	; 0x20d2 <product_loop>
if((RHSofDP > RHSofDP_input) && (exponent[2] == expnt_input)) break;
    2654:	46 16       	cp	r4, r22
    2656:	57 06       	cpc	r5, r23
    2658:	68 06       	cpc	r6, r24
    265a:	79 06       	cpc	r7, r25
    265c:	20 f4       	brcc	.+8      	; 0x2666 <any_root+0x124>
    265e:	f5 01       	movw	r30, r10
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	89 15       	cp	r24, r9
    2664:	e1 f0       	breq	.+56     	; 0x269e <any_root+0x15c>
if(exponent[2] > expnt_input) break;
    2666:	f5 01       	movw	r30, r10
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	98 16       	cp	r9, r24
    266c:	c4 f0       	brlt	.+48     	; 0x269e <any_root+0x15c>
number[0]++;number[1]++;}number[0]--; number[1]--;
    266e:	f6 01       	movw	r30, r12
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	a2 81       	ldd	r26, Z+2	; 0x02
    2676:	b3 81       	ldd	r27, Z+3	; 0x03
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	a1 1d       	adc	r26, r1
    267c:	b1 1d       	adc	r27, r1
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
    2686:	84 81       	ldd	r24, Z+4	; 0x04
    2688:	95 81       	ldd	r25, Z+5	; 0x05
    268a:	a6 81       	ldd	r26, Z+6	; 0x06
    268c:	b7 81       	ldd	r27, Z+7	; 0x07
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	a1 1d       	adc	r26, r1
    2692:	b1 1d       	adc	r27, r1
    2694:	84 83       	std	Z+4, r24	; 0x04
    2696:	95 83       	std	Z+5, r25	; 0x05
    2698:	a6 83       	std	Z+6, r26	; 0x06
    269a:	b7 83       	std	Z+7, r27	; 0x07
    269c:	d2 cf       	rjmp	.-92     	; 0x2642 <any_root+0x100>
    269e:	f6 01       	movw	r30, r12
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	a2 81       	ldd	r26, Z+2	; 0x02
    26a6:	b3 81       	ldd	r27, Z+3	; 0x03
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	a1 09       	sbc	r26, r1
    26ac:	b1 09       	sbc	r27, r1
    26ae:	80 83       	st	Z, r24
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	a2 83       	std	Z+2, r26	; 0x02
    26b4:	b3 83       	std	Z+3, r27	; 0x03
    26b6:	84 81       	ldd	r24, Z+4	; 0x04
    26b8:	95 81       	ldd	r25, Z+5	; 0x05
    26ba:	a6 81       	ldd	r26, Z+6	; 0x06
    26bc:	b7 81       	ldd	r27, Z+7	; 0x07
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	a1 09       	sbc	r26, r1
    26c2:	b1 09       	sbc	r27, r1
    26c4:	84 83       	std	Z+4, r24	; 0x04
    26c6:	95 83       	std	Z+5, r25	; 0x05
    26c8:	a6 83       	std	Z+6, r26	; 0x06
    26ca:	b7 83       	std	Z+7, r27	; 0x07

(exponent[0]) = 0; (exponent[1]) = 0;
    26cc:	f5 01       	movw	r30, r10
    26ce:	10 82       	st	Z, r1
    26d0:	11 82       	std	Z+1, r1	; 0x01
RHSofDP = product_loop(number,exponent, root);
    26d2:	4d 81       	ldd	r20, Y+5	; 0x05
    26d4:	b5 01       	movw	r22, r10
    26d6:	c6 01       	movw	r24, r12
    26d8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <product_loop>

(exponent[0]) = 0; (exponent[1]) = 0; 
    26dc:	f5 01       	movw	r30, r10
    26de:	10 82       	st	Z, r1
    26e0:	11 82       	std	Z+1, r1	; 0x01

expnt_result = 0; expnt_calculator=1; while (number[0] >= expnt_calculator) {expnt_calculator *= 10; expnt_result++;}
    26e2:	f6 01       	movw	r30, r12
    26e4:	40 81       	ld	r20, Z
    26e6:	51 81       	ldd	r21, Z+1	; 0x01
    26e8:	62 81       	ldd	r22, Z+2	; 0x02
    26ea:	73 81       	ldd	r23, Z+3	; 0x03
    26ec:	41 15       	cp	r20, r1
    26ee:	51 05       	cpc	r21, r1
    26f0:	61 05       	cpc	r22, r1
    26f2:	71 05       	cpc	r23, r1
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <any_root+0x1b6>
    26f6:	ae c0       	rjmp	.+348    	; 0x2854 <any_root+0x312>
    26f8:	21 2c       	mov	r2, r1
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9c 01       	movw	r18, r24
    2700:	22 0f       	add	r18, r18
    2702:	33 1f       	adc	r19, r19
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	82 0f       	add	r24, r18
    2712:	93 1f       	adc	r25, r19
    2714:	23 94       	inc	r2
    2716:	8c 01       	movw	r16, r24
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 17       	cp	r20, r16
    271e:	51 07       	cpc	r21, r17
    2720:	62 07       	cpc	r22, r18
    2722:	73 07       	cpc	r23, r19
    2724:	60 f7       	brcc	.-40     	; 0x26fe <any_root+0x1bc>
    2726:	97 c0       	rjmp	.+302    	; 0x2856 <any_root+0x314>

/******Real number iteration************/

for(int m = 1; m <=6; m++){
number[0] *=10; number[1] *=10;
    2728:	f6 01       	movw	r30, r12
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	a2 81       	ldd	r26, Z+2	; 0x02
    2730:	b3 81       	ldd	r27, Z+3	; 0x03
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	aa 1f       	adc	r26, r26
    2738:	bb 1f       	adc	r27, r27
    273a:	ac 01       	movw	r20, r24
    273c:	bd 01       	movw	r22, r26
    273e:	44 0f       	add	r20, r20
    2740:	55 1f       	adc	r21, r21
    2742:	66 1f       	adc	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	44 0f       	add	r20, r20
    2748:	55 1f       	adc	r21, r21
    274a:	66 1f       	adc	r22, r22
    274c:	77 1f       	adc	r23, r23
    274e:	84 0f       	add	r24, r20
    2750:	95 1f       	adc	r25, r21
    2752:	a6 1f       	adc	r26, r22
    2754:	b7 1f       	adc	r27, r23
    2756:	80 83       	st	Z, r24
    2758:	91 83       	std	Z+1, r25	; 0x01
    275a:	a2 83       	std	Z+2, r26	; 0x02
    275c:	b3 83       	std	Z+3, r27	; 0x03
    275e:	84 81       	ldd	r24, Z+4	; 0x04
    2760:	95 81       	ldd	r25, Z+5	; 0x05
    2762:	a6 81       	ldd	r26, Z+6	; 0x06
    2764:	b7 81       	ldd	r27, Z+7	; 0x07
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	aa 1f       	adc	r26, r26
    276c:	bb 1f       	adc	r27, r27
    276e:	ac 01       	movw	r20, r24
    2770:	bd 01       	movw	r22, r26
    2772:	44 0f       	add	r20, r20
    2774:	55 1f       	adc	r21, r21
    2776:	66 1f       	adc	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	44 0f       	add	r20, r20
    277c:	55 1f       	adc	r21, r21
    277e:	66 1f       	adc	r22, r22
    2780:	77 1f       	adc	r23, r23
    2782:	84 0f       	add	r24, r20
    2784:	95 1f       	adc	r25, r21
    2786:	a6 1f       	adc	r26, r22
    2788:	b7 1f       	adc	r27, r23
    278a:	84 83       	std	Z+4, r24	; 0x04
    278c:	95 83       	std	Z+5, r25	; 0x05
    278e:	a6 83       	std	Z+6, r26	; 0x06
    2790:	b7 83       	std	Z+7, r27	; 0x07
    2792:	0f 2e       	mov	r0, r31
    2794:	fa e0       	ldi	r31, 0x0A	; 10
    2796:	ef 2e       	mov	r14, r31
    2798:	f1 2c       	mov	r15, r1
    279a:	f0 2d       	mov	r31, r0
for(int n = 0; n<10; n++)
{(exponent[0]) = -m; (exponent[1]) = -m; RHSofDP = product_loop(number,exponent, root);
    279c:	13 2d       	mov	r17, r3
    279e:	81 2e       	mov	r8, r17
    27a0:	f5 01       	movw	r30, r10
    27a2:	10 83       	st	Z, r17
    27a4:	11 83       	std	Z+1, r17	; 0x01
    27a6:	4d 81       	ldd	r20, Y+5	; 0x05
    27a8:	b5 01       	movw	r22, r10
    27aa:	c6 01       	movw	r24, r12
    27ac:	0e 94 69 10 	call	0x20d2	; 0x20d2 <product_loop>


if((RHSofDP > RHSofDP_input) && (exponent[2] == expnt_input)) break;
    27b0:	46 16       	cp	r4, r22
    27b2:	57 06       	cpc	r5, r23
    27b4:	68 06       	cpc	r6, r24
    27b6:	79 06       	cpc	r7, r25
    27b8:	20 f4       	brcc	.+8      	; 0x27c2 <any_root+0x280>
    27ba:	f5 01       	movw	r30, r10
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	89 15       	cp	r24, r9
    27c0:	f9 f0       	breq	.+62     	; 0x2800 <any_root+0x2be>
if(exponent[2] > expnt_input) break;
    27c2:	f5 01       	movw	r30, r10
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	98 16       	cp	r9, r24
    27c8:	dc f0       	brlt	.+54     	; 0x2800 <any_root+0x2be>
number[0]++;number[1]++;}
    27ca:	f6 01       	movw	r30, r12
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	a2 81       	ldd	r26, Z+2	; 0x02
    27d2:	b3 81       	ldd	r27, Z+3	; 0x03
    27d4:	01 96       	adiw	r24, 0x01	; 1
    27d6:	a1 1d       	adc	r26, r1
    27d8:	b1 1d       	adc	r27, r1
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
    27e2:	84 81       	ldd	r24, Z+4	; 0x04
    27e4:	95 81       	ldd	r25, Z+5	; 0x05
    27e6:	a6 81       	ldd	r26, Z+6	; 0x06
    27e8:	b7 81       	ldd	r27, Z+7	; 0x07
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	a1 1d       	adc	r26, r1
    27ee:	b1 1d       	adc	r27, r1
    27f0:	84 83       	std	Z+4, r24	; 0x04
    27f2:	95 83       	std	Z+5, r25	; 0x05
    27f4:	a6 83       	std	Z+6, r26	; 0x06
    27f6:	b7 83       	std	Z+7, r27	; 0x07
    27f8:	f1 e0       	ldi	r31, 0x01	; 1
    27fa:	ef 1a       	sub	r14, r31
    27fc:	f1 08       	sbc	r15, r1

/******Real number iteration************/

for(int m = 1; m <=6; m++){
number[0] *=10; number[1] *=10;
for(int n = 0; n<10; n++)
    27fe:	79 f6       	brne	.-98     	; 0x279e <any_root+0x25c>


if((RHSofDP > RHSofDP_input) && (exponent[2] == expnt_input)) break;
if(exponent[2] > expnt_input) break;
number[0]++;number[1]++;}
number[0]--; number[1]--;
    2800:	f6 01       	movw	r30, r12
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	a2 81       	ldd	r26, Z+2	; 0x02
    2808:	b3 81       	ldd	r27, Z+3	; 0x03
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	a1 09       	sbc	r26, r1
    280e:	b1 09       	sbc	r27, r1
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
    2818:	84 81       	ldd	r24, Z+4	; 0x04
    281a:	95 81       	ldd	r25, Z+5	; 0x05
    281c:	a6 81       	ldd	r26, Z+6	; 0x06
    281e:	b7 81       	ldd	r27, Z+7	; 0x07
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	a1 09       	sbc	r26, r1
    2824:	b1 09       	sbc	r27, r1
    2826:	84 83       	std	Z+4, r24	; 0x04
    2828:	95 83       	std	Z+5, r25	; 0x05
    282a:	a6 83       	std	Z+6, r26	; 0x06
    282c:	b7 83       	std	Z+7, r27	; 0x07
(exponent[0]) = -m; (exponent[1]) = -m; }
    282e:	f5 01       	movw	r30, r10
    2830:	80 82       	st	Z, r8
    2832:	81 82       	std	Z+1, r8	; 0x01
    2834:	3a 94       	dec	r3

expnt_result = 0; expnt_calculator=1; while (number[0] >= expnt_calculator) {expnt_calculator *= 10; expnt_result++;}

/******Real number iteration************/

for(int m = 1; m <=6; m++){
    2836:	f9 ef       	ldi	r31, 0xF9	; 249
    2838:	3f 12       	cpse	r3, r31
    283a:	76 cf       	rjmp	.-276    	; 0x2728 <any_root+0x1e6>
if(exponent[2] > expnt_input) break;
number[0]++;number[1]++;}
number[0]--; number[1]--;
(exponent[0]) = -m; (exponent[1]) = -m; }

exponent[2] = expnt_result;	
    283c:	f5 01       	movw	r30, r10
    283e:	22 82       	std	Z+2, r2	; 0x02
exponent[0] = temp_0;
    2840:	8e 81       	ldd	r24, Y+6	; 0x06
    2842:	80 83       	st	Z, r24
exponent[1] = temp_1;
    2844:	8f 81       	ldd	r24, Y+7	; 0x07
    2846:	81 83       	std	Z+1, r24	; 0x01
return number[0];}
    2848:	f6 01       	movw	r30, r12
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	04 c0       	rjmp	.+8      	; 0x285c <any_root+0x31a>
(exponent[0]) = 0; (exponent[1]) = 0;
RHSofDP = product_loop(number,exponent, root);

(exponent[0]) = 0; (exponent[1]) = 0; 

expnt_result = 0; expnt_calculator=1; while (number[0] >= expnt_calculator) {expnt_calculator *= 10; expnt_result++;}
    2854:	21 2c       	mov	r2, r1
    2856:	33 24       	eor	r3, r3
    2858:	3a 94       	dec	r3
    285a:	66 cf       	rjmp	.-308    	; 0x2728 <any_root+0x1e6>
(exponent[0]) = -m; (exponent[1]) = -m; }

exponent[2] = expnt_result;	
exponent[0] = temp_0;
exponent[1] = temp_1;
return number[0];}
    285c:	27 96       	adiw	r28, 0x07	; 7
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	bf 90       	pop	r11
    287a:	af 90       	pop	r10
    287c:	9f 90       	pop	r9
    287e:	8f 90       	pop	r8
    2880:	7f 90       	pop	r7
    2882:	6f 90       	pop	r6
    2884:	5f 90       	pop	r5
    2886:	4f 90       	pop	r4
    2888:	3f 90       	pop	r3
    288a:	2f 90       	pop	r2
    288c:	08 95       	ret

0000288e <any_power>:



/**************************************************************************************************/
unsigned long any_power (unsigned long * number, signed char * exponent){
    288e:	8f 92       	push	r8
    2890:	9f 92       	push	r9
    2892:	af 92       	push	r10
    2894:	bf 92       	push	r11
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	ec 01       	movw	r28, r24
    28a2:	8b 01       	movw	r16, r22

unsigned long temp_1, RHSofDP;
signed char temp_0;
char power;

temp_0 = exponent[1];
    28a4:	fb 01       	movw	r30, r22
    28a6:	f1 80       	ldd	r15, Z+1	; 0x01
temp_1 = number[1];
    28a8:	8c 80       	ldd	r8, Y+4	; 0x04
    28aa:	9d 80       	ldd	r9, Y+5	; 0x05
    28ac:	ae 80       	ldd	r10, Y+6	; 0x06
    28ae:	bf 80       	ldd	r11, Y+7	; 0x07

power = exponent[1];
number[1] = number[0];
    28b0:	88 81       	ld	r24, Y
    28b2:	99 81       	ldd	r25, Y+1	; 0x01
    28b4:	aa 81       	ldd	r26, Y+2	; 0x02
    28b6:	bb 81       	ldd	r27, Y+3	; 0x03
    28b8:	8c 83       	std	Y+4, r24	; 0x04
    28ba:	9d 83       	std	Y+5, r25	; 0x05
    28bc:	ae 83       	std	Y+6, r26	; 0x06
    28be:	bf 83       	std	Y+7, r27	; 0x07
exponent[1] = exponent[0];
    28c0:	80 81       	ld	r24, Z
    28c2:	81 83       	std	Z+1, r24	; 0x01

RHSofDP = product_loop(number,exponent, power);
    28c4:	4f 2d       	mov	r20, r15
    28c6:	ce 01       	movw	r24, r28
    28c8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <product_loop>

exponent[1] = temp_0;
    28cc:	f8 01       	movw	r30, r16
    28ce:	f1 82       	std	Z+1, r15	; 0x01
number[1] = temp_1;
    28d0:	8c 82       	std	Y+4, r8	; 0x04
    28d2:	9d 82       	std	Y+5, r9	; 0x05
    28d4:	ae 82       	std	Y+6, r10	; 0x06
    28d6:	bf 82       	std	Y+7, r11	; 0x07

return RHSofDP; }
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	ff 90       	pop	r15
    28e2:	bf 90       	pop	r11
    28e4:	af 90       	pop	r10
    28e6:	9f 90       	pop	r9
    28e8:	8f 90       	pop	r8
    28ea:	08 95       	ret

000028ec <Binary_points_to_Decimal_Signed>:



/**************************************************************************************************/
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	bf 92       	push	r11
    2900:	cf 92       	push	r12
    2902:	df 92       	push	r13
    2904:	ef 92       	push	r14
    2906:	ff 92       	push	r15
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	cf 93       	push	r28
    290e:	df 93       	push	r29
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	e4 97       	sbiw	r28, 0x34	; 52
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;
    2920:	db 01       	movw	r26, r22
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
    2922:	8c 01       	movw	r16, r24
    2924:	33 27       	eor	r19, r19
    2926:	17 fd       	sbrc	r17, 7
    2928:	30 95       	com	r19
    292a:	23 2f       	mov	r18, r19
    292c:	28 01       	movw	r4, r16
    292e:	39 01       	movw	r6, r18
    2930:	42 e0       	ldi	r20, 0x02	; 2
    2932:	44 22       	and	r4, r20
    2934:	55 24       	eor	r5, r5
    2936:	66 24       	eor	r6, r6
    2938:	77 24       	eor	r7, r7
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
    293a:	48 01       	movw	r8, r16
    293c:	59 01       	movw	r10, r18
    293e:	54 e0       	ldi	r21, 0x04	; 4
    2940:	85 22       	and	r8, r21
    2942:	99 24       	eor	r9, r9
    2944:	aa 24       	eor	r10, r10
    2946:	bb 24       	eor	r11, r11
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
    2948:	68 01       	movw	r12, r16
    294a:	79 01       	movw	r14, r18
    294c:	68 e0       	ldi	r22, 0x08	; 8
    294e:	c6 22       	and	r12, r22
    2950:	dd 24       	eor	r13, r13
    2952:	ee 24       	eor	r14, r14
    2954:	ff 24       	eor	r15, r15
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
    2956:	b9 01       	movw	r22, r18
    2958:	a8 01       	movw	r20, r16
    295a:	40 71       	andi	r20, 0x10	; 16
    295c:	55 27       	eor	r21, r21
    295e:	66 27       	eor	r22, r22
    2960:	77 27       	eor	r23, r23
    2962:	4d a7       	std	Y+45, r20	; 0x2d
    2964:	5e a7       	std	Y+46, r21	; 0x2e
    2966:	6f a7       	std	Y+47, r22	; 0x2f
    2968:	78 ab       	std	Y+48, r23	; 0x30
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
    296a:	b9 01       	movw	r22, r18
    296c:	a8 01       	movw	r20, r16
    296e:	40 72       	andi	r20, 0x20	; 32
    2970:	55 27       	eor	r21, r21
    2972:	66 27       	eor	r22, r22
    2974:	77 27       	eor	r23, r23
    2976:	49 a7       	std	Y+41, r20	; 0x29
    2978:	5a a7       	std	Y+42, r21	; 0x2a
    297a:	6b a7       	std	Y+43, r22	; 0x2b
    297c:	7c a7       	std	Y+44, r23	; 0x2c
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
    297e:	b9 01       	movw	r22, r18
    2980:	a8 01       	movw	r20, r16
    2982:	40 74       	andi	r20, 0x40	; 64
    2984:	55 27       	eor	r21, r21
    2986:	66 27       	eor	r22, r22
    2988:	77 27       	eor	r23, r23
    298a:	4d a3       	std	Y+37, r20	; 0x25
    298c:	5e a3       	std	Y+38, r21	; 0x26
    298e:	6f a3       	std	Y+39, r22	; 0x27
    2990:	78 a7       	std	Y+40, r23	; 0x28
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
    2992:	b9 01       	movw	r22, r18
    2994:	a8 01       	movw	r20, r16
    2996:	40 78       	andi	r20, 0x80	; 128
    2998:	55 27       	eor	r21, r21
    299a:	66 27       	eor	r22, r22
    299c:	77 27       	eor	r23, r23
    299e:	49 a3       	std	Y+33, r20	; 0x21
    29a0:	5a a3       	std	Y+34, r21	; 0x22
    29a2:	6b a3       	std	Y+35, r22	; 0x23
    29a4:	7c a3       	std	Y+36, r23	; 0x24
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
    29a6:	b9 01       	movw	r22, r18
    29a8:	a8 01       	movw	r20, r16
    29aa:	44 27       	eor	r20, r20
    29ac:	51 70       	andi	r21, 0x01	; 1
    29ae:	66 27       	eor	r22, r22
    29b0:	77 27       	eor	r23, r23
    29b2:	4d 8f       	std	Y+29, r20	; 0x1d
    29b4:	5e 8f       	std	Y+30, r21	; 0x1e
    29b6:	6f 8f       	std	Y+31, r22	; 0x1f
    29b8:	78 a3       	std	Y+32, r23	; 0x20
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
    29ba:	b9 01       	movw	r22, r18
    29bc:	a8 01       	movw	r20, r16
    29be:	44 27       	eor	r20, r20
    29c0:	52 70       	andi	r21, 0x02	; 2
    29c2:	66 27       	eor	r22, r22
    29c4:	77 27       	eor	r23, r23
    29c6:	49 8f       	std	Y+25, r20	; 0x19
    29c8:	5a 8f       	std	Y+26, r21	; 0x1a
    29ca:	6b 8f       	std	Y+27, r22	; 0x1b
    29cc:	7c 8f       	std	Y+28, r23	; 0x1c
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
    29ce:	b9 01       	movw	r22, r18
    29d0:	a8 01       	movw	r20, r16
    29d2:	44 27       	eor	r20, r20
    29d4:	54 70       	andi	r21, 0x04	; 4
    29d6:	66 27       	eor	r22, r22
    29d8:	77 27       	eor	r23, r23
    29da:	4d 8b       	std	Y+21, r20	; 0x15
    29dc:	5e 8b       	std	Y+22, r21	; 0x16
    29de:	6f 8b       	std	Y+23, r22	; 0x17
    29e0:	78 8f       	std	Y+24, r23	; 0x18
for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
    29e2:	b9 01       	movw	r22, r18
    29e4:	a8 01       	movw	r20, r16
    29e6:	44 27       	eor	r20, r20
    29e8:	58 70       	andi	r21, 0x08	; 8
    29ea:	66 27       	eor	r22, r22
    29ec:	77 27       	eor	r23, r23
    29ee:	49 8b       	std	Y+17, r20	; 0x11
    29f0:	5a 8b       	std	Y+18, r21	; 0x12
    29f2:	6b 8b       	std	Y+19, r22	; 0x13
    29f4:	7c 8b       	std	Y+20, r23	; 0x14

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
    29f6:	b9 01       	movw	r22, r18
    29f8:	a8 01       	movw	r20, r16
    29fa:	44 27       	eor	r20, r20
    29fc:	50 71       	andi	r21, 0x10	; 16
    29fe:	66 27       	eor	r22, r22
    2a00:	77 27       	eor	r23, r23
    2a02:	4d 87       	std	Y+13, r20	; 0x0d
    2a04:	5e 87       	std	Y+14, r21	; 0x0e
    2a06:	6f 87       	std	Y+15, r22	; 0x0f
    2a08:	78 8b       	std	Y+16, r23	; 0x10
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
    2a0a:	b9 01       	movw	r22, r18
    2a0c:	a8 01       	movw	r20, r16
    2a0e:	44 27       	eor	r20, r20
    2a10:	50 72       	andi	r21, 0x20	; 32
    2a12:	66 27       	eor	r22, r22
    2a14:	77 27       	eor	r23, r23
    2a16:	49 87       	std	Y+9, r20	; 0x09
    2a18:	5a 87       	std	Y+10, r21	; 0x0a
    2a1a:	6b 87       	std	Y+11, r22	; 0x0b
    2a1c:	7c 87       	std	Y+12, r23	; 0x0c
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
    2a1e:	b9 01       	movw	r22, r18
    2a20:	a8 01       	movw	r20, r16
    2a22:	44 27       	eor	r20, r20
    2a24:	50 74       	andi	r21, 0x40	; 64
    2a26:	66 27       	eor	r22, r22
    2a28:	77 27       	eor	r23, r23
    2a2a:	4d 83       	std	Y+5, r20	; 0x05
    2a2c:	5e 83       	std	Y+6, r21	; 0x06
    2a2e:	6f 83       	std	Y+7, r22	; 0x07
    2a30:	78 87       	std	Y+8, r23	; 0x08
{long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
    2a32:	b9 01       	movw	r22, r18
    2a34:	a8 01       	movw	r20, r16
    2a36:	44 27       	eor	r20, r20
    2a38:	50 78       	andi	r21, 0x80	; 128
    2a3a:	49 83       	std	Y+1, r20	; 0x01
    2a3c:	5a 83       	std	Y+2, r21	; 0x02
    2a3e:	6b 83       	std	Y+3, r22	; 0x03
    2a40:	7c 83       	std	Y+4, r23	; 0x04
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0



/**************************************************************************************************/
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	ba 01       	movw	r22, r20
    2a4c:	09 ab       	std	Y+49, r16	; 0x31
    2a4e:	1a ab       	std	Y+50, r17	; 0x32
    2a50:	2b ab       	std	Y+51, r18	; 0x33
    2a52:	3c ab       	std	Y+52, r19	; 0x34
    2a54:	01 c0       	rjmp	.+2      	; 0x2a58 <Binary_points_to_Decimal_Signed+0x16c>
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	fc 01       	movw	r30, r24
    2a5a:	31 97       	sbiw	r30, 0x01	; 1
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
    2a5c:	e0 31       	cpi	r30, 0x10	; 16
    2a5e:	f1 05       	cpc	r31, r1
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <Binary_points_to_Decimal_Signed+0x178>
    2a62:	d2 c0       	rjmp	.+420    	; 0x2c08 <Binary_points_to_Decimal_Signed+0x31c>
    2a64:	eb 5f       	subi	r30, 0xFB	; 251
    2a66:	fe 4f       	sbci	r31, 0xFE	; 254
    2a68:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
    2a6c:	09 81       	ldd	r16, Y+1	; 0x01
    2a6e:	1a 81       	ldd	r17, Y+2	; 0x02
    2a70:	2b 81       	ldd	r18, Y+3	; 0x03
    2a72:	3c 81       	ldd	r19, Y+4	; 0x04
    2a74:	01 2b       	or	r16, r17
    2a76:	02 2b       	or	r16, r18
    2a78:	03 2b       	or	r16, r19
    2a7a:	69 f3       	breq	.-38     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2a7c:	5a 5c       	subi	r21, 0xCA	; 202
    2a7e:	6a 49       	sbci	r22, 0x9A	; 154
    2a80:	7b 43       	sbci	r23, 0x3B	; 59
    2a82:	e9 cf       	rjmp	.-46     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
    2a84:	0d 81       	ldd	r16, Y+5	; 0x05
    2a86:	1e 81       	ldd	r17, Y+6	; 0x06
    2a88:	2f 81       	ldd	r18, Y+7	; 0x07
    2a8a:	38 85       	ldd	r19, Y+8	; 0x08
    2a8c:	01 2b       	or	r16, r17
    2a8e:	02 2b       	or	r16, r18
    2a90:	03 2b       	or	r16, r19
    2a92:	09 f3       	breq	.-62     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2a94:	5b 59       	subi	r21, 0x9B	; 155
    2a96:	62 43       	sbci	r22, 0x32	; 50
    2a98:	72 4e       	sbci	r23, 0xE2	; 226
    2a9a:	dd cf       	rjmp	.-70     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
    2a9c:	09 85       	ldd	r16, Y+9	; 0x09
    2a9e:	1a 85       	ldd	r17, Y+10	; 0x0a
    2aa0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aa2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aa4:	01 2b       	or	r16, r17
    2aa6:	02 2b       	or	r16, r18
    2aa8:	03 2b       	or	r16, r19
    2aaa:	a9 f2       	breq	.-86     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2aac:	40 58       	subi	r20, 0x80	; 128
    2aae:	5d 44       	sbci	r21, 0x4D	; 77
    2ab0:	69 41       	sbci	r22, 0x19	; 25
    2ab2:	71 4f       	sbci	r23, 0xF1	; 241
    2ab4:	d0 cf       	rjmp	.-96     	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
    2ab6:	0d 85       	ldd	r16, Y+13	; 0x0d
    2ab8:	1e 85       	ldd	r17, Y+14	; 0x0e
    2aba:	2f 85       	ldd	r18, Y+15	; 0x0f
    2abc:	38 89       	ldd	r19, Y+16	; 0x10
    2abe:	01 2b       	or	r16, r17
    2ac0:	02 2b       	or	r16, r18
    2ac2:	03 2b       	or	r16, r19
    2ac4:	41 f2       	breq	.-112    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2ac6:	40 5c       	subi	r20, 0xC0	; 192
    2ac8:	56 4a       	sbci	r21, 0xA6	; 166
    2aca:	6c 48       	sbci	r22, 0x8C	; 140
    2acc:	78 4f       	sbci	r23, 0xF8	; 248
    2ace:	c3 cf       	rjmp	.-122    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
    2ad0:	09 89       	ldd	r16, Y+17	; 0x11
    2ad2:	1a 89       	ldd	r17, Y+18	; 0x12
    2ad4:	2b 89       	ldd	r18, Y+19	; 0x13
    2ad6:	3c 89       	ldd	r19, Y+20	; 0x14
    2ad8:	01 2b       	or	r16, r17
    2ada:	02 2b       	or	r16, r18
    2adc:	03 2b       	or	r16, r19
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <Binary_points_to_Decimal_Signed+0x1f6>
    2ae0:	ba cf       	rjmp	.-140    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2ae2:	40 56       	subi	r20, 0x60	; 96
    2ae4:	53 45       	sbci	r21, 0x53	; 83
    2ae6:	66 44       	sbci	r22, 0x46	; 70
    2ae8:	7c 4f       	sbci	r23, 0xFC	; 252
    2aea:	b5 cf       	rjmp	.-150    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
    2aec:	0d 89       	ldd	r16, Y+21	; 0x15
    2aee:	1e 89       	ldd	r17, Y+22	; 0x16
    2af0:	2f 89       	ldd	r18, Y+23	; 0x17
    2af2:	38 8d       	ldd	r19, Y+24	; 0x18
    2af4:	01 2b       	or	r16, r17
    2af6:	02 2b       	or	r16, r18
    2af8:	03 2b       	or	r16, r19
    2afa:	09 f4       	brne	.+2      	; 0x2afe <Binary_points_to_Decimal_Signed+0x212>
    2afc:	ac cf       	rjmp	.-168    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2afe:	40 5b       	subi	r20, 0xB0	; 176
    2b00:	59 42       	sbci	r21, 0x29	; 41
    2b02:	63 42       	sbci	r22, 0x23	; 35
    2b04:	7e 4f       	sbci	r23, 0xFE	; 254
    2b06:	a7 cf       	rjmp	.-178    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
    2b08:	09 8d       	ldd	r16, Y+25	; 0x19
    2b0a:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2b0c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2b0e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2b10:	01 2b       	or	r16, r17
    2b12:	02 2b       	or	r16, r18
    2b14:	03 2b       	or	r16, r19
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <Binary_points_to_Decimal_Signed+0x22e>
    2b18:	9e cf       	rjmp	.-196    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2b1a:	48 5d       	subi	r20, 0xD8	; 216
    2b1c:	54 49       	sbci	r21, 0x94	; 148
    2b1e:	61 41       	sbci	r22, 0x11	; 17
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	99 cf       	rjmp	.-206    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
    2b24:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2b26:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2b28:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b2a:	38 a1       	ldd	r19, Y+32	; 0x20
    2b2c:	01 2b       	or	r16, r17
    2b2e:	02 2b       	or	r16, r18
    2b30:	03 2b       	or	r16, r19
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <Binary_points_to_Decimal_Signed+0x24a>
    2b34:	90 cf       	rjmp	.-224    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2b36:	4c 56       	subi	r20, 0x6C	; 108
    2b38:	5a 4c       	sbci	r21, 0xCA	; 202
    2b3a:	68 48       	sbci	r22, 0x88	; 136
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	8b cf       	rjmp	.-234    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
    2b40:	09 a1       	ldd	r16, Y+33	; 0x21
    2b42:	1a a1       	ldd	r17, Y+34	; 0x22
    2b44:	2b a1       	ldd	r18, Y+35	; 0x23
    2b46:	3c a1       	ldd	r19, Y+36	; 0x24
    2b48:	01 2b       	or	r16, r17
    2b4a:	02 2b       	or	r16, r18
    2b4c:	03 2b       	or	r16, r19
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <Binary_points_to_Decimal_Signed+0x266>
    2b50:	82 cf       	rjmp	.-252    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2b52:	46 53       	subi	r20, 0x36	; 54
    2b54:	55 46       	sbci	r21, 0x65	; 101
    2b56:	64 4c       	sbci	r22, 0xC4	; 196
    2b58:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5a:	7d cf       	rjmp	.-262    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
    2b5c:	0d a1       	ldd	r16, Y+37	; 0x25
    2b5e:	1e a1       	ldd	r17, Y+38	; 0x26
    2b60:	2f a1       	ldd	r18, Y+39	; 0x27
    2b62:	38 a5       	ldd	r19, Y+40	; 0x28
    2b64:	01 2b       	or	r16, r17
    2b66:	02 2b       	or	r16, r18
    2b68:	03 2b       	or	r16, r19
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <Binary_points_to_Decimal_Signed+0x282>
    2b6c:	74 cf       	rjmp	.-280    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2b6e:	4b 59       	subi	r20, 0x9B	; 155
    2b70:	52 43       	sbci	r21, 0x32	; 50
    2b72:	62 4e       	sbci	r22, 0xE2	; 226
    2b74:	7f 4f       	sbci	r23, 0xFF	; 255
    2b76:	6f cf       	rjmp	.-290    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
    2b78:	09 a5       	ldd	r16, Y+41	; 0x29
    2b7a:	1a a5       	ldd	r17, Y+42	; 0x2a
    2b7c:	2b a5       	ldd	r18, Y+43	; 0x2b
    2b7e:	3c a5       	ldd	r19, Y+44	; 0x2c
    2b80:	01 2b       	or	r16, r17
    2b82:	02 2b       	or	r16, r18
    2b84:	03 2b       	or	r16, r19
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <Binary_points_to_Decimal_Signed+0x29e>
    2b88:	66 cf       	rjmp	.-308    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2b8a:	4d 54       	subi	r20, 0x4D	; 77
    2b8c:	59 41       	sbci	r21, 0x19	; 25
    2b8e:	61 4f       	sbci	r22, 0xF1	; 241
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	61 cf       	rjmp	.-318    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
    2b94:	0d a5       	ldd	r16, Y+45	; 0x2d
    2b96:	1e a5       	ldd	r17, Y+46	; 0x2e
    2b98:	2f a5       	ldd	r18, Y+47	; 0x2f
    2b9a:	38 a9       	ldd	r19, Y+48	; 0x30
    2b9c:	01 2b       	or	r16, r17
    2b9e:	02 2b       	or	r16, r18
    2ba0:	03 2b       	or	r16, r19
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <Binary_points_to_Decimal_Signed+0x2ba>
    2ba4:	58 cf       	rjmp	.-336    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2ba6:	47 5a       	subi	r20, 0xA7	; 167
    2ba8:	5c 48       	sbci	r21, 0x8C	; 140
    2baa:	68 4f       	sbci	r22, 0xF8	; 248
    2bac:	7f 4f       	sbci	r23, 0xFF	; 255
    2bae:	53 cf       	rjmp	.-346    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
    2bb0:	c1 14       	cp	r12, r1
    2bb2:	d1 04       	cpc	r13, r1
    2bb4:	e1 04       	cpc	r14, r1
    2bb6:	f1 04       	cpc	r15, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <Binary_points_to_Decimal_Signed+0x2d0>
    2bba:	4d cf       	rjmp	.-358    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2bbc:	43 55       	subi	r20, 0x53	; 83
    2bbe:	56 44       	sbci	r21, 0x46	; 70
    2bc0:	6c 4f       	sbci	r22, 0xFC	; 252
    2bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc4:	48 cf       	rjmp	.-368    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
    2bc6:	81 14       	cp	r8, r1
    2bc8:	91 04       	cpc	r9, r1
    2bca:	a1 04       	cpc	r10, r1
    2bcc:	b1 04       	cpc	r11, r1
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <Binary_points_to_Decimal_Signed+0x2e6>
    2bd0:	42 cf       	rjmp	.-380    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2bd2:	4a 52       	subi	r20, 0x2A	; 42
    2bd4:	53 42       	sbci	r21, 0x23	; 35
    2bd6:	6e 4f       	sbci	r22, 0xFE	; 254
    2bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bda:	3d cf       	rjmp	.-390    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
    2bdc:	41 14       	cp	r4, r1
    2bde:	51 04       	cpc	r5, r1
    2be0:	61 04       	cpc	r6, r1
    2be2:	71 04       	cpc	r7, r1
    2be4:	09 f4       	brne	.+2      	; 0x2be8 <Binary_points_to_Decimal_Signed+0x2fc>
    2be6:	37 cf       	rjmp	.-402    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2be8:	45 59       	subi	r20, 0x95	; 149
    2bea:	51 41       	sbci	r21, 0x11	; 17
    2bec:	6f 4f       	sbci	r22, 0xFF	; 255
    2bee:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf0:	32 cf       	rjmp	.-412    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>
    2bf2:	09 a9       	ldd	r16, Y+49	; 0x31
    2bf4:	1a a9       	ldd	r17, Y+50	; 0x32
    2bf6:	2b a9       	ldd	r18, Y+51	; 0x33
    2bf8:	3c a9       	ldd	r19, Y+52	; 0x34
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
    2bfa:	00 ff       	sbrs	r16, 0
    2bfc:	09 c0       	rjmp	.+18     	; 0x2c10 <Binary_points_to_Decimal_Signed+0x324>
    2bfe:	4a 5c       	subi	r20, 0xCA	; 202
    2c00:	58 48       	sbci	r21, 0x88	; 136
    2c02:	6f 4f       	sbci	r22, 0xFF	; 255
    2c04:	7f 4f       	sbci	r23, 0xFF	; 255
    2c06:	04 c0       	rjmp	.+8      	; 0x2c10 <Binary_points_to_Decimal_Signed+0x324>
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){											//bit zero is sign bit
    2c08:	80 31       	cpi	r24, 0x10	; 16
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	0c f4       	brge	.+2      	; 0x2c10 <Binary_points_to_Decimal_Signed+0x324>
    2c0e:	23 cf       	rjmp	.-442    	; 0x2a56 <Binary_points_to_Decimal_Signed+0x16a>



/**************************************************************************************************/
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    2c14:	5d 01       	movw	r10, r26
    2c16:	12 e0       	ldi	r17, 0x02	; 2
    2c18:	a1 22       	and	r10, r17
    2c1a:	bb 24       	eor	r11, r11
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    2c1c:	6d 01       	movw	r12, r26
    2c1e:	24 e0       	ldi	r18, 0x04	; 4
    2c20:	c2 22       	and	r12, r18
    2c22:	dd 24       	eor	r13, r13
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    2c24:	7d 01       	movw	r14, r26
    2c26:	38 e0       	ldi	r19, 0x08	; 8
    2c28:	e3 22       	and	r14, r19
    2c2a:	ff 24       	eor	r15, r15
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    2c2c:	8d 01       	movw	r16, r26
    2c2e:	00 71       	andi	r16, 0x10	; 16
    2c30:	11 27       	eor	r17, r17
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    2c32:	9d 01       	movw	r18, r26
    2c34:	20 72       	andi	r18, 0x20	; 32
    2c36:	33 27       	eor	r19, r19
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    2c38:	4d 01       	movw	r8, r26
    2c3a:	e0 e4       	ldi	r30, 0x40	; 64
    2c3c:	8e 22       	and	r8, r30
    2c3e:	99 24       	eor	r9, r9
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    2c40:	3d 01       	movw	r6, r26
    2c42:	f0 e8       	ldi	r31, 0x80	; 128
    2c44:	6f 22       	and	r6, r31
    2c46:	77 24       	eor	r7, r7
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    2c48:	2d 01       	movw	r4, r26
    2c4a:	44 24       	eor	r4, r4
    2c4c:	e1 e0       	ldi	r30, 0x01	; 1
    2c4e:	5e 22       	and	r5, r30
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    2c50:	fd 01       	movw	r30, r26
    2c52:	ee 27       	eor	r30, r30
    2c54:	f2 70       	andi	r31, 0x02	; 2
    2c56:	fa 8b       	std	Y+18, r31	; 0x12
    2c58:	e9 8b       	std	Y+17, r30	; 0x11
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    2c5a:	1d 01       	movw	r2, r26
    2c5c:	22 24       	eor	r2, r2
    2c5e:	f4 e0       	ldi	r31, 0x04	; 4
    2c60:	3f 22       	and	r3, r31
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    2c62:	fd 01       	movw	r30, r26
    2c64:	ee 27       	eor	r30, r30
    2c66:	f8 70       	andi	r31, 0x08	; 8
    2c68:	fa 83       	std	Y+2, r31	; 0x02
    2c6a:	e9 83       	std	Y+1, r30	; 0x01
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    2c6c:	fd 01       	movw	r30, r26
    2c6e:	ee 27       	eor	r30, r30
    2c70:	f0 71       	andi	r31, 0x10	; 16
    2c72:	fe 83       	std	Y+6, r31	; 0x06
    2c74:	ed 83       	std	Y+5, r30	; 0x05
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    2c76:	fd 01       	movw	r30, r26
    2c78:	ee 27       	eor	r30, r30
    2c7a:	f0 72       	andi	r31, 0x20	; 32
    2c7c:	fa 87       	std	Y+10, r31	; 0x0a
    2c7e:	e9 87       	std	Y+9, r30	; 0x09
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    2c80:	fd 01       	movw	r30, r26
    2c82:	ee 27       	eor	r30, r30
    2c84:	f0 74       	andi	r31, 0x40	; 64
    2c86:	fe 87       	std	Y+14, r31	; 0x0e
    2c88:	ed 87       	std	Y+13, r30	; 0x0d
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
    2c8a:	aa 27       	eor	r26, r26
    2c8c:	b0 78       	andi	r27, 0x80	; 128
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <Binary_points_to_Decimal_Signed+0x3a6>
    2c90:	01 96       	adiw	r24, 0x01	; 1
    2c92:	fc 01       	movw	r30, r24
    2c94:	31 97       	sbiw	r30, 0x01	; 1
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    2c96:	ef 30       	cpi	r30, 0x0F	; 15
    2c98:	f1 05       	cpc	r31, r1
    2c9a:	08 f0       	brcs	.+2      	; 0x2c9e <Binary_points_to_Decimal_Signed+0x3b2>
    2c9c:	89 c0       	rjmp	.+274    	; 0x2db0 <Binary_points_to_Decimal_Signed+0x4c4>
    2c9e:	eb 5e       	subi	r30, 0xEB	; 235
    2ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca2:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
    2ca6:	10 97       	sbiw	r26, 0x00	; 0
    2ca8:	99 f3       	breq	.-26     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2caa:	45 56       	subi	r20, 0x65	; 101
    2cac:	54 4c       	sbci	r21, 0xC4	; 196
    2cae:	6f 4f       	sbci	r22, 0xFF	; 255
    2cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb2:	ee cf       	rjmp	.-36     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    2cb4:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cb6:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cb8:	ef 2b       	or	r30, r31
    2cba:	51 f3       	breq	.-44     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2cbc:	43 53       	subi	r20, 0x33	; 51
    2cbe:	52 4e       	sbci	r21, 0xE2	; 226
    2cc0:	6f 4f       	sbci	r22, 0xFF	; 255
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	e5 cf       	rjmp	.-54     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    2cc6:	e9 85       	ldd	r30, Y+9	; 0x09
    2cc8:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cca:	ef 2b       	or	r30, r31
    2ccc:	09 f3       	breq	.-62     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2cce:	49 51       	subi	r20, 0x19	; 25
    2cd0:	51 4f       	sbci	r21, 0xF1	; 241
    2cd2:	6f 4f       	sbci	r22, 0xFF	; 255
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	dc cf       	rjmp	.-72     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    2cd8:	ed 81       	ldd	r30, Y+5	; 0x05
    2cda:	fe 81       	ldd	r31, Y+6	; 0x06
    2cdc:	ef 2b       	or	r30, r31
    2cde:	c1 f2       	breq	.-80     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2ce0:	4d 58       	subi	r20, 0x8D	; 141
    2ce2:	58 4f       	sbci	r21, 0xF8	; 248
    2ce4:	6f 4f       	sbci	r22, 0xFF	; 255
    2ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce8:	d3 cf       	rjmp	.-90     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    2cea:	e9 81       	ldd	r30, Y+1	; 0x01
    2cec:	fa 81       	ldd	r31, Y+2	; 0x02
    2cee:	ef 2b       	or	r30, r31
    2cf0:	79 f2       	breq	.-98     	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2cf2:	46 54       	subi	r20, 0x46	; 70
    2cf4:	5c 4f       	sbci	r21, 0xFC	; 252
    2cf6:	6f 4f       	sbci	r22, 0xFF	; 255
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	ca cf       	rjmp	.-108    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    2cfc:	21 14       	cp	r2, r1
    2cfe:	31 04       	cpc	r3, r1
    2d00:	39 f2       	breq	.-114    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d02:	43 52       	subi	r20, 0x23	; 35
    2d04:	5e 4f       	sbci	r21, 0xFE	; 254
    2d06:	6f 4f       	sbci	r22, 0xFF	; 255
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	c2 cf       	rjmp	.-124    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    2d0c:	e9 89       	ldd	r30, Y+17	; 0x11
    2d0e:	fa 89       	ldd	r31, Y+18	; 0x12
    2d10:	ef 2b       	or	r30, r31
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <Binary_points_to_Decimal_Signed+0x42a>
    2d14:	bd cf       	rjmp	.-134    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d16:	42 51       	subi	r20, 0x12	; 18
    2d18:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1a:	6f 4f       	sbci	r22, 0xFF	; 255
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	b8 cf       	rjmp	.-144    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    2d20:	41 14       	cp	r4, r1
    2d22:	51 04       	cpc	r5, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <Binary_points_to_Decimal_Signed+0x43c>
    2d26:	b4 cf       	rjmp	.-152    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d28:	49 58       	subi	r20, 0x89	; 137
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2c:	6f 4f       	sbci	r22, 0xFF	; 255
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	af cf       	rjmp	.-162    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    2d32:	61 14       	cp	r6, r1
    2d34:	71 04       	cpc	r7, r1
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <Binary_points_to_Decimal_Signed+0x44e>
    2d38:	ab cf       	rjmp	.-170    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d3a:	44 5c       	subi	r20, 0xC4	; 196
    2d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3e:	6f 4f       	sbci	r22, 0xFF	; 255
    2d40:	7f 4f       	sbci	r23, 0xFF	; 255
    2d42:	a6 cf       	rjmp	.-180    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    2d44:	81 14       	cp	r8, r1
    2d46:	91 04       	cpc	r9, r1
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <Binary_points_to_Decimal_Signed+0x460>
    2d4a:	a2 cf       	rjmp	.-188    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d4c:	42 5e       	subi	r20, 0xE2	; 226
    2d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d50:	6f 4f       	sbci	r22, 0xFF	; 255
    2d52:	7f 4f       	sbci	r23, 0xFF	; 255
    2d54:	9d cf       	rjmp	.-198    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    2d56:	21 15       	cp	r18, r1
    2d58:	31 05       	cpc	r19, r1
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <Binary_points_to_Decimal_Signed+0x472>
    2d5c:	99 cf       	rjmp	.-206    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d5e:	41 5f       	subi	r20, 0xF1	; 241
    2d60:	5f 4f       	sbci	r21, 0xFF	; 255
    2d62:	6f 4f       	sbci	r22, 0xFF	; 255
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	94 cf       	rjmp	.-216    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    2d68:	01 15       	cp	r16, r1
    2d6a:	11 05       	cpc	r17, r1
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <Binary_points_to_Decimal_Signed+0x484>
    2d6e:	90 cf       	rjmp	.-224    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d70:	49 5f       	subi	r20, 0xF9	; 249
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255
    2d74:	6f 4f       	sbci	r22, 0xFF	; 255
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255
    2d78:	8b cf       	rjmp	.-234    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    2d7a:	e1 14       	cp	r14, r1
    2d7c:	f1 04       	cpc	r15, r1
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <Binary_points_to_Decimal_Signed+0x496>
    2d80:	87 cf       	rjmp	.-242    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d82:	4c 5f       	subi	r20, 0xFC	; 252
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	6f 4f       	sbci	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	82 cf       	rjmp	.-252    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    2d8c:	c1 14       	cp	r12, r1
    2d8e:	d1 04       	cpc	r13, r1
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <Binary_points_to_Decimal_Signed+0x4a8>
    2d92:	7e cf       	rjmp	.-260    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2d94:	4e 5f       	subi	r20, 0xFE	; 254
    2d96:	5f 4f       	sbci	r21, 0xFF	; 255
    2d98:	6f 4f       	sbci	r22, 0xFF	; 255
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	79 cf       	rjmp	.-270    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    2d9e:	a1 14       	cp	r10, r1
    2da0:	b1 04       	cpc	r11, r1
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <Binary_points_to_Decimal_Signed+0x4ba>
    2da4:	75 cf       	rjmp	.-278    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
    2da6:	4f 5f       	subi	r20, 0xFF	; 255
    2da8:	5f 4f       	sbci	r21, 0xFF	; 255
    2daa:	6f 4f       	sbci	r22, 0xFF	; 255
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	70 cf       	rjmp	.-288    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    2db0:	80 31       	cpi	r24, 0x10	; 16
    2db2:	91 05       	cpc	r25, r1
    2db4:	0c f4       	brge	.+2      	; 0x2db8 <Binary_points_to_Decimal_Signed+0x4cc>
    2db6:	6c cf       	rjmp	.-296    	; 0x2c90 <Binary_points_to_Decimal_Signed+0x3a4>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
case 15: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;}}	
return RHSofDP;}
    2db8:	cb 01       	movw	r24, r22
    2dba:	ba 01       	movw	r22, r20
    2dbc:	e4 96       	adiw	r28, 0x34	; 52
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	bf 90       	pop	r11
    2dda:	af 90       	pop	r10
    2ddc:	9f 90       	pop	r9
    2dde:	8f 90       	pop	r8
    2de0:	7f 90       	pop	r7
    2de2:	6f 90       	pop	r6
    2de4:	5f 90       	pop	r5
    2de6:	4f 90       	pop	r4
    2de8:	3f 90       	pop	r3
    2dea:	2f 90       	pop	r2
    2dec:	08 95       	ret

00002dee <float_to_askii>:



/*********************************************************************/
void float_to_askii(long number, signed char expnt, char *print_out_string)
{char expnt_string[12];
    2dee:	3f 92       	push	r3
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	2c 97       	sbiw	r28, 0x0c	; 12
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	2b 01       	movw	r4, r22
    2e22:	3c 01       	movw	r6, r24
    2e24:	34 2e       	mov	r3, r20
    2e26:	79 01       	movw	r14, r18
    2e28:	69 01       	movw	r12, r18
    2e2a:	89 01       	movw	r16, r18
    2e2c:	00 5f       	subi	r16, 0xF0	; 240
    2e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e30:	f9 01       	movw	r30, r18
int space_counter = 0; 
int char_counter=0;
int No_dps = 7;
char overflow = 1;

for(int m = 0; m<=15; m++)print_out_string[m] = 0;
    2e32:	11 92       	st	Z+, r1
    2e34:	e0 17       	cp	r30, r16
    2e36:	f1 07       	cpc	r31, r17
    2e38:	e1 f7       	brne	.-8      	; 0x2e32 <float_to_askii+0x44>

RHSDP = Binary_points_to_Decimal_Signed(number);			//to a decimal number
    2e3a:	c3 01       	movw	r24, r6
    2e3c:	b2 01       	movw	r22, r4
    2e3e:	0e 94 76 14 	call	0x28ec	; 0x28ec <Binary_points_to_Decimal_Signed>
    2e42:	4b 01       	movw	r8, r22
    2e44:	5c 01       	movw	r10, r24
if(number < 0)RHSDP = ~RHSDP;
    2e46:	77 20       	and	r7, r7
    2e48:	24 f4       	brge	.+8      	; 0x2e52 <float_to_askii+0x64>
    2e4a:	80 94       	com	r8
    2e4c:	90 94       	com	r9
    2e4e:	a0 94       	com	r10
    2e50:	b0 94       	com	r11

if (decimalOverflow(10, RHSDP, No_dps))
    2e52:	27 e0       	ldi	r18, 0x07	; 7
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	b5 01       	movw	r22, r10
    2e58:	a4 01       	movw	r20, r8
    2e5a:	8a e0       	ldi	r24, 0x0A	; 10
    2e5c:	0e 94 8b 09 	call	0x1316	; 0x1316 <decimalOverflow>
    2e60:	88 23       	and	r24, r24
    2e62:	c9 f0       	breq	.+50     	; 0x2e96 <float_to_askii+0xa8>
overflow = 0;
for(int k = 0; k < (8-No_dps); k++)inc = inc*10;
inc = inc*5;
RHSDP += inc;

SBtoAL(print_out_string, RHSDP, 10);
    2e64:	b5 01       	movw	r22, r10
    2e66:	a4 01       	movw	r20, r8
    2e68:	4e 5c       	subi	r20, 0xCE	; 206
    2e6a:	55 43       	sbci	r21, 0x35	; 53
    2e6c:	65 46       	sbci	r22, 0x65	; 101
    2e6e:	74 4c       	sbci	r23, 0xC4	; 196
    2e70:	2a e0       	ldi	r18, 0x0A	; 10
    2e72:	c7 01       	movw	r24, r14
    2e74:	0e 94 13 08 	call	0x1026	; 0x1026 <SBtoAL>
for(int k = 0; k <= (8-No_dps); k++)print_out_string[k] = '\0';}
    2e78:	d7 01       	movw	r26, r14
    2e7a:	1c 92       	st	X, r1
    2e7c:	11 96       	adiw	r26, 0x01	; 1
    2e7e:	1c 92       	st	X, r1
    2e80:	11 97       	sbiw	r26, 0x01	; 1

else print_out_string[8] = '0';

print_out_string[9] = '.';
    2e82:	8e e2       	ldi	r24, 0x2E	; 46
    2e84:	19 96       	adiw	r26, 0x09	; 9
    2e86:	8c 93       	st	X, r24
    2e88:	19 97       	sbiw	r26, 0x09	; 9
print_out_string[10] = '0';
    2e8a:	80 e3       	ldi	r24, 0x30	; 48
    2e8c:	1a 96       	adiw	r26, 0x0a	; 10
    2e8e:	8c 93       	st	X, r24

if(number < 0)print_out_string[11] = '-';
    2e90:	77 20       	and	r7, r7
    2e92:	74 f4       	brge	.+28     	; 0x2eb0 <float_to_askii+0xc2>
    2e94:	91 c0       	rjmp	.+290    	; 0x2fb8 <float_to_askii+0x1ca>
RHSDP += inc;

SBtoAL(print_out_string, RHSDP, 10);
for(int k = 0; k <= (8-No_dps); k++)print_out_string[k] = '\0';}

else print_out_string[8] = '0';
    2e96:	80 e3       	ldi	r24, 0x30	; 48
    2e98:	f7 01       	movw	r30, r14
    2e9a:	80 87       	std	Z+8, r24	; 0x08

print_out_string[9] = '.';
    2e9c:	9e e2       	ldi	r25, 0x2E	; 46
    2e9e:	91 87       	std	Z+9, r25	; 0x09
print_out_string[10] = '0';
    2ea0:	82 87       	std	Z+10, r24	; 0x0a

if(number < 0)print_out_string[11] = '-';
    2ea2:	77 20       	and	r7, r7
    2ea4:	0c f4       	brge	.+2      	; 0x2ea8 <float_to_askii+0xba>
    2ea6:	84 c0       	rjmp	.+264    	; 0x2fb0 <float_to_askii+0x1c2>
if (overflow == 1){print_out_string[10] = '1'; }
    2ea8:	81 e3       	ldi	r24, 0x31	; 49
    2eaa:	d7 01       	movw	r26, r14
    2eac:	1a 96       	adiw	r26, 0x0a	; 10
    2eae:	8c 93       	st	X, r24



/*********************************************************************/
void float_to_askii(long number, signed char expnt, char *print_out_string)
{char expnt_string[12];
    2eb0:	f7 01       	movw	r30, r14
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <float_to_askii+0xce>
print_out_string[10] = '0';

if(number < 0)print_out_string[11] = '-';
if (overflow == 1){print_out_string[10] = '1'; }

while ((!(print_out_string[space_counter])) || (print_out_string[space_counter]== '0')) space_counter++;
    2eb8:	2f 5f       	subi	r18, 0xFF	; 255
    2eba:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebc:	81 91       	ld	r24, Z+
    2ebe:	88 23       	and	r24, r24
    2ec0:	d9 f3       	breq	.-10     	; 0x2eb8 <float_to_askii+0xca>
    2ec2:	80 33       	cpi	r24, 0x30	; 48
    2ec4:	c9 f3       	breq	.-14     	; 0x2eb8 <float_to_askii+0xca>
    2ec6:	d7 01       	movw	r26, r14
    2ec8:	a2 0f       	add	r26, r18
    2eca:	b3 1f       	adc	r27, r19
    2ecc:	f7 01       	movw	r30, r14
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	90 e0       	ldi	r25, 0x00	; 0


{int m = 0;
do{print_out_string[m] = print_out_string[m + space_counter]; m++;}
while(m <= (15- space_counter));}
    2ed2:	4f e0       	ldi	r20, 0x0F	; 15
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	42 1b       	sub	r20, r18
    2ed8:	53 0b       	sbc	r21, r19

while ((!(print_out_string[space_counter])) || (print_out_string[space_counter]== '0')) space_counter++;


{int m = 0;
do{print_out_string[m] = print_out_string[m + space_counter]; m++;}
    2eda:	2d 91       	ld	r18, X+
    2edc:	21 93       	st	Z+, r18
    2ede:	01 96       	adiw	r24, 0x01	; 1
while(m <= (15- space_counter));}
    2ee0:	48 17       	cp	r20, r24
    2ee2:	59 07       	cpc	r21, r25
    2ee4:	d4 f7       	brge	.-12     	; 0x2eda <float_to_askii+0xec>


if(expnt){SBtoAL(expnt_string, expnt, 10);
    2ee6:	33 20       	and	r3, r3
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <float_to_askii+0xfe>
    2eea:	45 c0       	rjmp	.+138    	; 0x2f76 <float_to_askii+0x188>
    2eec:	43 2d       	mov	r20, r3
    2eee:	33 0c       	add	r3, r3
    2ef0:	55 0b       	sbc	r21, r21
    2ef2:	66 0b       	sbc	r22, r22
    2ef4:	77 0b       	sbc	r23, r23
    2ef6:	2a e0       	ldi	r18, 0x0A	; 10
    2ef8:	ce 01       	movw	r24, r28
    2efa:	01 96       	adiw	r24, 0x01	; 1
    2efc:	0e 94 13 08 	call	0x1026	; 0x1026 <SBtoAL>
while (expnt_string[char_counter])char_counter++;
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	88 23       	and	r24, r24
    2f04:	51 f0       	breq	.+20     	; 0x2f1a <float_to_askii+0x12c>
    2f06:	fe 01       	movw	r30, r28
    2f08:	32 96       	adiw	r30, 0x02	; 2
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	81 91       	ld	r24, Z+
    2f14:	81 11       	cpse	r24, r1
    2f16:	fb cf       	rjmp	.-10     	; 0x2f0e <float_to_askii+0x120>
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <float_to_askii+0x130>
/*********************************************************************/
void float_to_askii(long number, signed char expnt, char *print_out_string)
{char expnt_string[12];
long inc = 1, RHSDP;
int space_counter = 0; 
int char_counter=0;
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	f7 01       	movw	r30, r14
    2f20:	e2 1b       	sub	r30, r18
    2f22:	f3 0b       	sbc	r31, r19
    2f24:	3d 96       	adiw	r30, 0x0d	; 13

if(expnt){SBtoAL(expnt_string, expnt, 10);
while (expnt_string[char_counter])char_counter++;
char_counter +=2;

{int m = 0;
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
do{print_out_string[15 - m] = print_out_string[15 - m - char_counter]; m++;}
while(m <= (15- char_counter));}
    2f2a:	6d e0       	ldi	r22, 0x0D	; 13
    2f2c:	70 e0       	ldi	r23, 0x00	; 0
    2f2e:	62 1b       	sub	r22, r18
    2f30:	73 0b       	sbc	r23, r19
if(expnt){SBtoAL(expnt_string, expnt, 10);
while (expnt_string[char_counter])char_counter++;
char_counter +=2;

{int m = 0;
do{print_out_string[15 - m] = print_out_string[15 - m - char_counter]; m++;}
    2f32:	40 81       	ld	r20, Z
    2f34:	d8 01       	movw	r26, r16
    2f36:	4e 93       	st	-X, r20
    2f38:	8d 01       	movw	r16, r26
    2f3a:	01 96       	adiw	r24, 0x01	; 1
    2f3c:	31 97       	sbiw	r30, 0x01	; 1
while(m <= (15- char_counter));}
    2f3e:	68 17       	cp	r22, r24
    2f40:	79 07       	cpc	r23, r25
    2f42:	bc f7       	brge	.-18     	; 0x2f32 <float_to_askii+0x144>

{int m = 0; while(m < (char_counter-2)) {print_out_string[m] = expnt_string[m]; m++;}
    2f44:	12 16       	cp	r1, r18
    2f46:	13 06       	cpc	r1, r19
    2f48:	6c f4       	brge	.+26     	; 0x2f64 <float_to_askii+0x176>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	31 96       	adiw	r30, 0x01	; 1
    2f4e:	af 01       	movw	r20, r30
    2f50:	42 0f       	add	r20, r18
    2f52:	53 1f       	adc	r21, r19
    2f54:	81 91       	ld	r24, Z+
    2f56:	d6 01       	movw	r26, r12
    2f58:	8d 93       	st	X+, r24
    2f5a:	6d 01       	movw	r12, r26
    2f5c:	e4 17       	cp	r30, r20
    2f5e:	f5 07       	cpc	r31, r21
    2f60:	c9 f7       	brne	.-14     	; 0x2f54 <float_to_askii+0x166>
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <float_to_askii+0x17a>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
print_out_string[m] = 'X';
    2f68:	f7 01       	movw	r30, r14
    2f6a:	e2 0f       	add	r30, r18
    2f6c:	f3 1f       	adc	r31, r19
    2f6e:	88 e5       	ldi	r24, 0x58	; 88
    2f70:	80 83       	st	Z, r24
print_out_string[m+1] = ' ';}}
    2f72:	80 e2       	ldi	r24, 0x20	; 32
    2f74:	81 83       	std	Z+1, r24	; 0x01

Sc_Num_string_length =0; while(Sc_Num_string[Sc_Num_string_length])Sc_Num_string_length++;
    2f76:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <Sc_Num_string_length+0x1>
    2f7a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <Sc_Num_string_length>
    2f7e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <Sc_Num_string>
    2f82:	88 23       	and	r24, r24
    2f84:	61 f0       	breq	.+24     	; 0x2f9e <float_to_askii+0x1b0>
    2f86:	ef ef       	ldi	r30, 0xFF	; 255
    2f88:	f1 e0       	ldi	r31, 0x01	; 1
    2f8a:	9f 01       	movw	r18, r30
    2f8c:	2e 5f       	subi	r18, 0xFE	; 254
    2f8e:	31 40       	sbci	r19, 0x01	; 1
    2f90:	81 91       	ld	r24, Z+
    2f92:	81 11       	cpse	r24, r1
    2f94:	fa cf       	rjmp	.-12     	; 0x2f8a <float_to_askii+0x19c>
    2f96:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <Sc_Num_string_length+0x1>
    2f9a:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <Sc_Num_string_length>
Sc_Num_string_pointer=0;
    2f9e:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <Sc_Num_string_pointer+0x1>
    2fa2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <Sc_Num_string_pointer>
display_char_skip_counter = 0;}
    2fa6:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <display_char_skip_counter+0x1>
    2faa:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <display_char_skip_counter>
    2fae:	09 c0       	rjmp	.+18     	; 0x2fc2 <float_to_askii+0x1d4>
else print_out_string[8] = '0';

print_out_string[9] = '.';
print_out_string[10] = '0';

if(number < 0)print_out_string[11] = '-';
    2fb0:	8d e2       	ldi	r24, 0x2D	; 45
    2fb2:	f7 01       	movw	r30, r14
    2fb4:	83 87       	std	Z+11, r24	; 0x0b
    2fb6:	78 cf       	rjmp	.-272    	; 0x2ea8 <float_to_askii+0xba>
    2fb8:	8d e2       	ldi	r24, 0x2D	; 45
    2fba:	d7 01       	movw	r26, r14
    2fbc:	1b 96       	adiw	r26, 0x0b	; 11
    2fbe:	8c 93       	st	X, r24
    2fc0:	77 cf       	rjmp	.-274    	; 0x2eb0 <float_to_askii+0xc2>
print_out_string[m] = 'X';
print_out_string[m+1] = ' ';}}

Sc_Num_string_length =0; while(Sc_Num_string[Sc_Num_string_length])Sc_Num_string_length++;
Sc_Num_string_pointer=0;
display_char_skip_counter = 0;}
    2fc2:	2c 96       	adiw	r28, 0x0c	; 12
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	df 90       	pop	r13
    2fdc:	cf 90       	pop	r12
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
    2fe6:	7f 90       	pop	r7
    2fe8:	6f 90       	pop	r6
    2fea:	5f 90       	pop	r5
    2fec:	4f 90       	pop	r4
    2fee:	3f 90       	pop	r3
    2ff0:	08 95       	ret

00002ff2 <__vector_16>:

/*****************************************************************************************/



ISR(TIMER0_OVF_vect) {
    2ff2:	1f 92       	push	r1
    2ff4:	0f 92       	push	r0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	0f 92       	push	r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	2f 93       	push	r18
    2ffe:	3f 93       	push	r19
    3000:	4f 93       	push	r20
    3002:	5f 93       	push	r21
    3004:	6f 93       	push	r22
    3006:	7f 93       	push	r23
    3008:	8f 93       	push	r24
    300a:	9f 93       	push	r25
    300c:	af 93       	push	r26
    300e:	bf 93       	push	r27
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	ef 93       	push	r30
    3016:	ff 93       	push	r31

if(eeprom_read_byte((uint8_t*)0x3FB) == 0xFF){	TCNT0 = 0;		//High brightness 2ms interrupts TCNT0 = 0
    3018:	8b ef       	ldi	r24, 0xFB	; 251
    301a:	93 e0       	ldi	r25, 0x03	; 3
    301c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    3020:	8f 3f       	cpi	r24, 0xFF	; 255
    3022:	91 f4       	brne	.+36     	; 0x3048 <__vector_16+0x56>
    3024:	16 bc       	out	0x26, r1	; 38

if(mode == 'F'){
    3026:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    302a:	86 34       	cpi	r24, 0x46	; 70
    302c:	59 f4       	brne	.+22     	; 0x3044 <__vector_16+0x52>
TIMSK2 &= (!((1 << OCIE2A) | (1 << TOV2)));
    302e:	c0 e7       	ldi	r28, 0x70	; 112
    3030:	d0 e0       	ldi	r29, 0x00	; 0
    3032:	88 81       	ld	r24, Y
    3034:	18 82       	st	Y, r1
sei();
    3036:	78 94       	sei
Display_driver(); 
    3038:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>
TIMSK2 |= ((1 << OCIE2A) | (1 << TOV2));}
    303c:	88 81       	ld	r24, Y
    303e:	83 60       	ori	r24, 0x03	; 3
    3040:	88 83       	st	Y, r24
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <__vector_16+0x56>
else {Display_driver(); }}
    3044:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>

if(eeprom_read_byte((uint8_t*)0x3FB) == 0xFE){					//normal brightness 500uS interrupts TCNT0 = 192;
    3048:	8b ef       	ldi	r24, 0xFB	; 251
    304a:	93 e0       	ldi	r25, 0x03	; 3
    304c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    3050:	8e 3f       	cpi	r24, 0xFE	; 254
    3052:	09 f0       	breq	.+2      	; 0x3056 <__vector_16+0x64>
    3054:	56 c0       	rjmp	.+172    	; 0x3102 <__vector_16+0x110>
if(!(T0_interupt_cnt)){
    3056:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <T0_interupt_cnt>
    305a:	81 11       	cpse	r24, r1
    305c:	11 c0       	rjmp	.+34     	; 0x3080 <__vector_16+0x8e>

if(mode == 'F'){
    305e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    3062:	86 34       	cpi	r24, 0x46	; 70
    3064:	59 f4       	brne	.+22     	; 0x307c <__vector_16+0x8a>
TIMSK2 &= (!((1 << OCIE2A) | (1 << TOV2)));
    3066:	c0 e7       	ldi	r28, 0x70	; 112
    3068:	d0 e0       	ldi	r29, 0x00	; 0
    306a:	88 81       	ld	r24, Y
    306c:	18 82       	st	Y, r1
sei();
    306e:	78 94       	sei
Display_driver(); 
    3070:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>
TIMSK2 |= ((1 << OCIE2A) | (1 << TOV2));}
    3074:	88 81       	ld	r24, Y
    3076:	83 60       	ori	r24, 0x03	; 3
    3078:	88 83       	st	Y, r24
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <__vector_16+0x8e>
else {Display_driver(); }}
    307c:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>

switch (MUX_cntl){
    3080:	e0 91 7f 02 	lds	r30, 0x027F	; 0x80027f <MUX_cntl>
    3084:	8e 2f       	mov	r24, r30
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	88 30       	cpi	r24, 0x08	; 8
    308a:	91 05       	cpc	r25, r1
    308c:	e0 f4       	brcc	.+56     	; 0x30c6 <__vector_16+0xd4>
    308e:	fc 01       	movw	r30, r24
    3090:	ec 5d       	subi	r30, 0xDC	; 220
    3092:	fe 4f       	sbci	r31, 0xFE	; 254
    3094:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 0: TCNT0 = 194; break;		//500uS period
    3098:	82 ec       	ldi	r24, 0xC2	; 194
    309a:	86 bd       	out	0x26, r24	; 38
    309c:	16 c0       	rjmp	.+44     	; 0x30ca <__vector_16+0xd8>
case 1:	TCNT0 = 128; break;		//1mS period  CHECK
    309e:	80 e8       	ldi	r24, 0x80	; 128
    30a0:	86 bd       	out	0x26, r24	; 38
    30a2:	13 c0       	rjmp	.+38     	; 0x30ca <__vector_16+0xd8>
case 2: TCNT0 = 69; break;		//1500uS period CHECK
    30a4:	85 e4       	ldi	r24, 0x45	; 69
    30a6:	86 bd       	out	0x26, r24	; 38
    30a8:	10 c0       	rjmp	.+32     	; 0x30ca <__vector_16+0xd8>
case 3: TCNT0 = 0; break;		//2mS period
    30aa:	16 bc       	out	0x26, r1	; 38
    30ac:	0e c0       	rjmp	.+28     	; 0x30ca <__vector_16+0xd8>
case 4: TCNT0 = 178; break;		//2500uS period
    30ae:	82 eb       	ldi	r24, 0xB2	; 178
    30b0:	86 bd       	out	0x26, r24	; 38
    30b2:	0b c0       	rjmp	.+22     	; 0x30ca <__vector_16+0xd8>
case 5: TCNT0 = 162; break;		//3mS period
    30b4:	82 ea       	ldi	r24, 0xA2	; 162
    30b6:	86 bd       	out	0x26, r24	; 38
    30b8:	08 c0       	rjmp	.+16     	; 0x30ca <__vector_16+0xd8>
case 6: TCNT0 = 100;break;		//5ms period
    30ba:	84 e6       	ldi	r24, 0x64	; 100
    30bc:	86 bd       	out	0x26, r24	; 38
    30be:	05 c0       	rjmp	.+10     	; 0x30ca <__vector_16+0xd8>
case 7: TCNT0 = 194;break;		//8ms period
    30c0:	82 ec       	ldi	r24, 0xC2	; 194
    30c2:	86 bd       	out	0x26, r24	; 38
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <__vector_16+0xd8>
default: TCNT0 = 194; break;}	//500uSS period
    30c6:	82 ec       	ldi	r24, 0xC2	; 194
    30c8:	86 bd       	out	0x26, r24	; 38

switch(T0_interupt_cnt){
    30ca:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <T0_interupt_cnt>
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	51 f0       	breq	.+20     	; 0x30e6 <__vector_16+0xf4>
    30d2:	28 f0       	brcs	.+10     	; 0x30de <__vector_16+0xec>
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	79 f0       	breq	.+30     	; 0x30f6 <__vector_16+0x104>
    30d8:	83 30       	cpi	r24, 0x03	; 3
    30da:	89 f0       	breq	.+34     	; 0x30fe <__vector_16+0x10c>
    30dc:	12 c0       	rjmp	.+36     	; 0x3102 <__vector_16+0x110>
case 0: T0_interupt_cnt = 1;break;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    30e4:	0e c0       	rjmp	.+28     	; 0x3102 <__vector_16+0x110>
case 1: {clear_display;} T0_interupt_cnt = 2; break;
    30e6:	29 9a       	sbi	0x05, 1	; 5
    30e8:	8b b1       	in	r24, 0x0b	; 11
    30ea:	8c 6f       	ori	r24, 0xFC	; 252
    30ec:	8b b9       	out	0x0b, r24	; 11
    30ee:	82 e0       	ldi	r24, 0x02	; 2
    30f0:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    30f4:	06 c0       	rjmp	.+12     	; 0x3102 <__vector_16+0x110>
case 2: T0_interupt_cnt = 3; break;
    30f6:	83 e0       	ldi	r24, 0x03	; 3
    30f8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <__vector_16+0x110>
case 3: T0_interupt_cnt = 0; break;}}
    30fe:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>

if(eeprom_read_byte((uint8_t*)0x3FB) == 0xFD){					//low brightness 125uS interrupts TCNT0 = 240;
    3102:	8b ef       	ldi	r24, 0xFB	; 251
    3104:	93 e0       	ldi	r25, 0x03	; 3
    3106:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    310a:	8d 3f       	cpi	r24, 0xFD	; 253
    310c:	09 f0       	breq	.+2      	; 0x3110 <__vector_16+0x11e>
    310e:	3e c0       	rjmp	.+124    	; 0x318c <__vector_16+0x19a>
if(!(T0_interupt_cnt)){
    3110:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <T0_interupt_cnt>
    3114:	81 11       	cpse	r24, r1
    3116:	11 c0       	rjmp	.+34     	; 0x313a <__vector_16+0x148>
if(mode == 'F'){
    3118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    311c:	86 34       	cpi	r24, 0x46	; 70
    311e:	59 f4       	brne	.+22     	; 0x3136 <__vector_16+0x144>
TIMSK2 &= (!((1 << OCIE2A) | (1 << TOV2)));
    3120:	c0 e7       	ldi	r28, 0x70	; 112
    3122:	d0 e0       	ldi	r29, 0x00	; 0
    3124:	88 81       	ld	r24, Y
    3126:	18 82       	st	Y, r1
sei();
    3128:	78 94       	sei
Display_driver(); 
    312a:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>
TIMSK2 |= ((1 << OCIE2A) | (1 << TOV2));}
    312e:	88 81       	ld	r24, Y
    3130:	83 60       	ori	r24, 0x03	; 3
    3132:	88 83       	st	Y, r24
    3134:	02 c0       	rjmp	.+4      	; 0x313a <__vector_16+0x148>
else {Display_driver(); }}
    3136:	0e 94 87 02 	call	0x50e	; 0x50e <Display_driver>
TCNT0 = 240;
    313a:	80 ef       	ldi	r24, 0xF0	; 240
    313c:	86 bd       	out	0x26, r24	; 38

switch(T0_interupt_cnt){
    313e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <T0_interupt_cnt>
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	b9 f0       	breq	.+46     	; 0x3174 <__vector_16+0x182>
    3146:	28 f4       	brcc	.+10     	; 0x3152 <__vector_16+0x160>
    3148:	88 23       	and	r24, r24
    314a:	41 f0       	breq	.+16     	; 0x315c <__vector_16+0x16a>
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	51 f0       	breq	.+20     	; 0x3164 <__vector_16+0x172>
    3150:	1d c0       	rjmp	.+58     	; 0x318c <__vector_16+0x19a>
    3152:	8f 30       	cpi	r24, 0x0F	; 15
    3154:	98 f0       	brcs	.+38     	; 0x317c <__vector_16+0x18a>
    3156:	8f 30       	cpi	r24, 0x0F	; 15
    3158:	b9 f0       	breq	.+46     	; 0x3188 <__vector_16+0x196>
    315a:	18 c0       	rjmp	.+48     	; 0x318c <__vector_16+0x19a>
case 0: T0_interupt_cnt = 1;break;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    3162:	14 c0       	rjmp	.+40     	; 0x318c <__vector_16+0x19a>
case 1: {clear_display;} T0_interupt_cnt = 2; break;
    3164:	29 9a       	sbi	0x05, 1	; 5
    3166:	8b b1       	in	r24, 0x0b	; 11
    3168:	8c 6f       	ori	r24, 0xFC	; 252
    316a:	8b b9       	out	0x0b, r24	; 11
    316c:	82 e0       	ldi	r24, 0x02	; 2
    316e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    3172:	0c c0       	rjmp	.+24     	; 0x318c <__vector_16+0x19a>
case 2: T0_interupt_cnt = 3; break;
    3174:	83 e0       	ldi	r24, 0x03	; 3
    3176:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    317a:	08 c0       	rjmp	.+16     	; 0x318c <__vector_16+0x19a>
case 9:
case 10:
case 11:
case 12:
case 13:
case 14: T0_interupt_cnt++; break;
    317c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <T0_interupt_cnt>
    3180:	8f 5f       	subi	r24, 0xFF	; 255
    3182:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <T0_interupt_cnt>
    3186:	02 c0       	rjmp	.+4      	; 0x318c <__vector_16+0x19a>
case 15: T0_interupt_cnt = 0; break;}}}
    3188:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>
    318c:	ff 91       	pop	r31
    318e:	ef 91       	pop	r30
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	bf 91       	pop	r27
    3196:	af 91       	pop	r26
    3198:	9f 91       	pop	r25
    319a:	8f 91       	pop	r24
    319c:	7f 91       	pop	r23
    319e:	6f 91       	pop	r22
    31a0:	5f 91       	pop	r21
    31a2:	4f 91       	pop	r20
    31a4:	3f 91       	pop	r19
    31a6:	2f 91       	pop	r18
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <__vector_13>:



/*****************************************************************************************/

ISR(TIMER1_OVF_vect) {
    31b2:	1f 92       	push	r1
    31b4:	0f 92       	push	r0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	0f 92       	push	r0
    31ba:	11 24       	eor	r1, r1
    31bc:	8f 93       	push	r24
    31be:	9f 93       	push	r25
    31c0:	ef 93       	push	r30
    31c2:	ff 93       	push	r31
switch (mode){
    31c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    31c8:	8f 34       	cpi	r24, 0x4F	; 79
    31ca:	30 f4       	brcc	.+12     	; 0x31d8 <__vector_13+0x26>
    31cc:	8d 34       	cpi	r24, 0x4D	; 77
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <__vector_13+0x20>
    31d0:	47 c0       	rjmp	.+142    	; 0x3260 <__vector_13+0xae>
    31d2:	89 30       	cpi	r24, 0x09	; 9
    31d4:	41 f0       	breq	.+16     	; 0x31e6 <__vector_13+0x34>
    31d6:	4a c0       	rjmp	.+148    	; 0x326c <__vector_13+0xba>
    31d8:	84 35       	cpi	r24, 0x54	; 84
    31da:	09 f4       	brne	.+2      	; 0x31de <__vector_13+0x2c>
    31dc:	41 c0       	rjmp	.+130    	; 0x3260 <__vector_13+0xae>
    31de:	88 35       	cpi	r24, 0x58	; 88
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <__vector_13+0x32>
    31e2:	44 c0       	rjmp	.+136    	; 0x326c <__vector_13+0xba>
    31e4:	3d c0       	rjmp	.+122    	; 0x3260 <__vector_13+0xae>
case 9:
{if(!(mode_C_ptr)){for(int m = 0; m<=7; m++)display_buf[m]=0;}
    31e6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <mode_C_ptr>
    31ea:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <mode_C_ptr+0x1>
    31ee:	89 2b       	or	r24, r25
    31f0:	51 f4       	brne	.+20     	; 0x3206 <__vector_13+0x54>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	fc 01       	movw	r30, r24
    31f8:	e1 5f       	subi	r30, 0xF1	; 241
    31fa:	fd 4f       	sbci	r31, 0xFD	; 253
    31fc:	10 82       	st	Z, r1
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	88 30       	cpi	r24, 0x08	; 8
    3202:	91 05       	cpc	r25, r1
    3204:	c1 f7       	brne	.-16     	; 0x31f6 <__vector_13+0x44>
display_buf[7-mode_C_ptr] = '_';
    3206:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <mode_C_ptr>
    320a:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <mode_C_ptr+0x1>
    320e:	e6 e1       	ldi	r30, 0x16	; 22
    3210:	f2 e0       	ldi	r31, 0x02	; 2
    3212:	e8 1b       	sub	r30, r24
    3214:	f9 0b       	sbc	r31, r25
    3216:	8f e5       	ldi	r24, 0x5F	; 95
    3218:	80 83       	st	Z, r24
mode_C_ptr++; mode_C_ptr=mode_C_ptr%8;
    321a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <mode_C_ptr>
    321e:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <mode_C_ptr+0x1>
    3222:	01 96       	adiw	r24, 0x01	; 1
    3224:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <mode_C_ptr+0x1>
    3228:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <mode_C_ptr>
    322c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <mode_C_ptr>
    3230:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <mode_C_ptr+0x1>
    3234:	87 70       	andi	r24, 0x07	; 7
    3236:	90 78       	andi	r25, 0x80	; 128
    3238:	99 23       	and	r25, r25
    323a:	24 f4       	brge	.+8      	; 0x3244 <__vector_13+0x92>
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	88 6f       	ori	r24, 0xF8	; 248
    3240:	9f 6f       	ori	r25, 0xFF	; 255
    3242:	01 96       	adiw	r24, 0x01	; 1
    3244:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <mode_C_ptr+0x1>
    3248:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <mode_C_ptr>



/*****************************************************************************************/
void timer_T1_sub_with_interrupt(char Counter_speed, unsigned int Start_point){ 
TCNT1H = (Start_point >> 8);
    324c:	80 ef       	ldi	r24, 0xF0	; 240
    324e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
TCNT1L = Start_point & 0x00FF;
    3252:	83 ec       	ldi	r24, 0xC3	; 195
    3254:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
TCCR1B = Counter_speed;}
    3258:	85 e0       	ldi	r24, 0x05	; 5
    325a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    325e:	0b c0       	rjmp	.+22     	; 0x3276 <__vector_13+0xc4>
timer_T1_sub_with_interrupt(T1_delay_500ms);} break;

case 'M':  case 'N': case 'T':  case 'X': T1_OVF += 1; break;
    3260:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <T1_OVF>
    3264:	8f 5f       	subi	r24, 0xFF	; 255
    3266:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <T1_OVF>
    326a:	05 c0       	rjmp	.+10     	; 0x3276 <__vector_13+0xc4>

default: T1_ovf_flag = 1; TCCR1B = 0; break;}}
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
    3272:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    3276:	ff 91       	pop	r31
    3278:	ef 91       	pop	r30
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	0f 90       	pop	r0
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	0f 90       	pop	r0
    3284:	1f 90       	pop	r1
    3286:	18 95       	reti

00003288 <__vector_24>:
ISR(TIMER2_COMPA_vect){OCR2A = OCR2A + 41;  OCR2A = OCR2A%256; Ext_tick();}			//call every 10mS mode G only



/*****************************************************************************************/
ISR(TWI_vect){
    3288:	1f 92       	push	r1
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	0f 92       	push	r0
    3290:	11 24       	eor	r1, r1
    3292:	2f 93       	push	r18
    3294:	3f 93       	push	r19
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
switch(entry_point){																	//Address of slave (master read operation)  SLA + R
    32a2:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <entry_point>
    32a6:	8e 2f       	mov	r24, r30
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	fc 01       	movw	r30, r24
    32ac:	e1 54       	subi	r30, 0x41	; 65
    32ae:	f1 09       	sbc	r31, r1
    32b0:	e8 30       	cpi	r30, 0x08	; 8
    32b2:	f1 05       	cpc	r31, r1
    32b4:	08 f0       	brcs	.+2      	; 0x32b8 <__vector_24+0x30>
    32b6:	86 c0       	rjmp	.+268    	; 0x33c4 <__vector_24+0x13c>
    32b8:	e4 5d       	subi	r30, 0xD4	; 212
    32ba:	fe 4f       	sbci	r31, 0xFE	; 254
    32bc:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
case 'A': TWDR = 0x03; TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); 				//Send slave address + 'R'
    32c0:	83 e0       	ldi	r24, 0x03	; 3
    32c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    32c6:	85 e8       	ldi	r24, 0x85	; 133
    32c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='B'; break;
    32cc:	82 e4       	ldi	r24, 0x42	; 66
    32ce:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    32d2:	78 c0       	rjmp	.+240    	; 0x33c4 <__vector_24+0x13c>
case 'B': if (TWSR == 0x40){TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);			//Ack received wait for payload size
    32d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    32d8:	80 34       	cpi	r24, 0x40	; 64
    32da:	39 f4       	brne	.+14     	; 0x32ea <__vector_24+0x62>
    32dc:	85 e8       	ldi	r24, 0x85	; 133
    32de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='C';} 
    32e2:	83 e4       	ldi	r24, 0x43	; 67
    32e4:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    32e8:	6d c0       	rjmp	.+218    	; 0x33c4 <__vector_24+0x13c>
			else {TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE); 
    32ea:	85 ea       	ldi	r24, 0xA5	; 165
    32ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='A';} break;													//Repeated Start: Nack received
    32f0:	81 e4       	ldi	r24, 0x41	; 65
    32f2:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    32f6:	66 c0       	rjmp	.+204    	; 0x33c4 <__vector_24+0x13c>
case 'C': payload_size = TWDR; 
    32f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    32fc:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <payload_size>
			if(!(payload_size))entry_point = 'Z'; 										//No payload: Exit
    3300:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <payload_size>
    3304:	81 11       	cpse	r24, r1
    3306:	04 c0       	rjmp	.+8      	; 0x3310 <__vector_24+0x88>
    3308:	8a e5       	ldi	r24, 0x5A	; 90
    330a:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    330e:	5a c0       	rjmp	.+180    	; 0x33c4 <__vector_24+0x13c>
			else {TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);	//Send a repeated start condition
    3310:	85 ea       	ldi	r24, 0xA5	; 165
    3312:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='E';} break;
    3316:	85 e4       	ldi	r24, 0x45	; 69
    3318:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    331c:	53 c0       	rjmp	.+166    	; 0x33c4 <__vector_24+0x13c>
case 'E': TWDR = 0x03; TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE); 				//Send slave address + 'R'
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3324:	85 e8       	ldi	r24, 0x85	; 133
    3326:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='F'; break;
    332a:	86 e4       	ldi	r24, 0x46	; 70
    332c:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    3330:	49 c0       	rjmp	.+146    	; 0x33c4 <__vector_24+0x13c>
case 'F': if (TWSR != 0x40){TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);		
    3332:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    3336:	80 34       	cpi	r24, 0x40	; 64
    3338:	39 f0       	breq	.+14     	; 0x3348 <__vector_24+0xc0>
    333a:	85 ea       	ldi	r24, 0xA5	; 165
    333c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='E';} 															//Nack received: Send repeated start
    3340:	85 e4       	ldi	r24, 0x45	; 69
    3342:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    3346:	3e c0       	rjmp	.+124    	; 0x33c4 <__vector_24+0x13c>
			else {TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE); 	//Ack received: Continue
    3348:	85 ec       	ldi	r24, 0xC5	; 197
    334a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point='G';} break;
    334e:	87 e4       	ldi	r24, 0x47	; 71
    3350:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    3354:	37 c0       	rjmp	.+110    	; 0x33c4 <__vector_24+0x13c>
case 'G': display_buf[disp_ptr] = TWDR; disp_ptr++; 									//Save first char in display buff
    3356:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <disp_ptr>
    335a:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <disp_ptr+0x1>
    335e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3362:	e1 5f       	subi	r30, 0xF1	; 241
    3364:	fd 4f       	sbci	r31, 0xFD	; 253
    3366:	80 83       	st	Z, r24
    3368:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <disp_ptr>
    336c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <disp_ptr+0x1>
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <disp_ptr+0x1>
    3376:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <disp_ptr>
			if (disp_ptr < (payload_size-1)){TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
    337a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <payload_size>
    337e:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <disp_ptr>
    3382:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <disp_ptr+0x1>
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	28 17       	cp	r18, r24
    338c:	39 07       	cpc	r19, r25
    338e:	3c f4       	brge	.+14     	; 0x339e <__vector_24+0x116>
    3390:	85 ec       	ldi	r24, 0xC5	; 197
    3392:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			entry_point = 'G';}															//Save subsequent chars in display buff
    3396:	87 e4       	ldi	r24, 0x47	; 71
    3398:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    339c:	13 c0       	rjmp	.+38     	; 0x33c4 <__vector_24+0x13c>
			else{TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWIE);entry_point = 'H';}break;
    339e:	85 e8       	ldi	r24, 0x85	; 133
    33a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    33a4:	88 e4       	ldi	r24, 0x48	; 72
    33a6:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
    33aa:	0c c0       	rjmp	.+24     	; 0x33c4 <__vector_24+0x13c>
case 'H': display_buf[disp_ptr] = TWDR;													//Last char
    33ac:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <disp_ptr>
    33b0:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <disp_ptr+0x1>
    33b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    33b8:	e1 5f       	subi	r30, 0xF1	; 241
    33ba:	fd 4f       	sbci	r31, 0xFD	; 253
    33bc:	80 83       	st	Z, r24
			entry_point = 'Z';
    33be:	8a e5       	ldi	r24, 0x5A	; 90
    33c0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
			break;}																		//Data transfer complete: Exit
if(entry_point=='Z'){TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    33c4:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <entry_point>
    33c8:	8a 35       	cpi	r24, 0x5A	; 90
    33ca:	21 f4       	brne	.+8      	; 0x33d4 <__vector_24+0x14c>
    33cc:	84 e9       	ldi	r24, 0x94	; 148
    33ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
wdr();}}
    33d2:	a8 95       	wdr
    33d4:	ff 91       	pop	r31
    33d6:	ef 91       	pop	r30
    33d8:	bf 91       	pop	r27
    33da:	af 91       	pop	r26
    33dc:	9f 91       	pop	r25
    33de:	8f 91       	pop	r24
    33e0:	3f 91       	pop	r19
    33e2:	2f 91       	pop	r18
    33e4:	0f 90       	pop	r0
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	0f 90       	pop	r0
    33ea:	1f 90       	pop	r1
    33ec:	18 95       	reti

000033ee <Ext_tick>:




/*****************************************************************************************/
void Ext_tick(){entry_point='A';
    33ee:	81 e4       	ldi	r24, 0x41	; 65
    33f0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <entry_point>
TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN) | (1 << TWIE);		//send a start condition with TWI interupt
    33f4:	85 ea       	ldi	r24, 0xA5	; 165
    33f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
disp_ptr = 0;
    33fa:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <disp_ptr+0x1>
    33fe:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <disp_ptr>
payload_size=0;}		
    3402:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <payload_size>
    3406:	08 95       	ret

00003408 <__vector_9>:



/*****************************************************************************************/

ISR(TIMER2_OVF_vect) {
    3408:	1f 92       	push	r1
    340a:	0f 92       	push	r0
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	0f 92       	push	r0
    3410:	11 24       	eor	r1, r1
    3412:	2f 93       	push	r18
    3414:	3f 93       	push	r19
    3416:	4f 93       	push	r20
    3418:	5f 93       	push	r21
    341a:	6f 93       	push	r22
    341c:	7f 93       	push	r23
    341e:	8f 93       	push	r24
    3420:	9f 93       	push	r25
    3422:	af 93       	push	r26
    3424:	bf 93       	push	r27
    3426:	ef 93       	push	r30
    3428:	ff 93       	push	r31
long TCNT1_BKP;

switch (mode){
    342a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    342e:	8f 34       	cpi	r24, 0x4F	; 79
    3430:	28 f4       	brcc	.+10     	; 0x343c <__vector_9+0x34>
    3432:	8d 34       	cpi	r24, 0x4D	; 77
    3434:	d0 f4       	brcc	.+52     	; 0x346a <__vector_9+0x62>
    3436:	8b 34       	cpi	r24, 0x4B	; 75
    3438:	39 f0       	breq	.+14     	; 0x3448 <__vector_9+0x40>
    343a:	92 c0       	rjmp	.+292    	; 0x3560 <__vector_9+0x158>
    343c:	84 35       	cpi	r24, 0x54	; 84
    343e:	a9 f0       	breq	.+42     	; 0x346a <__vector_9+0x62>
    3440:	88 35       	cpi	r24, 0x58	; 88
    3442:	09 f0       	breq	.+2      	; 0x3446 <__vector_9+0x3e>
    3444:	8d c0       	rjmp	.+282    	; 0x3560 <__vector_9+0x158>
    3446:	11 c0       	rjmp	.+34     	; 0x346a <__vector_9+0x62>

case 'K':  timer_2_counter++; if(timer_2_counter == 3)
    3448:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer_2_counter>
    344c:	8f 5f       	subi	r24, 0xFF	; 255
    344e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer_2_counter>
    3452:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer_2_counter>
    3456:	83 30       	cpi	r24, 0x03	; 3
    3458:	09 f0       	breq	.+2      	; 0x345c <__vector_9+0x54>
    345a:	a2 c0       	rjmp	.+324    	; 0x35a0 <__vector_9+0x198>
{timer_2_counter=0; display_float(Sc_Num_string);} break;
    345c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <timer_2_counter>
    3460:	8e ef       	ldi	r24, 0xFE	; 254
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	0e 94 e7 09 	call	0x13ce	; 0x13ce <display_float>
    3468:	9b c0       	rjmp	.+310    	; 0x35a0 <__vector_9+0x198>


case 'M':  case 'N': case 'T':  case 'X':  
TCCR1B = 0;																			//Halt T1
    346a:	e1 e8       	ldi	r30, 0x81	; 129
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	10 82       	st	Z, r1
TCNT1_BKP = TCNT1;																	//Copy the value of TCNT1
    3470:	a4 e8       	ldi	r26, 0x84	; 132
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	2d 91       	ld	r18, X+
    3476:	3c 91       	ld	r19, X
    3478:	11 97       	sbiw	r26, 0x01	; 1
TCNT1 = 0;																			//Clear TCNT1
    347a:	11 96       	adiw	r26, 0x01	; 1
    347c:	1c 92       	st	X, r1
    347e:	1e 92       	st	-X, r1
TCCR1B = 1;																			//Get T1 running again ASAP (Note T2 has not stopped running)
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	80 83       	st	Z, r24
if(EA_counter < cal_mode)T1_OVF = 0;														//Ignore first 5 results
    3484:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <cal_mode>
    3488:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <EA_counter>
    348c:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <EA_counter+0x1>
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	48 17       	cp	r20, r24
    3494:	59 07       	cpc	r21, r25
    3496:	1c f4       	brge	.+6      	; 0x349e <__vector_9+0x96>
    3498:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <T1_OVF>
    349c:	57 c0       	rjmp	.+174    	; 0x354c <__vector_9+0x144>
{timer_2_counter=0; display_float(Sc_Num_string);} break;


case 'M':  case 'N': case 'T':  case 'X':  
TCCR1B = 0;																			//Halt T1
TCNT1_BKP = TCNT1;																	//Copy the value of TCNT1
    349e:	c9 01       	movw	r24, r18
    34a0:	a0 e0       	ldi	r26, 0x00	; 0
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
TCNT1 = 0;																			//Clear TCNT1
TCCR1B = 1;																			//Get T1 running again ASAP (Note T2 has not stopped running)
if(EA_counter < cal_mode)T1_OVF = 0;														//Ignore first 5 results
else
{switch(T1_OVF){
    34a4:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <T1_OVF>
    34a8:	21 30       	cpi	r18, 0x01	; 1
    34aa:	e9 f0       	breq	.+58     	; 0x34e6 <__vector_9+0xde>
    34ac:	18 f0       	brcs	.+6      	; 0x34b4 <__vector_9+0xac>
    34ae:	22 30       	cpi	r18, 0x02	; 2
    34b0:	99 f1       	breq	.+102    	; 0x3518 <__vector_9+0x110>
    34b2:	4a c0       	rjmp	.+148    	; 0x3548 <__vector_9+0x140>
case 0: error_SUM = error_SUM + (TCNT1_BKP - 62500); break;
    34b4:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <error_SUM>
    34b8:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <error_SUM+0x1>
    34bc:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <error_SUM+0x2>
    34c0:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <error_SUM+0x3>
    34c4:	84 52       	subi	r24, 0x24	; 36
    34c6:	94 4f       	sbci	r25, 0xF4	; 244
    34c8:	a1 09       	sbc	r26, r1
    34ca:	b1 09       	sbc	r27, r1
    34cc:	84 0f       	add	r24, r20
    34ce:	95 1f       	adc	r25, r21
    34d0:	a6 1f       	adc	r26, r22
    34d2:	b7 1f       	adc	r27, r23
    34d4:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <error_SUM>
    34d8:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <error_SUM+0x1>
    34dc:	a0 93 ae 02 	sts	0x02AE, r26	; 0x8002ae <error_SUM+0x2>
    34e0:	b0 93 af 02 	sts	0x02AF, r27	; 0x8002af <error_SUM+0x3>
    34e4:	31 c0       	rjmp	.+98     	; 0x3548 <__vector_9+0x140>
case 1: error_SUM = error_SUM + (TCNT1_BKP - 62500 + 65536); break;
    34e6:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <error_SUM>
    34ea:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <error_SUM+0x1>
    34ee:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <error_SUM+0x2>
    34f2:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <error_SUM+0x3>
    34f6:	84 52       	subi	r24, 0x24	; 36
    34f8:	94 4f       	sbci	r25, 0xF4	; 244
    34fa:	af 4f       	sbci	r26, 0xFF	; 255
    34fc:	bf 4f       	sbci	r27, 0xFF	; 255
    34fe:	84 0f       	add	r24, r20
    3500:	95 1f       	adc	r25, r21
    3502:	a6 1f       	adc	r26, r22
    3504:	b7 1f       	adc	r27, r23
    3506:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <error_SUM>
    350a:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <error_SUM+0x1>
    350e:	a0 93 ae 02 	sts	0x02AE, r26	; 0x8002ae <error_SUM+0x2>
    3512:	b0 93 af 02 	sts	0x02AF, r27	; 0x8002af <error_SUM+0x3>
    3516:	18 c0       	rjmp	.+48     	; 0x3548 <__vector_9+0x140>
case 2: error_SUM = error_SUM + (TCNT1_BKP - 62500 + 131072); break;}
    3518:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <error_SUM>
    351c:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <error_SUM+0x1>
    3520:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <error_SUM+0x2>
    3524:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <error_SUM+0x3>
    3528:	84 52       	subi	r24, 0x24	; 36
    352a:	94 4f       	sbci	r25, 0xF4	; 244
    352c:	ae 4f       	sbci	r26, 0xFE	; 254
    352e:	bf 4f       	sbci	r27, 0xFF	; 255
    3530:	84 0f       	add	r24, r20
    3532:	95 1f       	adc	r25, r21
    3534:	a6 1f       	adc	r26, r22
    3536:	b7 1f       	adc	r27, r23
    3538:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <error_SUM>
    353c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <error_SUM+0x1>
    3540:	a0 93 ae 02 	sts	0x02AE, r26	; 0x8002ae <error_SUM+0x2>
    3544:	b0 93 af 02 	sts	0x02AF, r27	; 0x8002af <error_SUM+0x3>
T1_OVF = 0;}EA_counter++;break;
    3548:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <T1_OVF>
    354c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <EA_counter>
    3550:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <EA_counter+0x1>
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <EA_counter+0x1>
    355a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <EA_counter>
    355e:	20 c0       	rjmp	.+64     	; 0x35a0 <__vector_9+0x198>


default:
timer_2_counter++; if(timer_2_counter == 16){timer_2_counter=0; 
    3560:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer_2_counter>
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timer_2_counter>
    356a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <timer_2_counter>
    356e:	80 31       	cpi	r24, 0x10	; 16
    3570:	b9 f4       	brne	.+46     	; 0x35a0 <__vector_9+0x198>
    3572:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <timer_2_counter>
if(mode != 'F') {update_timer (); Ten_mS_tick = 41;}									//Internal clock modes 7,8 and 9
    3576:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    357a:	86 34       	cpi	r24, 0x46	; 70
    357c:	41 f0       	breq	.+16     	; 0x358e <__vector_9+0x186>
    357e:	0e 94 a5 04 	call	0x94a	; 0x94a <update_timer>
    3582:	89 e2       	ldi	r24, 0x29	; 41
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Ten_mS_tick+0x1>
    358a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Ten_mS_tick>
if(mode == 'F') { OCR2A = 41;Ext_tick();}}break;}}
    358e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    3592:	86 34       	cpi	r24, 0x46	; 70
    3594:	29 f4       	brne	.+10     	; 0x35a0 <__vector_9+0x198>
    3596:	89 e2       	ldi	r24, 0x29	; 41
    3598:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    359c:	0e 94 f7 19 	call	0x33ee	; 0x33ee <Ext_tick>
    35a0:	ff 91       	pop	r31
    35a2:	ef 91       	pop	r30
    35a4:	bf 91       	pop	r27
    35a6:	af 91       	pop	r26
    35a8:	9f 91       	pop	r25
    35aa:	8f 91       	pop	r24
    35ac:	7f 91       	pop	r23
    35ae:	6f 91       	pop	r22
    35b0:	5f 91       	pop	r21
    35b2:	4f 91       	pop	r20
    35b4:	3f 91       	pop	r19
    35b6:	2f 91       	pop	r18
    35b8:	0f 90       	pop	r0
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <__vector_7>:



/*****************************************************************************************/
ISR(TIMER2_COMPA_vect){OCR2A = OCR2A + 41;  OCR2A = OCR2A%256; Ext_tick();}			//call every 10mS mode G only
    35c2:	1f 92       	push	r1
    35c4:	0f 92       	push	r0
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	0f 92       	push	r0
    35ca:	11 24       	eor	r1, r1
    35cc:	2f 93       	push	r18
    35ce:	3f 93       	push	r19
    35d0:	4f 93       	push	r20
    35d2:	5f 93       	push	r21
    35d4:	6f 93       	push	r22
    35d6:	7f 93       	push	r23
    35d8:	8f 93       	push	r24
    35da:	9f 93       	push	r25
    35dc:	af 93       	push	r26
    35de:	bf 93       	push	r27
    35e0:	ef 93       	push	r30
    35e2:	ff 93       	push	r31
    35e4:	e3 eb       	ldi	r30, 0xB3	; 179
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	87 5d       	subi	r24, 0xD7	; 215
    35ec:	80 83       	st	Z, r24
    35ee:	80 81       	ld	r24, Z
    35f0:	80 83       	st	Z, r24
    35f2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <Ext_tick>
    35f6:	ff 91       	pop	r31
    35f8:	ef 91       	pop	r30
    35fa:	bf 91       	pop	r27
    35fc:	af 91       	pop	r26
    35fe:	9f 91       	pop	r25
    3600:	8f 91       	pop	r24
    3602:	7f 91       	pop	r23
    3604:	6f 91       	pop	r22
    3606:	5f 91       	pop	r21
    3608:	4f 91       	pop	r20
    360a:	3f 91       	pop	r19
    360c:	2f 91       	pop	r18
    360e:	0f 90       	pop	r0
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	0f 90       	pop	r0
    3614:	1f 90       	pop	r1
    3616:	18 95       	reti

00003618 <initialise_timers_for_cal_error>:
}


/************************************************************************************/
void initialise_timers_for_cal_error(void){
TCNT1=0;TCCR1B = 0;										//Reset and halt T1
    3618:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    361c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    3620:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
TCCR2B =  0x0;	while(ASSR & (1 << TCR2BUB));			//Halt T2
    3624:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    3628:	e6 eb       	ldi	r30, 0xB6	; 182
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	80 fd       	sbrc	r24, 0
    3630:	fd cf       	rjmp	.-6      	; 0x362c <initialise_timers_for_cal_error+0x14>
TCCR2A = 0; while(ASSR & (1 << TCR2AUB));				//Reset T2 
    3632:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3636:	e6 eb       	ldi	r30, 0xB6	; 182
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	81 fd       	sbrc	r24, 1
    363e:	fd cf       	rjmp	.-6      	; 0x363a <initialise_timers_for_cal_error+0x22>
TCNT2=0; while(ASSR & (1 << TCN2UB));	}				//Reset TCNT2
    3640:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    3644:	e6 eb       	ldi	r30, 0xB6	; 182
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	80 81       	ld	r24, Z
    364a:	84 fd       	sbrc	r24, 4
    364c:	fd cf       	rjmp	.-6      	; 0x3648 <initialise_timers_for_cal_error+0x30>
    364e:	08 95       	ret

00003650 <start_timers_for_cal_error>:



/************************************************************************************/
void start_timers_for_cal_error(void)
{TCCR2B = 1; 	
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
while(ASSR & (1 << TCR2BUB));
    3656:	e6 eb       	ldi	r30, 0xB6	; 182
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 fd       	sbrc	r24, 0
    365e:	fd cf       	rjmp	.-6      	; 0x365a <start_timers_for_cal_error+0xa>
TCCR1B = 1;}
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    3666:	08 95       	ret

00003668 <compute_error>:



/************************************************************************************************/		
long compute_error(char local_error_mode, char local_cal_mode, char sign)					
{long error;
    3668:	8f 92       	push	r8
    366a:	9f 92       	push	r9
    366c:	af 92       	push	r10
    366e:	bf 92       	push	r11
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
char Num_1, Num_2;
	
if (local_cal_mode == 1){Num_1 = 2; Num_2 = 1;}
if (local_cal_mode == 2){Num_1 = 6; Num_2 = 4;}
    367e:	62 30       	cpi	r22, 0x02	; 2
    3680:	29 f0       	breq	.+10     	; 0x368c <compute_error+0x24>
if (local_cal_mode == 5){Num_1 = 15; Num_2 = 10;}
    3682:	65 30       	cpi	r22, 0x05	; 5
    3684:	31 f4       	brne	.+12     	; 0x3692 <compute_error+0x2a>
    3686:	ca e0       	ldi	r28, 0x0A	; 10
    3688:	ef e0       	ldi	r30, 0x0F	; 15
    368a:	05 c0       	rjmp	.+10     	; 0x3696 <compute_error+0x2e>
long compute_error(char local_error_mode, char local_cal_mode, char sign)					
{long error;
char Num_1, Num_2;
	
if (local_cal_mode == 1){Num_1 = 2; Num_2 = 1;}
if (local_cal_mode == 2){Num_1 = 6; Num_2 = 4;}
    368c:	c4 e0       	ldi	r28, 0x04	; 4
    368e:	e6 e0       	ldi	r30, 0x06	; 6
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <compute_error+0x2e>
    3692:	c1 e0       	ldi	r28, 0x01	; 1
    3694:	e2 e0       	ldi	r30, 0x02	; 2
if (local_cal_mode == 5){Num_1 = 15; Num_2 = 10;}
		
EA_counter = 0;													//Compute error for each value of OSCCAL 10 times
    3696:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <EA_counter+0x1>
    369a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <EA_counter>
error_SUM = 0;
    369e:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <error_SUM>
    36a2:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <error_SUM+0x1>
    36a6:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <error_SUM+0x2>
    36aa:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <error_SUM+0x3>
while(EA_counter < Num_1);EA_counter = 0;
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <EA_counter>
    36b4:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <EA_counter+0x1>
    36b8:	6e 17       	cp	r22, r30
    36ba:	7f 07       	cpc	r23, r31
    36bc:	cc f3       	brlt	.-14     	; 0x36b0 <compute_error+0x48>
    36be:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <EA_counter+0x1>
    36c2:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <EA_counter>
error = error_SUM;
    36c6:	c0 90 ac 02 	lds	r12, 0x02AC	; 0x8002ac <error_SUM>
    36ca:	d0 90 ad 02 	lds	r13, 0x02AD	; 0x8002ad <error_SUM+0x1>
    36ce:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <error_SUM+0x2>
    36d2:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <error_SUM+0x3>
if ((!sign) && (error < 0)) error *= (-1);
    36d6:	41 11       	cpse	r20, r1
    36d8:	0a c0       	rjmp	.+20     	; 0x36ee <compute_error+0x86>
    36da:	ff 20       	and	r15, r15
    36dc:	44 f4       	brge	.+16     	; 0x36ee <compute_error+0x86>
    36de:	f0 94       	com	r15
    36e0:	e0 94       	com	r14
    36e2:	d0 94       	com	r13
    36e4:	c0 94       	com	r12
    36e6:	c1 1c       	adc	r12, r1
    36e8:	d1 1c       	adc	r13, r1
    36ea:	e1 1c       	adc	r14, r1
    36ec:	f1 1c       	adc	r15, r1
if (local_error_mode)
    36ee:	88 23       	and	r24, r24
    36f0:	f1 f0       	breq	.+60     	; 0x372e <compute_error+0xc6>
{buffer[EA_buff_ptr] = error/Num_2; EA_buff_ptr++;}
    36f2:	00 91 6d 02 	lds	r16, 0x026D	; 0x80026d <EA_buff_ptr>
    36f6:	10 91 6e 02 	lds	r17, 0x026E	; 0x80026e <EA_buff_ptr+0x1>
    36fa:	00 0f       	add	r16, r16
    36fc:	11 1f       	adc	r17, r17
    36fe:	07 5e       	subi	r16, 0xE7	; 231
    3700:	1d 4f       	sbci	r17, 0xFD	; 253
    3702:	8c 2e       	mov	r8, r28
    3704:	91 2c       	mov	r9, r1
    3706:	a1 2c       	mov	r10, r1
    3708:	b1 2c       	mov	r11, r1
    370a:	c7 01       	movw	r24, r14
    370c:	b6 01       	movw	r22, r12
    370e:	a5 01       	movw	r20, r10
    3710:	94 01       	movw	r18, r8
    3712:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__divmodsi4>
    3716:	f8 01       	movw	r30, r16
    3718:	31 83       	std	Z+1, r19	; 0x01
    371a:	20 83       	st	Z, r18
    371c:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <EA_buff_ptr>
    3720:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <EA_buff_ptr+0x1>
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <EA_buff_ptr+0x1>
    372a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <EA_buff_ptr>
return error/Num_2;}
    372e:	2c 2f       	mov	r18, r28
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	c7 01       	movw	r24, r14
    3738:	b6 01       	movw	r22, r12
    373a:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__divmodsi4>
    373e:	ca 01       	movw	r24, r20
    3740:	b9 01       	movw	r22, r18
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	ff 90       	pop	r15
    374a:	ef 90       	pop	r14
    374c:	df 90       	pop	r13
    374e:	cf 90       	pop	r12
    3750:	bf 90       	pop	r11
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	08 95       	ret

0000375a <Minimise_error>:



/*************************************************************/
void Minimise_error(int limit, char *counter_1, char *counter_2, long *error_mag, char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
    375a:	4f 92       	push	r4
    375c:	5f 92       	push	r5
    375e:	6f 92       	push	r6
    3760:	7f 92       	push	r7
    3762:	8f 92       	push	r8
    3764:	9f 92       	push	r9
    3766:	af 92       	push	r10
    3768:	bf 92       	push	r11
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	0f 93       	push	r16
    3772:	1f 93       	push	r17
    3774:	cf 93       	push	r28
    3776:	df 93       	push	r29
    3778:	2c 01       	movw	r4, r24
    377a:	eb 01       	movw	r28, r22
    377c:	6a 01       	movw	r12, r20
    377e:	59 01       	movw	r10, r18
    3780:	fa 01       	movw	r30, r20
    3782:	90 81       	ld	r25, Z
    3784:	94 31       	cpi	r25, 0x14	; 20
    3786:	70 f5       	brcc	.+92     	; 0x37e4 <Minimise_error+0x8a>
    3788:	0f 2e       	mov	r0, r31
    378a:	f6 e6       	ldi	r31, 0x66	; 102
    378c:	8f 2e       	mov	r8, r31
    378e:	91 2c       	mov	r9, r1
    3790:	f0 2d       	mov	r31, r0
if(*error_mag < limit)break;
    3792:	05 2c       	mov	r0, r5
    3794:	00 0c       	add	r0, r0
    3796:	66 08       	sbc	r6, r6
    3798:	77 08       	sbc	r7, r7



/*************************************************************/
void Minimise_error(int limit, char *counter_1, char *counter_2, long *error_mag, char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
    379a:	88 81       	ld	r24, Y
    379c:	f4 01       	movw	r30, r8
    379e:	80 83       	st	Z, r24
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	6e 2d       	mov	r22, r14
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    37aa:	f5 01       	movw	r30, r10
    37ac:	60 83       	st	Z, r22
    37ae:	71 83       	std	Z+1, r23	; 0x01
    37b0:	82 83       	std	Z+2, r24	; 0x02
    37b2:	93 83       	std	Z+3, r25	; 0x03
if(*error_mag < limit)break;
    37b4:	64 15       	cp	r22, r4
    37b6:	75 05       	cpc	r23, r5
    37b8:	86 05       	cpc	r24, r6
    37ba:	97 05       	cpc	r25, r7
    37bc:	54 f0       	brlt	.+20     	; 0x37d2 <Minimise_error+0x78>
*counter_1 -= 1;
    37be:	88 81       	ld	r24, Y
    37c0:	81 50       	subi	r24, 0x01	; 1
    37c2:	88 83       	st	Y, r24
*counter_2 +=1;}
    37c4:	f6 01       	movw	r30, r12
    37c6:	80 81       	ld	r24, Z
    37c8:	8f 5f       	subi	r24, 0xFF	; 255
    37ca:	80 83       	st	Z, r24



/*************************************************************/
void Minimise_error(int limit, char *counter_1, char *counter_2, long *error_mag, char *OSCCAL_mem, char local_cal_mode )
{while(*counter_2 < 20){ OSCCAL = *counter_1; *error_mag = compute_error(0,local_cal_mode,0); 
    37cc:	84 31       	cpi	r24, 0x14	; 20
    37ce:	28 f3       	brcs	.-54     	; 0x379a <Minimise_error+0x40>
    37d0:	09 c0       	rjmp	.+18     	; 0x37e4 <Minimise_error+0x8a>
if(*error_mag < limit)break;
*counter_1 -= 1;
*counter_2 +=1;}
if (*counter_2 < 20)*OSCCAL_mem = OSCCAL;else OSCCAL = *OSCCAL_mem;}
    37d2:	f6 01       	movw	r30, r12
    37d4:	80 81       	ld	r24, Z
    37d6:	84 31       	cpi	r24, 0x14	; 20
    37d8:	28 f4       	brcc	.+10     	; 0x37e4 <Minimise_error+0x8a>
    37da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    37de:	f8 01       	movw	r30, r16
    37e0:	80 83       	st	Z, r24
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <Minimise_error+0x92>
    37e4:	f8 01       	movw	r30, r16
    37e6:	80 81       	ld	r24, Z
    37e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	0f 91       	pop	r16
    37f4:	ef 90       	pop	r14
    37f6:	df 90       	pop	r13
    37f8:	cf 90       	pop	r12
    37fa:	bf 90       	pop	r11
    37fc:	af 90       	pop	r10
    37fe:	9f 90       	pop	r9
    3800:	8f 90       	pop	r8
    3802:	7f 90       	pop	r7
    3804:	6f 90       	pop	r6
    3806:	5f 90       	pop	r5
    3808:	4f 90       	pop	r4
    380a:	08 95       	ret

0000380c <I2C_Tx_2URNs_from_IO>:



void I2C_Tx_2URNs_from_IO (void){									//Acquires 2 Unsigned Real Numbers from the user switches
    380c:	cf 92       	push	r12
    380e:	df 92       	push	r13
    3810:	ef 92       	push	r14
    3812:	ff 92       	push	r15
    3814:	0f 93       	push	r16
    3816:	1f 93       	push	r17
    3818:	cf 93       	push	r28
    381a:	df 93       	push	r29

char SW3_keypress, sw2_keypress,Return, keypres_counter;

if ((!(I2C_data[1]))&&(!(I2C_data[2]))&&(!(I2C_data[3]))\
    381c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <I2C_data+0x1>
    3820:	81 11       	cpse	r24, r1
    3822:	30 c0       	rjmp	.+96     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
    3824:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <I2C_data+0x2>
    3828:	81 11       	cpse	r24, r1
    382a:	2c c0       	rjmp	.+88     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
    382c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <I2C_data+0x3>
    3830:	81 11       	cpse	r24, r1
    3832:	28 c0       	rjmp	.+80     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
&&(!(I2C_data[4]))&&(!(I2C_data[5]))&&(!(I2C_data[6]))\
    3834:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <I2C_data+0x4>
    3838:	81 11       	cpse	r24, r1
    383a:	24 c0       	rjmp	.+72     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
    383c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <I2C_data+0x5>
    3840:	81 11       	cpse	r24, r1
    3842:	20 c0       	rjmp	.+64     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
    3844:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <I2C_data+0x6>
    3848:	81 11       	cpse	r24, r1
    384a:	1c c0       	rjmp	.+56     	; 0x3884 <I2C_Tx_2URNs_from_IO+0x78>
&&(!(I2C_data[7])))												//Test for new sum and initialise variables
    384c:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <I2C_data+0x7>
    3850:	f1 10       	cpse	r15, r1
    3852:	72 c2       	rjmp	.+1252   	; 0x3d38 <I2C_Tx_2URNs_from_IO+0x52c>
	{if(I2C_data[0]=='A')
    3854:	10 91 d8 01 	lds	r17, 0x01D8	; 0x8001d8 <I2C_data>
    3858:	11 34       	cpi	r17, 0x41	; 65
    385a:	09 f0       	breq	.+2      	; 0x385e <I2C_Tx_2URNs_from_IO+0x52>
    385c:	58 c2       	rjmp	.+1200   	; 0x3d0e <I2C_Tx_2URNs_from_IO+0x502>
		{exponent[0]=0;exponent[1]=0; display_mask = 0; 
    385e:	e8 ea       	ldi	r30, 0xA8	; 168
    3860:	f2 e0       	ldi	r31, 0x02	; 2
    3862:	10 82       	st	Z, r1
    3864:	11 82       	std	Z+1, r1	; 0x01
    3866:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <display_mask>
		RN=0;keypres_counter_old=0; exponent_BKP[0]=0; 
    386a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <RN+0x1>
    386e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <RN>
    3872:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <keypres_counter_old>
    3876:	e3 e8       	ldi	r30, 0x83	; 131
    3878:	f2 e0       	ldi	r31, 0x02	; 2
    387a:	10 82       	st	Z, r1
		exponent_BKP[1]=0; overflow=0; return;}}
    387c:	11 82       	std	Z+1, r1	; 0x01
    387e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <overflow>
    3882:	9d c2       	rjmp	.+1338   	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>

if ((I2C_data[0] =='P') & (!(exponent[RN])))						//Initialise exponent and display mask
    3884:	10 91 d8 01 	lds	r17, 0x01D8	; 0x8001d8 <I2C_data>
    3888:	31 e0       	ldi	r19, 0x01	; 1
    388a:	10 35       	cpi	r17, 0x50	; 80
    388c:	09 f0       	breq	.+2      	; 0x3890 <I2C_Tx_2URNs_from_IO+0x84>
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <RN>
    3894:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <RN+0x1>
    3898:	fa 01       	movw	r30, r20
    389a:	e8 55       	subi	r30, 0x58	; 88
    389c:	fd 4f       	sbci	r31, 0xFD	; 253
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	90 81       	ld	r25, Z
    38a2:	91 11       	cpse	r25, r1
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	88 23       	and	r24, r24
    38a8:	11 f0       	breq	.+4      	; 0x38ae <I2C_Tx_2URNs_from_IO+0xa2>
    38aa:	31 11       	cpse	r19, r1
    38ac:	07 c0       	rjmp	.+14     	; 0x38bc <I2C_Tx_2URNs_from_IO+0xb0>
	{exponent[RN]=-1;for (int m = 0; m < 8; m++)
	display_buf[m] = I2C_data[m];return;}

{int m=0;while (I2C_data[7-m]==0)m++; keypres_counter=8-m;}  		//Detect & count sw3 keypresses
    38ae:	f0 90 df 01 	lds	r15, 0x01DF	; 0x8001df <I2C_data+0x7>
    38b2:	ff 20       	and	r15, r15
    38b4:	b1 f0       	breq	.+44     	; 0x38e2 <I2C_Tx_2URNs_from_IO+0xd6>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	1c c0       	rjmp	.+56     	; 0x38f4 <I2C_Tx_2URNs_from_IO+0xe8>
		{exponent[0]=0;exponent[1]=0; display_mask = 0; 
		RN=0;keypres_counter_old=0; exponent_BKP[0]=0; 
		exponent_BKP[1]=0; overflow=0; return;}}

if ((I2C_data[0] =='P') & (!(exponent[RN])))						//Initialise exponent and display mask
	{exponent[RN]=-1;for (int m = 0; m < 8; m++)
    38bc:	fa 01       	movw	r30, r20
    38be:	e8 55       	subi	r30, 0x58	; 88
    38c0:	fd 4f       	sbci	r31, 0xFD	; 253
    38c2:	8f ef       	ldi	r24, 0xFF	; 255
    38c4:	80 83       	st	Z, r24
    38c6:	e8 ed       	ldi	r30, 0xD8	; 216
    38c8:	f1 e0       	ldi	r31, 0x01	; 1
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
	display_buf[m] = I2C_data[m];return;}
    38ce:	21 91       	ld	r18, Z+
    38d0:	dc 01       	movw	r26, r24
    38d2:	a1 5f       	subi	r26, 0xF1	; 241
    38d4:	bd 4f       	sbci	r27, 0xFD	; 253
    38d6:	2c 93       	st	X, r18
		{exponent[0]=0;exponent[1]=0; display_mask = 0; 
		RN=0;keypres_counter_old=0; exponent_BKP[0]=0; 
		exponent_BKP[1]=0; overflow=0; return;}}

if ((I2C_data[0] =='P') & (!(exponent[RN])))						//Initialise exponent and display mask
	{exponent[RN]=-1;for (int m = 0; m < 8; m++)
    38d8:	01 96       	adiw	r24, 0x01	; 1
    38da:	88 30       	cpi	r24, 0x08	; 8
    38dc:	91 05       	cpc	r25, r1
    38de:	b9 f7       	brne	.-18     	; 0x38ce <I2C_Tx_2URNs_from_IO+0xc2>
    38e0:	6e c2       	rjmp	.+1244   	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
    38e2:	ef ed       	ldi	r30, 0xDF	; 223
    38e4:	f1 e0       	ldi	r31, 0x01	; 1
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e0       	ldi	r25, 0x00	; 0
	display_buf[m] = I2C_data[m];return;}

{int m=0;while (I2C_data[7-m]==0)m++; keypres_counter=8-m;}  		//Detect & count sw3 keypresses
    38ea:	01 96       	adiw	r24, 0x01	; 1
    38ec:	22 91       	ld	r18, -Z
    38ee:	22 23       	and	r18, r18
    38f0:	e1 f3       	breq	.-8      	; 0x38ea <I2C_Tx_2URNs_from_IO+0xde>
    38f2:	f1 2c       	mov	r15, r1
    38f4:	08 2f       	mov	r16, r24
    38f6:	98 e0       	ldi	r25, 0x08	; 8
    38f8:	98 1b       	sub	r25, r24
    38fa:	89 2f       	mov	r24, r25
if ((keypres_counter != keypres_counter_old) ||\
    38fc:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <keypres_counter_old>
    3900:	89 13       	cpse	r24, r25
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <I2C_Tx_2URNs_from_IO+0xfc>
 ((keypres_counter == keypres_counter_old)\
 && (I2C_data[0] =='P')))
		SW3_keypress=1; 
    3904:	73 2f       	mov	r23, r19
    3906:	01 c0       	rjmp	.+2      	; 0x390a <I2C_Tx_2URNs_from_IO+0xfe>
    3908:	71 e0       	ldi	r23, 0x01	; 1
		else SW3_keypress=0;  
keypres_counter_old=keypres_counter;
    390a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <keypres_counter_old>
    390e:	c8 ed       	ldi	r28, 0xD8	; 216
    3910:	d1 e0       	ldi	r29, 0x01	; 1
    3912:	fe 01       	movw	r30, r28

sw2_keypress=0;														//Detect SW2 keypresses
for(int m=0; m<8; m++)
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
 && (I2C_data[0] =='P')))
		SW3_keypress=1; 
		else SW3_keypress=0;  
keypres_counter_old=keypres_counter;

sw2_keypress=0;														//Detect SW2 keypresses
    3918:	60 e0       	ldi	r22, 0x00	; 0
for(int m=0; m<8; m++)
{if(display_buf[m] == I2C_data[m])sw2_keypress++;} 
    391a:	dc 01       	movw	r26, r24
    391c:	a1 5f       	subi	r26, 0xF1	; 241
    391e:	bd 4f       	sbci	r27, 0xFD	; 253
    3920:	3c 91       	ld	r19, X
    3922:	21 91       	ld	r18, Z+
    3924:	32 13       	cpse	r19, r18
    3926:	01 c0       	rjmp	.+2      	; 0x392a <I2C_Tx_2URNs_from_IO+0x11e>
    3928:	6f 5f       	subi	r22, 0xFF	; 255
		SW3_keypress=1; 
		else SW3_keypress=0;  
keypres_counter_old=keypres_counter;

sw2_keypress=0;														//Detect SW2 keypresses
for(int m=0; m<8; m++)
    392a:	01 96       	adiw	r24, 0x01	; 1
    392c:	88 30       	cpi	r24, 0x08	; 8
    392e:	91 05       	cpc	r25, r1
    3930:	a1 f7       	brne	.-24     	; 0x391a <I2C_Tx_2URNs_from_IO+0x10e>
{if(display_buf[m] == I2C_data[m])sw2_keypress++;} 
if ((sw2_keypress == 8) && (I2C_data[0] !='P')) 
    3932:	68 30       	cpi	r22, 0x08	; 8
    3934:	29 f4       	brne	.+10     	; 0x3940 <I2C_Tx_2URNs_from_IO+0x134>
Return = 1; else Return = 0; 
    3936:	91 e0       	ldi	r25, 0x01	; 1
    3938:	10 35       	cpi	r17, 0x50	; 80
    393a:	19 f4       	brne	.+6      	; 0x3942 <I2C_Tx_2URNs_from_IO+0x136>
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	01 c0       	rjmp	.+2      	; 0x3942 <I2C_Tx_2URNs_from_IO+0x136>
    3940:	90 e0       	ldi	r25, 0x00	; 0
																	//Check for overflow condition
if((display_buf[7]) && ((I2C_data[7] != display_buf[7])
    3942:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <display_buf+0x7>
    3946:	88 23       	and	r24, r24
    3948:	39 f1       	breq	.+78     	; 0x3998 <I2C_Tx_2URNs_from_IO+0x18c>
    394a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <display_buf+0x7>
    394e:	f8 12       	cpse	r15, r24
    3950:	1e c0       	rjmp	.+60     	; 0x398e <I2C_Tx_2URNs_from_IO+0x182>
|| (I2C_data[6] != display_buf[6])\
    3952:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <display_buf+0x6>
    3956:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <I2C_data+0x6>
    395a:	28 13       	cpse	r18, r24
    395c:	18 c0       	rjmp	.+48     	; 0x398e <I2C_Tx_2URNs_from_IO+0x182>
|| (I2C_data[5] != display_buf[5])\
    395e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <display_buf+0x5>
    3962:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <I2C_data+0x5>
    3966:	28 13       	cpse	r18, r24
    3968:	12 c0       	rjmp	.+36     	; 0x398e <I2C_Tx_2URNs_from_IO+0x182>
|| (I2C_data[4] != display_buf[4])\
    396a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <display_buf+0x4>
    396e:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <I2C_data+0x4>
    3972:	28 13       	cpse	r18, r24
    3974:	0c c0       	rjmp	.+24     	; 0x398e <I2C_Tx_2URNs_from_IO+0x182>
|| (I2C_data[3] != display_buf[3])
    3976:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
    397a:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <I2C_data+0x3>
    397e:	28 13       	cpse	r18, r24
    3980:	06 c0       	rjmp	.+12     	; 0x398e <I2C_Tx_2URNs_from_IO+0x182>
|| (I2C_data[2] != display_buf[2]))){overflow++;} 
    3982:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
    3986:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <I2C_data+0x2>
    398a:	28 17       	cp	r18, r24
    398c:	29 f0       	breq	.+10     	; 0x3998 <I2C_Tx_2URNs_from_IO+0x18c>
    398e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <overflow>
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <overflow>
if(overflow)Return = 1;
    3998:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <overflow>
    399c:	81 11       	cpse	r24, r1
    399e:	0b c2       	rjmp	.+1046   	; 0x3db6 <I2C_Tx_2URNs_from_IO+0x5aa>
    39a0:	e3 c1       	rjmp	.+966    	; 0x3d68 <I2C_Tx_2URNs_from_IO+0x55c>

if((!(Return)) &&(!(overflow))){									//Update display and exponent during entry of a single number
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
for (int m = 0; m < 8; m++){display_buf[m] = I2C_data[m];}
    39a6:	29 91       	ld	r18, Y+
    39a8:	fc 01       	movw	r30, r24
    39aa:	e1 5f       	subi	r30, 0xF1	; 241
    39ac:	fd 4f       	sbci	r31, 0xFD	; 253
    39ae:	20 83       	st	Z, r18
    39b0:	01 96       	adiw	r24, 0x01	; 1
    39b2:	88 30       	cpi	r24, 0x08	; 8
    39b4:	91 05       	cpc	r25, r1
    39b6:	b9 f7       	brne	.-18     	; 0x39a6 <I2C_Tx_2URNs_from_IO+0x19a>
if(SW3_keypress){if((!(RN)) && exponent[0])
    39b8:	77 23       	and	r23, r23
    39ba:	09 f4       	brne	.+2      	; 0x39be <I2C_Tx_2URNs_from_IO+0x1b2>
    39bc:	00 c2       	rjmp	.+1024   	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
    39be:	45 2b       	or	r20, r21
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <I2C_Tx_2URNs_from_IO+0x1b8>
    39c2:	d5 c1       	rjmp	.+938    	; 0x3d6e <I2C_Tx_2URNs_from_IO+0x562>
    39c4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <exponent>
    39c8:	88 23       	and	r24, r24
    39ca:	09 f4       	brne	.+2      	; 0x39ce <I2C_Tx_2URNs_from_IO+0x1c2>
    39cc:	f8 c1       	rjmp	.+1008   	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
	{display_mask = (display_mask <<1) + 1; exponent[0]--;
    39ce:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <display_mask>
    39d2:	99 0f       	add	r25, r25
    39d4:	9f 5f       	subi	r25, 0xFF	; 255
    39d6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <display_mask>
    39da:	81 50       	subi	r24, 0x01	; 1
    39dc:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <exponent>
	for(int p = 0; p < 8; p++)strobe[p] = 0;}						//synchronise strobe
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	fc 01       	movw	r30, r24
    39e6:	e4 57       	subi	r30, 0x74	; 116
    39e8:	fd 4f       	sbci	r31, 0xFD	; 253
    39ea:	10 82       	st	Z, r1
    39ec:	01 96       	adiw	r24, 0x01	; 1
    39ee:	88 30       	cpi	r24, 0x08	; 8
    39f0:	91 05       	cpc	r25, r1
    39f2:	c1 f7       	brne	.-16     	; 0x39e4 <I2C_Tx_2URNs_from_IO+0x1d8>
    39f4:	e4 c1       	rjmp	.+968    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>

if(RN){
if(!(exponent[1])){display_mask = (display_mask <<1);
    39f6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
    39fa:	88 0f       	add	r24, r24
    39fc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
for(int p = 0; p < 8; p++)strobe[p] = 0;}
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	fc 01       	movw	r30, r24
    3a06:	e4 57       	subi	r30, 0x74	; 116
    3a08:	fd 4f       	sbci	r31, 0xFD	; 253
    3a0a:	10 82       	st	Z, r1
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	88 30       	cpi	r24, 0x08	; 8
    3a10:	91 05       	cpc	r25, r1
    3a12:	c1 f7       	brne	.-16     	; 0x3a04 <I2C_Tx_2URNs_from_IO+0x1f8>
    3a14:	d4 c1       	rjmp	.+936    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
if (exponent[1]<-1){display_mask =  (display_mask <<1) + 1; 
    3a16:	8f 3f       	cpi	r24, 0xFF	; 255
    3a18:	9c f4       	brge	.+38     	; 0x3a40 <I2C_Tx_2URNs_from_IO+0x234>
    3a1a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <display_mask>
    3a1e:	99 0f       	add	r25, r25
    3a20:	9f 5f       	subi	r25, 0xFF	; 255
    3a22:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <display_mask>
exponent[1]--; for(int p = 0; p < 8; p++)strobe[p] = 0;}
    3a26:	81 50       	subi	r24, 0x01	; 1
    3a28:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <exponent+0x1>
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	fc 01       	movw	r30, r24
    3a32:	e4 57       	subi	r30, 0x74	; 116
    3a34:	fd 4f       	sbci	r31, 0xFD	; 253
    3a36:	10 82       	st	Z, r1
    3a38:	01 96       	adiw	r24, 0x01	; 1
    3a3a:	88 30       	cpi	r24, 0x08	; 8
    3a3c:	91 05       	cpc	r25, r1
    3a3e:	c1 f7       	brne	.-16     	; 0x3a30 <I2C_Tx_2URNs_from_IO+0x224>
if(exponent[1]==-1){display_mask +=1;
    3a40:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <exponent+0x1>
    3a44:	8f 3f       	cpi	r24, 0xFF	; 255
    3a46:	09 f0       	breq	.+2      	; 0x3a4a <I2C_Tx_2URNs_from_IO+0x23e>
    3a48:	ba c1       	rjmp	.+884    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
    3a4a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
    3a4e:	8f 5f       	subi	r24, 0xFF	; 255
    3a50:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
for(int p = 0; p < 8; p++)strobe[p] = 0;exponent[1]--;}}}}
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	fc 01       	movw	r30, r24
    3a5a:	e4 57       	subi	r30, 0x74	; 116
    3a5c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a5e:	10 82       	st	Z, r1
    3a60:	01 96       	adiw	r24, 0x01	; 1
    3a62:	88 30       	cpi	r24, 0x08	; 8
    3a64:	91 05       	cpc	r25, r1
    3a66:	c1 f7       	brne	.-16     	; 0x3a58 <I2C_Tx_2URNs_from_IO+0x24c>
    3a68:	8e ef       	ldi	r24, 0xFE	; 254
    3a6a:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <exponent+0x1>
    3a6e:	a7 c1       	rjmp	.+846    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
    3a70:	a8 ed       	ldi	r26, 0xD8	; 216
    3a72:	b1 e0       	ldi	r27, 0x01	; 1
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
	
																	//Enter second number when complete
if((Return)){														//sw2 keypress
if(RN){																//Second sw2 keypress
for(int m = 0; m<=7; m++)
{I2C_data[m]=display_buf[m];display_buf[m] = 0;}
    3a78:	fc 01       	movw	r30, r24
    3a7a:	e1 5f       	subi	r30, 0xF1	; 241
    3a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a7e:	20 81       	ld	r18, Z
    3a80:	2d 93       	st	X+, r18
    3a82:	10 82       	st	Z, r1
for(int p = 0; p < 8; p++)strobe[p] = 0;exponent[1]--;}}}}
	
																	//Enter second number when complete
if((Return)){														//sw2 keypress
if(RN){																//Second sw2 keypress
for(int m = 0; m<=7; m++)
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	88 30       	cpi	r24, 0x08	; 8
    3a88:	91 05       	cpc	r25, r1
    3a8a:	b1 f7       	brne	.-20     	; 0x3a78 <I2C_Tx_2URNs_from_IO+0x26c>
{I2C_data[m]=display_buf[m];display_buf[m] = 0;}
TIMSK1 |= (1<<TOIE1);
    3a8c:	ef e6       	ldi	r30, 0x6F	; 111
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	81 60       	ori	r24, 0x01	; 1
    3a94:	80 83       	st	Z, r24



/*****************************************************************************************/
void timer_T1_sub_with_interrupt(char Counter_speed, unsigned int Start_point){ 
TCNT1H = (Start_point >> 8);
    3a96:	80 ef       	ldi	r24, 0xF0	; 240
    3a98:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
TCNT1L = Start_point & 0x00FF;
    3a9c:	83 ec       	ldi	r24, 0xC3	; 195
    3a9e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
TCCR1B = Counter_speed;}
    3aa2:	85 e0       	ldi	r24, 0x05	; 5
    3aa4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
timer_T1_sub_with_interrupt(T1_delay_500ms);while(!(T1_ovf_flag)); //Flash display
    3aa8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
    3aac:	88 23       	and	r24, r24
    3aae:	e1 f3       	breq	.-8      	; 0x3aa8 <I2C_Tx_2URNs_from_IO+0x29c>
T1_ovf_flag=0;	TIMSK1 &= (~(1<<TOIE1));
    3ab0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
    3ab4:	ef e6       	ldi	r30, 0x6F	; 111
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	80 81       	ld	r24, Z
    3aba:	8e 7f       	andi	r24, 0xFE	; 254
    3abc:	80 83       	st	Z, r24
for(int m = 0; m<=7; m++)display_buf[m] = I2C_data[m];
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	29 91       	ld	r18, Y+
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	e1 5f       	subi	r30, 0xF1	; 241
    3ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    3aca:	20 83       	st	Z, r18
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	88 30       	cpi	r24, 0x08	; 8
    3ad0:	91 05       	cpc	r25, r1
    3ad2:	b9 f7       	brne	.-18     	; 0x3ac2 <I2C_Tx_2URNs_from_IO+0x2b6>

if((!(overflow))||(overflow==1)){
    3ad4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <overflow>
    3ad8:	82 30       	cpi	r24, 0x02	; 2
    3ada:	70 f4       	brcc	.+28     	; 0x3af8 <I2C_Tx_2URNs_from_IO+0x2ec>
if (exponent[0])exponent[0]++;
    3adc:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <exponent>
    3ae0:	88 23       	and	r24, r24
    3ae2:	19 f0       	breq	.+6      	; 0x3aea <I2C_Tx_2URNs_from_IO+0x2de>
    3ae4:	8f 5f       	subi	r24, 0xFF	; 255
    3ae6:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <exponent>
if (exponent[1])exponent[1]++;}
    3aea:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <exponent+0x1>
    3aee:	88 23       	and	r24, r24
    3af0:	19 f0       	breq	.+6      	; 0x3af8 <I2C_Tx_2URNs_from_IO+0x2ec>
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <exponent+0x1>
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
    3af8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
    3afc:	88 23       	and	r24, r24
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <I2C_Tx_2URNs_from_IO+0x2f6>
    3b00:	3c c1       	rjmp	.+632    	; 0x3d7a <I2C_Tx_2URNs_from_IO+0x56e>
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <I2C_Tx_2URNs_from_IO+0x2fe>
    3b08:	cf 01       	movw	r24, r30
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	31 96       	adiw	r30, 0x01	; 1
    3b0e:	df 01       	movw	r26, r30
    3b10:	a1 5f       	subi	r26, 0xF1	; 241
    3b12:	bd 4f       	sbci	r27, 0xFD	; 253
    3b14:	2c 91       	ld	r18, X
    3b16:	21 11       	cpse	r18, r1
    3b18:	f7 cf       	rjmp	.-18     	; 0x3b08 <I2C_Tx_2URNs_from_IO+0x2fc>
number[1] = 0;
    3b1a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <number+0x4>
    3b1e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <number+0x5>
    3b22:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <number+0x6>
    3b26:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <number+0x7>
while(n){
    3b2a:	30 97       	sbiw	r30, 0x00	; 0
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <I2C_Tx_2URNs_from_IO+0x324>
    3b2e:	36 c1       	rjmp	.+620    	; 0x3d9c <I2C_Tx_2URNs_from_IO+0x590>
if((!(overflow))||(overflow==1)){
if (exponent[0])exponent[0]++;
if (exponent[1])exponent[1]++;}
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
    3b30:	9f 01       	movw	r18, r30
number[1] = 0;
while(n){
    3b32:	40 e0       	ldi	r20, 0x00	; 0
    3b34:	50 e0       	ldi	r21, 0x00	; 0
    3b36:	ba 01       	movw	r22, r20
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)
    3b38:	21 50       	subi	r18, 0x01	; 1
    3b3a:	31 09       	sbc	r19, r1
    3b3c:	d9 01       	movw	r26, r18
    3b3e:	a1 5f       	subi	r26, 0xF1	; 241
    3b40:	bd 4f       	sbci	r27, 0xFD	; 253
    3b42:	ac 91       	ld	r26, X
    3b44:	44 0f       	add	r20, r20
    3b46:	55 1f       	adc	r21, r21
    3b48:	66 1f       	adc	r22, r22
    3b4a:	77 1f       	adc	r23, r23
    3b4c:	6a 01       	movw	r12, r20
    3b4e:	7b 01       	movw	r14, r22
    3b50:	cc 0c       	add	r12, r12
    3b52:	dd 1c       	adc	r13, r13
    3b54:	ee 1c       	adc	r14, r14
    3b56:	ff 1c       	adc	r15, r15
    3b58:	cc 0c       	add	r12, r12
    3b5a:	dd 1c       	adc	r13, r13
    3b5c:	ee 1c       	adc	r14, r14
    3b5e:	ff 1c       	adc	r15, r15
    3b60:	4c 0d       	add	r20, r12
    3b62:	5d 1d       	adc	r21, r13
    3b64:	6e 1d       	adc	r22, r14
    3b66:	7f 1d       	adc	r23, r15
    3b68:	40 53       	subi	r20, 0x30	; 48
    3b6a:	51 09       	sbc	r21, r1
    3b6c:	61 09       	sbc	r22, r1
    3b6e:	71 09       	sbc	r23, r1
    3b70:	4a 0f       	add	r20, r26
    3b72:	51 1d       	adc	r21, r1
    3b74:	61 1d       	adc	r22, r1
    3b76:	71 1d       	adc	r23, r1
if (exponent[1])exponent[1]++;}
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
number[1] = 0;
while(n){
    3b78:	21 15       	cp	r18, r1
    3b7a:	31 05       	cpc	r19, r1
    3b7c:	e9 f6       	brne	.-70     	; 0x3b38 <I2C_Tx_2URNs_from_IO+0x32c>
    3b7e:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <number+0x4>
    3b82:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <number+0x5>
    3b86:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <number+0x6>
    3b8a:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <number+0x7>
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)

n=q+1;while((display_buf[n]) && (n<=7))n++;
    3b8e:	02 96       	adiw	r24, 0x02	; 2
    3b90:	dc 01       	movw	r26, r24
    3b92:	a1 5f       	subi	r26, 0xF1	; 241
    3b94:	bd 4f       	sbci	r27, 0xFD	; 253
    3b96:	2c 91       	ld	r18, X
    3b98:	22 23       	and	r18, r18
    3b9a:	91 f0       	breq	.+36     	; 0x3bc0 <I2C_Tx_2URNs_from_IO+0x3b4>
    3b9c:	88 30       	cpi	r24, 0x08	; 8
    3b9e:	91 05       	cpc	r25, r1
    3ba0:	2c f0       	brlt	.+10     	; 0x3bac <I2C_Tx_2URNs_from_IO+0x3a0>
    3ba2:	0e c0       	rjmp	.+28     	; 0x3bc0 <I2C_Tx_2URNs_from_IO+0x3b4>
if((!(overflow))||(overflow==1)){
if (exponent[0])exponent[0]++;
if (exponent[1])exponent[1]++;}
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
    3ba4:	e0 e0       	ldi	r30, 0x00	; 0
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
number[1] = 0;
while(n){
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)

n=q+1;while((display_buf[n]) && (n<=7))n++;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	01 96       	adiw	r24, 0x01	; 1
    3bae:	dc 01       	movw	r26, r24
    3bb0:	a1 5f       	subi	r26, 0xF1	; 241
    3bb2:	bd 4f       	sbci	r27, 0xFD	; 253
    3bb4:	2c 91       	ld	r18, X
    3bb6:	22 23       	and	r18, r18
    3bb8:	19 f0       	breq	.+6      	; 0x3bc0 <I2C_Tx_2URNs_from_IO+0x3b4>
    3bba:	88 30       	cpi	r24, 0x08	; 8
    3bbc:	91 05       	cpc	r25, r1
    3bbe:	b4 f3       	brlt	.-20     	; 0x3bac <I2C_Tx_2URNs_from_IO+0x3a0>
number[0] = 0;
    3bc0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <number>
    3bc4:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <number+0x1>
    3bc8:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <number+0x2>
    3bcc:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <number+0x3>
while(n-q-1){
    3bd0:	9c 01       	movw	r18, r24
    3bd2:	2e 1b       	sub	r18, r30
    3bd4:	3f 0b       	sbc	r19, r31
    3bd6:	21 30       	cpi	r18, 0x01	; 1
    3bd8:	31 05       	cpc	r19, r1
    3bda:	09 f4       	brne	.+2      	; 0x3bde <I2C_Tx_2URNs_from_IO+0x3d2>
    3bdc:	e7 c0       	rjmp	.+462    	; 0x3dac <I2C_Tx_2URNs_from_IO+0x5a0>
    3bde:	31 96       	adiw	r30, 0x01	; 1
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	ba 01       	movw	r22, r20
number[0] = number[0] * 10 + display_buf[n-1] - '0'; n--;}}
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	dc 01       	movw	r26, r24
    3bea:	a1 5f       	subi	r26, 0xF1	; 241
    3bec:	bd 4f       	sbci	r27, 0xFD	; 253
    3bee:	ac 91       	ld	r26, X
    3bf0:	44 0f       	add	r20, r20
    3bf2:	55 1f       	adc	r21, r21
    3bf4:	66 1f       	adc	r22, r22
    3bf6:	77 1f       	adc	r23, r23
    3bf8:	8a 01       	movw	r16, r20
    3bfa:	9b 01       	movw	r18, r22
    3bfc:	00 0f       	add	r16, r16
    3bfe:	11 1f       	adc	r17, r17
    3c00:	22 1f       	adc	r18, r18
    3c02:	33 1f       	adc	r19, r19
    3c04:	00 0f       	add	r16, r16
    3c06:	11 1f       	adc	r17, r17
    3c08:	22 1f       	adc	r18, r18
    3c0a:	33 1f       	adc	r19, r19
    3c0c:	40 0f       	add	r20, r16
    3c0e:	51 1f       	adc	r21, r17
    3c10:	62 1f       	adc	r22, r18
    3c12:	73 1f       	adc	r23, r19
    3c14:	40 53       	subi	r20, 0x30	; 48
    3c16:	51 09       	sbc	r21, r1
    3c18:	61 09       	sbc	r22, r1
    3c1a:	71 09       	sbc	r23, r1
    3c1c:	4a 0f       	add	r20, r26
    3c1e:	51 1d       	adc	r21, r1
    3c20:	61 1d       	adc	r22, r1
    3c22:	71 1d       	adc	r23, r1
while(n){
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)

n=q+1;while((display_buf[n]) && (n<=7))n++;
number[0] = 0;
while(n-q-1){
    3c24:	e8 17       	cp	r30, r24
    3c26:	f9 07       	cpc	r31, r25
    3c28:	f1 f6       	brne	.-68     	; 0x3be6 <I2C_Tx_2URNs_from_IO+0x3da>
    3c2a:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <number>
    3c2e:	50 93 e7 01 	sts	0x01E7, r21	; 0x8001e7 <number+0x1>
    3c32:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <number+0x2>
    3c36:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <number+0x3>
    3c3a:	b8 c0       	rjmp	.+368    	; 0x3dac <I2C_Tx_2URNs_from_IO+0x5a0>
number[0] = number[0] * 10 + display_buf[n-1] - '0'; n--;}}

																	//backup the display, numbers and exponents
for (int n = 0; n<=7; n++)display_backup[n] = display_buf[n]; 
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	a1 5f       	subi	r26, 0xF1	; 241
    3c40:	bd 4f       	sbci	r27, 0xFD	; 253
    3c42:	2c 91       	ld	r18, X
    3c44:	21 93       	st	Z+, r18
    3c46:	01 96       	adiw	r24, 0x01	; 1
    3c48:	88 30       	cpi	r24, 0x08	; 8
    3c4a:	91 05       	cpc	r25, r1
    3c4c:	b9 f7       	brne	.-18     	; 0x3c3c <I2C_Tx_2URNs_from_IO+0x430>
display_backup[8] = display_mask;
    3c4e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
    3c52:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <display_backup+0x8>
exponent_BKP[0] = exponent[0]; exponent_BKP[1] = exponent[1];
    3c56:	e3 e8       	ldi	r30, 0x83	; 131
    3c58:	f2 e0       	ldi	r31, 0x02	; 2
    3c5a:	a8 ea       	ldi	r26, 0xA8	; 168
    3c5c:	b2 e0       	ldi	r27, 0x02	; 2
    3c5e:	8c 91       	ld	r24, X
    3c60:	80 83       	st	Z, r24
    3c62:	11 96       	adiw	r26, 0x01	; 1
    3c64:	8c 91       	ld	r24, X
    3c66:	81 83       	std	Z+1, r24	; 0x01
number[4] = number[0]; number[5] = number[1];
    3c68:	e6 ee       	ldi	r30, 0xE6	; 230
    3c6a:	f1 e0       	ldi	r31, 0x01	; 1
    3c6c:	80 81       	ld	r24, Z
    3c6e:	91 81       	ldd	r25, Z+1	; 0x01
    3c70:	a2 81       	ldd	r26, Z+2	; 0x02
    3c72:	b3 81       	ldd	r27, Z+3	; 0x03
    3c74:	80 8b       	std	Z+16, r24	; 0x10
    3c76:	91 8b       	std	Z+17, r25	; 0x11
    3c78:	a2 8b       	std	Z+18, r26	; 0x12
    3c7a:	b3 8b       	std	Z+19, r27	; 0x13
    3c7c:	84 81       	ldd	r24, Z+4	; 0x04
    3c7e:	95 81       	ldd	r25, Z+5	; 0x05
    3c80:	a6 81       	ldd	r26, Z+6	; 0x06
    3c82:	b7 81       	ldd	r27, Z+7	; 0x07
    3c84:	84 8b       	std	Z+20, r24	; 0x14
    3c86:	95 8b       	std	Z+21, r25	; 0x15
    3c88:	a6 8b       	std	Z+22, r26	; 0x16
    3c8a:	b7 8b       	std	Z+23, r27	; 0x17
return;}
    3c8c:	98 c0       	rjmp	.+304    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
																	//Enter first number when complete
if(!(RN)){		//First sw2 keypress
	display_mask = (display_mask << 2);	
    3c8e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <display_mask>
    3c92:	88 0f       	add	r24, r24
    3c94:	88 0f       	add	r24, r24
    3c96:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
	for(int p = 0; p < 8; p++)strobe[p] = 0;						//synchronise strobe
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	e4 57       	subi	r30, 0x74	; 116
    3ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ca4:	10 82       	st	Z, r1
    3ca6:	01 96       	adiw	r24, 0x01	; 1
    3ca8:	88 30       	cpi	r24, 0x08	; 8
    3caa:	91 05       	cpc	r25, r1
    3cac:	c1 f7       	brne	.-16     	; 0x3c9e <I2C_Tx_2URNs_from_IO+0x492>
    3cae:	87 e0       	ldi	r24, 0x07	; 7
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9c 01       	movw	r18, r24
    3cb4:	21 50       	subi	r18, 0x01	; 1
    3cb6:	31 09       	sbc	r19, r1
	{for (int n = 0; n < 7; n++)
	{display_buf[7-n] = display_buf[6-n];}} 
    3cb8:	f9 01       	movw	r30, r18
    3cba:	e1 5f       	subi	r30, 0xF1	; 241
    3cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    3cbe:	40 81       	ld	r20, Z
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	e1 5f       	subi	r30, 0xF1	; 241
    3cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    3cc6:	40 83       	st	Z, r20
    3cc8:	c9 01       	movw	r24, r18
return;}
																	//Enter first number when complete
if(!(RN)){		//First sw2 keypress
	display_mask = (display_mask << 2);	
	for(int p = 0; p < 8; p++)strobe[p] = 0;						//synchronise strobe
	{for (int n = 0; n < 7; n++)
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	91 f7       	brne	.-28     	; 0x3cb2 <I2C_Tx_2URNs_from_IO+0x4a6>
	{display_buf[7-n] = display_buf[6-n];}} 
	display_buf[0] = '\0';											//shift display left and blank digit 0
    3cce:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <display_buf>
    3cd2:	87 e0       	ldi	r24, 0x07	; 7
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	9c 01       	movw	r18, r24
    3cd8:	21 50       	subi	r18, 0x01	; 1
    3cda:	31 09       	sbc	r19, r1
	{for (int n = 0; n < 7; n++)
	{display_buf[7-n] = display_buf[6-n];}}
    3cdc:	f9 01       	movw	r30, r18
    3cde:	e1 5f       	subi	r30, 0xF1	; 241
    3ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ce2:	40 81       	ld	r20, Z
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e1 5f       	subi	r30, 0xF1	; 241
    3ce8:	fd 4f       	sbci	r31, 0xFD	; 253
    3cea:	40 83       	st	Z, r20
    3cec:	c9 01       	movw	r24, r18
	display_mask = (display_mask << 2);	
	for(int p = 0; p < 8; p++)strobe[p] = 0;						//synchronise strobe
	{for (int n = 0; n < 7; n++)
	{display_buf[7-n] = display_buf[6-n];}} 
	display_buf[0] = '\0';											//shift display left and blank digit 0
	{for (int n = 0; n < 7; n++)
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	91 f7       	brne	.-28     	; 0x3cd6 <I2C_Tx_2URNs_from_IO+0x4ca>
	{display_buf[7-n] = display_buf[6-n];}}
	display_buf[0] = '0';											//shift display left and initialise digit 0
    3cf2:	80 e3       	ldi	r24, 0x30	; 48
    3cf4:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <display_buf>
	keypres_counter_old = keypres_counter+2;
    3cf8:	8a e0       	ldi	r24, 0x0A	; 10
    3cfa:	80 1b       	sub	r24, r16
    3cfc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <keypres_counter_old>
	RN=1;}}}
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <RN+0x1>
    3d08:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <RN>
    3d0c:	58 c0       	rjmp	.+176    	; 0x3dbe <I2C_Tx_2URNs_from_IO+0x5b2>
	{if(I2C_data[0]=='A')
		{exponent[0]=0;exponent[1]=0; display_mask = 0; 
		RN=0;keypres_counter_old=0; exponent_BKP[0]=0; 
		exponent_BKP[1]=0; overflow=0; return;}}

if ((I2C_data[0] =='P') & (!(exponent[RN])))						//Initialise exponent and display mask
    3d0e:	31 e0       	ldi	r19, 0x01	; 1
    3d10:	10 35       	cpi	r17, 0x50	; 80
    3d12:	09 f0       	breq	.+2      	; 0x3d16 <I2C_Tx_2URNs_from_IO+0x50a>
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <RN>
    3d1a:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <RN+0x1>
    3d1e:	fa 01       	movw	r30, r20
    3d20:	e8 55       	subi	r30, 0x58	; 88
    3d22:	fd 4f       	sbci	r31, 0xFD	; 253
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 81       	ld	r25, Z
    3d28:	91 11       	cpse	r25, r1
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	88 23       	and	r24, r24
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <I2C_Tx_2URNs_from_IO+0x526>
    3d30:	d8 cd       	rjmp	.-1104   	; 0x38e2 <I2C_Tx_2URNs_from_IO+0xd6>
    3d32:	31 11       	cpse	r19, r1
    3d34:	c3 cd       	rjmp	.-1146   	; 0x38bc <I2C_Tx_2URNs_from_IO+0xb0>
    3d36:	d5 cd       	rjmp	.-1110   	; 0x38e2 <I2C_Tx_2URNs_from_IO+0xd6>
    3d38:	10 91 d8 01 	lds	r17, 0x01D8	; 0x8001d8 <I2C_data>
    3d3c:	31 e0       	ldi	r19, 0x01	; 1
    3d3e:	10 35       	cpi	r17, 0x50	; 80
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <I2C_Tx_2URNs_from_IO+0x538>
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <RN>
    3d48:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <RN+0x1>
    3d4c:	fa 01       	movw	r30, r20
    3d4e:	e8 55       	subi	r30, 0x58	; 88
    3d50:	fd 4f       	sbci	r31, 0xFD	; 253
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	90 81       	ld	r25, Z
    3d56:	91 11       	cpse	r25, r1
    3d58:	80 e0       	ldi	r24, 0x00	; 0
    3d5a:	88 23       	and	r24, r24
    3d5c:	11 f0       	breq	.+4      	; 0x3d62 <I2C_Tx_2URNs_from_IO+0x556>
    3d5e:	31 11       	cpse	r19, r1
    3d60:	ad cd       	rjmp	.-1190   	; 0x38bc <I2C_Tx_2URNs_from_IO+0xb0>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	c6 cd       	rjmp	.-1140   	; 0x38f4 <I2C_Tx_2URNs_from_IO+0xe8>
|| (I2C_data[4] != display_buf[4])\
|| (I2C_data[3] != display_buf[3])
|| (I2C_data[2] != display_buf[2]))){overflow++;} 
if(overflow)Return = 1;

if((!(Return)) &&(!(overflow))){									//Update display and exponent during entry of a single number
    3d68:	91 11       	cpse	r25, r1
    3d6a:	25 c0       	rjmp	.+74     	; 0x3db6 <I2C_Tx_2URNs_from_IO+0x5aa>
    3d6c:	1a ce       	rjmp	.-972    	; 0x39a2 <I2C_Tx_2URNs_from_IO+0x196>
if(SW3_keypress){if((!(RN)) && exponent[0])
	{display_mask = (display_mask <<1) + 1; exponent[0]--;
	for(int p = 0; p < 8; p++)strobe[p] = 0;}						//synchronise strobe

if(RN){
if(!(exponent[1])){display_mask = (display_mask <<1);
    3d6e:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <exponent+0x1>
    3d72:	88 23       	and	r24, r24
    3d74:	09 f4       	brne	.+2      	; 0x3d78 <I2C_Tx_2URNs_from_IO+0x56c>
    3d76:	3f ce       	rjmp	.-898    	; 0x39f6 <I2C_Tx_2URNs_from_IO+0x1ea>
    3d78:	4e ce       	rjmp	.-868    	; 0x3a16 <I2C_Tx_2URNs_from_IO+0x20a>
if (exponent[0])exponent[0]++;
if (exponent[1])exponent[1]++;}
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
number[1] = 0;
    3d7a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <number+0x4>
    3d7e:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <number+0x5>
    3d82:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <number+0x6>
    3d86:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <number+0x7>
while(n){
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)

n=q+1;while((display_buf[n]) && (n<=7))n++;
    3d8a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
    3d8e:	81 11       	cpse	r24, r1
    3d90:	09 cf       	rjmp	.-494    	; 0x3ba4 <I2C_Tx_2URNs_from_IO+0x398>
if((!(overflow))||(overflow==1)){
if (exponent[0])exponent[0]++;
if (exponent[1])exponent[1]++;}
																	//calculate Number[0] and [1]
{int n,q;
n=0; while(display_buf[n])n++;	q=n;								//determine length of number string
    3d92:	e0 e0       	ldi	r30, 0x00	; 0
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
number[1] = 0;
while(n){
number[1] = number[1] * 10 + display_buf[n-1] - '0'; n--;} 		//convert the numerical string to a long number (4 bytes)

n=q+1;while((display_buf[n]) && (n<=7))n++;
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	12 cf       	rjmp	.-476    	; 0x3bc0 <I2C_Tx_2URNs_from_IO+0x3b4>
    3d9c:	02 96       	adiw	r24, 0x02	; 2
    3d9e:	dc 01       	movw	r26, r24
    3da0:	a1 5f       	subi	r26, 0xF1	; 241
    3da2:	bd 4f       	sbci	r27, 0xFD	; 253
    3da4:	2c 91       	ld	r18, X
    3da6:	21 11       	cpse	r18, r1
    3da8:	01 cf       	rjmp	.-510    	; 0x3bac <I2C_Tx_2URNs_from_IO+0x3a0>
    3daa:	0a cf       	rjmp	.-492    	; 0x3bc0 <I2C_Tx_2URNs_from_IO+0x3b4>
    3dac:	e6 e7       	ldi	r30, 0x76	; 118
    3dae:	f2 e0       	ldi	r31, 0x02	; 2
number[0] = 0;
while(n-q-1){
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	43 cf       	rjmp	.-378    	; 0x3c3c <I2C_Tx_2URNs_from_IO+0x430>
if(exponent[1]==-1){display_mask +=1;
for(int p = 0; p < 8; p++)strobe[p] = 0;exponent[1]--;}}}}
	
																	//Enter second number when complete
if((Return)){														//sw2 keypress
if(RN){																//Second sw2 keypress
    3db6:	45 2b       	or	r20, r21
    3db8:	09 f0       	breq	.+2      	; 0x3dbc <I2C_Tx_2URNs_from_IO+0x5b0>
    3dba:	5a ce       	rjmp	.-844    	; 0x3a70 <I2C_Tx_2URNs_from_IO+0x264>
    3dbc:	68 cf       	rjmp	.-304    	; 0x3c8e <I2C_Tx_2URNs_from_IO+0x482>
	display_buf[0] = '\0';											//shift display left and blank digit 0
	{for (int n = 0; n < 7; n++)
	{display_buf[7-n] = display_buf[6-n];}}
	display_buf[0] = '0';											//shift display left and initialise digit 0
	keypres_counter_old = keypres_counter+2;
	RN=1;}}}
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	df 90       	pop	r13
    3dcc:	cf 90       	pop	r12
    3dce:	08 95       	ret

00003dd0 <I2C_Tx_Compile_tables>:
	
	
	
	
/*****************************************************************************************************************/	
void I2C_Tx_Compile_tables(void){
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
int product;

if (!(I2C_data[7])){											
    3dd4:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <I2C_data+0x7>
    3dd8:	81 11       	cpse	r24, r1
    3dda:	50 c0       	rjmp	.+160    	; 0x3e7c <I2C_Tx_Compile_tables+0xac>
    3ddc:	e8 ed       	ldi	r30, 0xD8	; 216
    3dde:	f1 e0       	ldi	r31, 0x01	; 1
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
for (int m = 0; m < 8; m++){										//8 digits to be downloaded
display_buf[m] = I2C_data[m];}
    3de4:	21 91       	ld	r18, Z+
    3de6:	dc 01       	movw	r26, r24
    3de8:	a1 5f       	subi	r26, 0xF1	; 241
    3dea:	bd 4f       	sbci	r27, 0xFD	; 253
    3dec:	2c 93       	st	X, r18
/*****************************************************************************************************************/	
void I2C_Tx_Compile_tables(void){
int product;

if (!(I2C_data[7])){											
for (int m = 0; m < 8; m++){										//8 digits to be downloaded
    3dee:	01 96       	adiw	r24, 0x01	; 1
    3df0:	88 30       	cpi	r24, 0x08	; 8
    3df2:	91 05       	cpc	r25, r1
    3df4:	b9 f7       	brne	.-18     	; 0x3de4 <I2C_Tx_Compile_tables+0x14>
    3df6:	87 e0       	ldi	r24, 0x07	; 7
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9c 01       	movw	r18, r24
    3dfc:	21 50       	subi	r18, 0x01	; 1
    3dfe:	31 09       	sbc	r19, r1
display_buf[m] = I2C_data[m];}
	
																	//Initiate tables display
for (int n = 0; n < 7; n++)
{display_buf[7-n] = display_buf[6-n];} display_buf[0] = '\0';		//shift display left
    3e00:	f9 01       	movw	r30, r18
    3e02:	e1 5f       	subi	r30, 0xF1	; 241
    3e04:	fd 4f       	sbci	r31, 0xFD	; 253
    3e06:	40 81       	ld	r20, Z
    3e08:	fc 01       	movw	r30, r24
    3e0a:	e1 5f       	subi	r30, 0xF1	; 241
    3e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    3e0e:	40 83       	st	Z, r20
    3e10:	c9 01       	movw	r24, r18
if (!(I2C_data[7])){											
for (int m = 0; m < 8; m++){										//8 digits to be downloaded
display_buf[m] = I2C_data[m];}
	
																	//Initiate tables display
for (int n = 0; n < 7; n++)
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	91 f7       	brne	.-28     	; 0x3dfa <I2C_Tx_Compile_tables+0x2a>
{display_buf[7-n] = display_buf[6-n];} display_buf[0] = '\0';		//shift display left
    3e16:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <display_buf>
    3e1a:	87 e0       	ldi	r24, 0x07	; 7
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	9c 01       	movw	r18, r24
    3e20:	21 50       	subi	r18, 0x01	; 1
    3e22:	31 09       	sbc	r19, r1
for (int n = 0; n < 7; n++)
{display_buf[7-n] = display_buf[6-n];} display_buf[0] = '0';		//shift display left
    3e24:	f9 01       	movw	r30, r18
    3e26:	e1 5f       	subi	r30, 0xF1	; 241
    3e28:	fd 4f       	sbci	r31, 0xFD	; 253
    3e2a:	40 81       	ld	r20, Z
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	e1 5f       	subi	r30, 0xF1	; 241
    3e30:	fd 4f       	sbci	r31, 0xFD	; 253
    3e32:	40 83       	st	Z, r20
    3e34:	c9 01       	movw	r24, r18
display_buf[m] = I2C_data[m];}
	
																	//Initiate tables display
for (int n = 0; n < 7; n++)
{display_buf[7-n] = display_buf[6-n];} display_buf[0] = '\0';		//shift display left
for (int n = 0; n < 7; n++)
    3e36:	00 97       	sbiw	r24, 0x00	; 0
    3e38:	91 f7       	brne	.-28     	; 0x3e1e <I2C_Tx_Compile_tables+0x4e>
{display_buf[7-n] = display_buf[6-n];} display_buf[0] = '0';		//shift display left
    3e3a:	ef e0       	ldi	r30, 0x0F	; 15
    3e3c:	f2 e0       	ldi	r31, 0x02	; 2
    3e3e:	80 e3       	ldi	r24, 0x30	; 48
    3e40:	80 83       	st	Z, r24
display_buf[0] = 1 + '0';											//Initialise digits[0] & [1]
    3e42:	91 e3       	ldi	r25, 0x31	; 49
    3e44:	90 83       	st	Z, r25
display_buf[1]='0';
    3e46:	81 83       	std	Z+1, r24	; 0x01

for(int m = 0; m<= 3; m++)
{display_buf[7-m] = display_buf[3-m];display_buf[3-m]=0;}
    3e48:	83 81       	ldd	r24, Z+3	; 0x03
    3e4a:	87 83       	std	Z+7, r24	; 0x07
    3e4c:	13 82       	std	Z+3, r1	; 0x03
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	86 83       	std	Z+6, r24	; 0x06
    3e52:	12 82       	std	Z+2, r1	; 0x02
    3e54:	81 81       	ldd	r24, Z+1	; 0x01
    3e56:	85 83       	std	Z+5, r24	; 0x05
    3e58:	11 82       	std	Z+1, r1	; 0x01
    3e5a:	80 81       	ld	r24, Z
    3e5c:	84 83       	std	Z+4, r24	; 0x04
    3e5e:	10 82       	st	Z, r1
if(!(display_buf[7])) display_buf[7] = '0';
    3e60:	87 81       	ldd	r24, Z+7	; 0x07
    3e62:	81 11       	cpse	r24, r1
    3e64:	03 c0       	rjmp	.+6      	; 0x3e6c <I2C_Tx_Compile_tables+0x9c>
    3e66:	80 e3       	ldi	r24, 0x30	; 48
    3e68:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <display_buf+0x7>
if(!(display_buf[5])) display_buf[5] = '0';}
    3e6c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <display_buf+0x5>
    3e70:	81 11       	cpse	r24, r1
    3e72:	41 c0       	rjmp	.+130    	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
    3e74:	80 e3       	ldi	r24, 0x30	; 48
    3e76:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <display_buf+0x5>
    3e7a:	3d c0       	rjmp	.+122    	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
	
else{switch (I2C_data[7]){
    3e7c:	81 33       	cpi	r24, 0x31	; 49
    3e7e:	19 f0       	breq	.+6      	; 0x3e86 <I2C_Tx_Compile_tables+0xb6>
    3e80:	82 33       	cpi	r24, 0x32	; 50
    3e82:	01 f1       	breq	.+64     	; 0x3ec4 <I2C_Tx_Compile_tables+0xf4>
    3e84:	38 c0       	rjmp	.+112    	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
case '1':
	if ((display_buf[4] == '9') && (display_buf[5] =='9'))
    3e86:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <display_buf+0x4>
    3e8a:	89 33       	cpi	r24, 0x39	; 57
    3e8c:	49 f4       	brne	.+18     	; 0x3ea0 <I2C_Tx_Compile_tables+0xd0>
    3e8e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <display_buf+0x5>
    3e92:	89 33       	cpi	r24, 0x39	; 57
    3e94:	29 f4       	brne	.+10     	; 0x3ea0 <I2C_Tx_Compile_tables+0xd0>
	{display_buf[4]='0';display_buf[5]='0';}
    3e96:	ef e0       	ldi	r30, 0x0F	; 15
    3e98:	f2 e0       	ldi	r31, 0x02	; 2
    3e9a:	80 e3       	ldi	r24, 0x30	; 48
    3e9c:	84 83       	std	Z+4, r24	; 0x04
    3e9e:	85 83       	std	Z+5, r24	; 0x05
	if(display_buf[4]== '9')
    3ea0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <display_buf+0x4>
    3ea4:	89 33       	cpi	r24, 0x39	; 57
    3ea6:	41 f4       	brne	.+16     	; 0x3eb8 <I2C_Tx_Compile_tables+0xe8>
	{display_buf[4]='0'; display_buf[5]++;}
    3ea8:	ef e0       	ldi	r30, 0x0F	; 15
    3eaa:	f2 e0       	ldi	r31, 0x02	; 2
    3eac:	80 e3       	ldi	r24, 0x30	; 48
    3eae:	84 83       	std	Z+4, r24	; 0x04
    3eb0:	85 81       	ldd	r24, Z+5	; 0x05
    3eb2:	8f 5f       	subi	r24, 0xFF	; 255
    3eb4:	85 83       	std	Z+5, r24	; 0x05
    3eb6:	1f c0       	rjmp	.+62     	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
	else display_buf[4]++; break;
    3eb8:	ef e0       	ldi	r30, 0x0F	; 15
    3eba:	f2 e0       	ldi	r31, 0x02	; 2
    3ebc:	84 81       	ldd	r24, Z+4	; 0x04
    3ebe:	8f 5f       	subi	r24, 0xFF	; 255
    3ec0:	84 83       	std	Z+4, r24	; 0x04
    3ec2:	19 c0       	rjmp	.+50     	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>

case '2': 
	if ((display_buf[4]=='1') && (display_buf[5]=='0')) break; 
    3ec4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <display_buf+0x4>
    3ec8:	81 33       	cpi	r24, 0x31	; 49
    3eca:	21 f4       	brne	.+8      	; 0x3ed4 <I2C_Tx_Compile_tables+0x104>
    3ecc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <display_buf+0x5>
    3ed0:	80 33       	cpi	r24, 0x30	; 48
    3ed2:	89 f0       	breq	.+34     	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
	if (display_buf[4]=='0')
    3ed4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <display_buf+0x4>
    3ed8:	80 33       	cpi	r24, 0x30	; 48
    3eda:	41 f4       	brne	.+16     	; 0x3eec <I2C_Tx_Compile_tables+0x11c>
	{display_buf[5]--; display_buf[4]='9';}
    3edc:	ef e0       	ldi	r30, 0x0F	; 15
    3ede:	f2 e0       	ldi	r31, 0x02	; 2
    3ee0:	85 81       	ldd	r24, Z+5	; 0x05
    3ee2:	81 50       	subi	r24, 0x01	; 1
    3ee4:	85 83       	std	Z+5, r24	; 0x05
    3ee6:	89 e3       	ldi	r24, 0x39	; 57
    3ee8:	84 83       	std	Z+4, r24	; 0x04
    3eea:	05 c0       	rjmp	.+10     	; 0x3ef6 <I2C_Tx_Compile_tables+0x126>
	else display_buf[4]--;break;}}
    3eec:	ef e0       	ldi	r30, 0x0F	; 15
    3eee:	f2 e0       	ldi	r31, 0x02	; 2
    3ef0:	84 81       	ldd	r24, Z+4	; 0x04
    3ef2:	81 50       	subi	r24, 0x01	; 1
    3ef4:	84 83       	std	Z+4, r24	; 0x04
	
product = (((display_buf[7]-'0') * 10) + display_buf[6]-'0')\
    3ef6:	ef e0       	ldi	r30, 0x0F	; 15
    3ef8:	f2 e0       	ldi	r31, 0x02	; 2
    3efa:	27 81       	ldd	r18, Z+7	; 0x07
    3efc:	96 81       	ldd	r25, Z+6	; 0x06
* (((display_buf[5]-'0') * 10) + display_buf[4]-'0');
    3efe:	85 81       	ldd	r24, Z+5	; 0x05
    3f00:	64 81       	ldd	r22, Z+4	; 0x04
	if ((display_buf[4]=='1') && (display_buf[5]=='0')) break; 
	if (display_buf[4]=='0')
	{display_buf[5]--; display_buf[4]='9';}
	else display_buf[4]--;break;}}
	
product = (((display_buf[7]-'0') * 10) + display_buf[6]-'0')\
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	20 53       	subi	r18, 0x30	; 48
    3f06:	31 09       	sbc	r19, r1
    3f08:	a9 01       	movw	r20, r18
    3f0a:	44 0f       	add	r20, r20
    3f0c:	55 1f       	adc	r21, r21
    3f0e:	22 0f       	add	r18, r18
    3f10:	33 1f       	adc	r19, r19
    3f12:	22 0f       	add	r18, r18
    3f14:	33 1f       	adc	r19, r19
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	42 0f       	add	r20, r18
    3f1c:	53 1f       	adc	r21, r19
    3f1e:	49 0f       	add	r20, r25
    3f20:	51 1d       	adc	r21, r1
    3f22:	40 53       	subi	r20, 0x30	; 48
    3f24:	51 09       	sbc	r21, r1
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	c0 97       	sbiw	r24, 0x30	; 48
    3f2a:	9c 01       	movw	r18, r24
    3f2c:	22 0f       	add	r18, r18
    3f2e:	33 1f       	adc	r19, r19
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	28 0f       	add	r18, r24
    3f3e:	39 1f       	adc	r19, r25
    3f40:	26 0f       	add	r18, r22
    3f42:	31 1d       	adc	r19, r1
    3f44:	20 53       	subi	r18, 0x30	; 48
    3f46:	31 09       	sbc	r19, r1
    3f48:	42 9f       	mul	r20, r18
    3f4a:	c0 01       	movw	r24, r0
    3f4c:	43 9f       	mul	r20, r19
    3f4e:	90 0d       	add	r25, r0
    3f50:	52 9f       	mul	r21, r18
    3f52:	90 0d       	add	r25, r0
    3f54:	11 24       	eor	r1, r1
* (((display_buf[5]-'0') * 10) + display_buf[4]-'0');
for(int m = 0; m<=3; m++)display_buf[m]=0;
    3f56:	10 82       	st	Z, r1
    3f58:	11 82       	std	Z+1, r1	; 0x01
    3f5a:	12 82       	std	Z+2, r1	; 0x02
    3f5c:	13 82       	std	Z+3, r1	; 0x03
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
{int m=0;do(display_buf[m++] = product%10 + '0'); 
    3f62:	ca e0       	ldi	r28, 0x0A	; 10
    3f64:	d0 e0       	ldi	r29, 0x00	; 0
    3f66:	be 01       	movw	r22, r28
    3f68:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    3f6c:	80 5d       	subi	r24, 0xD0	; 208
    3f6e:	f9 01       	movw	r30, r18
    3f70:	e1 5f       	subi	r30, 0xF1	; 241
    3f72:	fd 4f       	sbci	r31, 0xFD	; 253
    3f74:	80 83       	st	Z, r24
while ((product/=10) > 0);}
    3f76:	86 2f       	mov	r24, r22
    3f78:	97 2f       	mov	r25, r23
	else display_buf[4]--;break;}}
	
product = (((display_buf[7]-'0') * 10) + display_buf[6]-'0')\
* (((display_buf[5]-'0') * 10) + display_buf[4]-'0');
for(int m = 0; m<=3; m++)display_buf[m]=0;
{int m=0;do(display_buf[m++] = product%10 + '0'); 
    3f7a:	2f 5f       	subi	r18, 0xFF	; 255
    3f7c:	3f 4f       	sbci	r19, 0xFF	; 255
while ((product/=10) > 0);}
    3f7e:	18 16       	cp	r1, r24
    3f80:	19 06       	cpc	r1, r25
    3f82:	8c f3       	brlt	.-30     	; 0x3f66 <I2C_Tx_Compile_tables+0x196>
display_mask = 0b00110000;
    3f84:	80 e3       	ldi	r24, 0x30	; 48
    3f86:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
for(int p = 0; p < 8; p++)strobe[p] = 0;}							//synchronise strobe
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	fc 01       	movw	r30, r24
    3f90:	e4 57       	subi	r30, 0x74	; 116
    3f92:	fd 4f       	sbci	r31, 0xFD	; 253
    3f94:	10 82       	st	Z, r1
    3f96:	01 96       	adiw	r24, 0x01	; 1
    3f98:	88 30       	cpi	r24, 0x08	; 8
    3f9a:	91 05       	cpc	r25, r1
    3f9c:	c1 f7       	brne	.-16     	; 0x3f8e <I2C_Tx_Compile_tables+0x1be>
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	08 95       	ret

00003fa4 <I2C_Tx_accumulator_1>:



	
/*****************************************************************************************************************/	
	void I2C_Tx_accumulator_1(void){								//Performs for add, subtract and clear modes
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	e8 ed       	ldi	r30, 0xD8	; 216
    3fae:	f1 e0       	ldi	r31, 0x01	; 1
	int acc_input;
	
	for (int m = 0; m < 9; m++){									//9 digits to be downloaded
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	0b c0       	rjmp	.+22     	; 0x3fcc <I2C_Tx_accumulator_1+0x28>
	if (m == 8)Op = I2C_data[m];
    3fb6:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <I2C_data+0x8>
    3fba:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <Op>
	else display_buf[m] = I2C_data[m];}							//Store digits for display
	{int m = 0; while((display_buf[m]) && (m < 3))m++; 
    3fbe:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <display_buf>
    3fc2:	81 11       	cpse	r24, r1
    3fc4:	0d c0       	rjmp	.+26     	; 0x3fe0 <I2C_Tx_accumulator_1+0x3c>
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	33 c0       	rjmp	.+102    	; 0x4032 <I2C_Tx_accumulator_1+0x8e>
	void I2C_Tx_accumulator_1(void){								//Performs for add, subtract and clear modes
	int acc_input;
	
	for (int m = 0; m < 9; m++){									//9 digits to be downloaded
	if (m == 8)Op = I2C_data[m];
	else display_buf[m] = I2C_data[m];}							//Store digits for display
    3fcc:	21 91       	ld	r18, Z+
    3fce:	dc 01       	movw	r26, r24
    3fd0:	a1 5f       	subi	r26, 0xF1	; 241
    3fd2:	bd 4f       	sbci	r27, 0xFD	; 253
    3fd4:	2c 93       	st	X, r18
	
/*****************************************************************************************************************/	
	void I2C_Tx_accumulator_1(void){								//Performs for add, subtract and clear modes
	int acc_input;
	
	for (int m = 0; m < 9; m++){									//9 digits to be downloaded
    3fd6:	01 96       	adiw	r24, 0x01	; 1
	if (m == 8)Op = I2C_data[m];
    3fd8:	88 30       	cpi	r24, 0x08	; 8
    3fda:	91 05       	cpc	r25, r1
    3fdc:	b9 f7       	brne	.-18     	; 0x3fcc <I2C_Tx_accumulator_1+0x28>
    3fde:	eb cf       	rjmp	.-42     	; 0x3fb6 <I2C_Tx_accumulator_1+0x12>
	else display_buf[m] = I2C_data[m];}							//Store digits for display
	{int m = 0; while((display_buf[m]) && (m < 3))m++; 
    3fe0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <display_buf+0x1>
    3fe4:	88 23       	and	r24, r24
    3fe6:	09 f4       	brne	.+2      	; 0x3fea <I2C_Tx_accumulator_1+0x46>
    3fe8:	91 c0       	rjmp	.+290    	; 0x410c <I2C_Tx_accumulator_1+0x168>
    3fea:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <display_buf+0x2>
    3fee:	88 23       	and	r24, r24
    3ff0:	09 f4       	brne	.+2      	; 0x3ff4 <I2C_Tx_accumulator_1+0x50>
    3ff2:	8f c0       	rjmp	.+286    	; 0x4112 <I2C_Tx_accumulator_1+0x16e>
    3ff4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <display_buf+0x3>
    3ff8:	43 e0       	ldi	r20, 0x03	; 3
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	80 e0       	ldi	r24, 0x00	; 0
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
	acc_input = 0;
	while(m){
	acc_input = acc_input*10 + (display_buf[m-1] - '0'); m--;}
    4000:	9c 01       	movw	r18, r24
    4002:	22 0f       	add	r18, r18
    4004:	33 1f       	adc	r19, r19
    4006:	88 0f       	add	r24, r24
    4008:	99 1f       	adc	r25, r25
    400a:	88 0f       	add	r24, r24
    400c:	99 1f       	adc	r25, r25
    400e:	88 0f       	add	r24, r24
    4010:	99 1f       	adc	r25, r25
    4012:	82 0f       	add	r24, r18
    4014:	93 1f       	adc	r25, r19
    4016:	41 50       	subi	r20, 0x01	; 1
    4018:	51 09       	sbc	r21, r1
    401a:	fa 01       	movw	r30, r20
    401c:	e1 5f       	subi	r30, 0xF1	; 241
    401e:	fd 4f       	sbci	r31, 0xFD	; 253
    4020:	20 81       	ld	r18, Z
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	20 53       	subi	r18, 0x30	; 48
    4026:	31 09       	sbc	r19, r1
    4028:	82 0f       	add	r24, r18
    402a:	93 1f       	adc	r25, r19
	for (int m = 0; m < 9; m++){									//9 digits to be downloaded
	if (m == 8)Op = I2C_data[m];
	else display_buf[m] = I2C_data[m];}							//Store digits for display
	{int m = 0; while((display_buf[m]) && (m < 3))m++; 
	acc_input = 0;
	while(m){
    402c:	41 15       	cp	r20, r1
    402e:	51 05       	cpc	r21, r1
    4030:	39 f7       	brne	.-50     	; 0x4000 <I2C_Tx_accumulator_1+0x5c>
	acc_input = acc_input*10 + (display_buf[m-1] - '0'); m--;}
	if (Op == 'A')accumlator += acc_input;
    4032:	61 34       	cpi	r22, 0x41	; 65
    4034:	59 f4       	brne	.+22     	; 0x404c <I2C_Tx_accumulator_1+0xa8>
    4036:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <accumlator>
    403a:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <accumlator+0x1>
    403e:	82 0f       	add	r24, r18
    4040:	93 1f       	adc	r25, r19
    4042:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <accumlator+0x1>
    4046:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <accumlator>
    404a:	1b c0       	rjmp	.+54     	; 0x4082 <I2C_Tx_accumulator_1+0xde>
	if (Op == 'S')accumlator -= acc_input;
    404c:	63 35       	cpi	r22, 0x53	; 83
    404e:	61 f4       	brne	.+24     	; 0x4068 <I2C_Tx_accumulator_1+0xc4>
    4050:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <accumlator>
    4054:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <accumlator+0x1>
    4058:	a9 01       	movw	r20, r18
    405a:	48 1b       	sub	r20, r24
    405c:	59 0b       	sbc	r21, r25
    405e:	50 93 82 02 	sts	0x0282, r21	; 0x800282 <accumlator+0x1>
    4062:	40 93 81 02 	sts	0x0281, r20	; 0x800281 <accumlator>
    4066:	0d c0       	rjmp	.+26     	; 0x4082 <I2C_Tx_accumulator_1+0xde>
	if (Op == 'C')accumlator = 0;
    4068:	63 34       	cpi	r22, 0x43	; 67
    406a:	59 f4       	brne	.+22     	; 0x4082 <I2C_Tx_accumulator_1+0xde>
    406c:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <accumlator+0x1>
    4070:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <accumlator>
	
	interim_result = accumlator;
    4074:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <interim_result+0x1>
    4078:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <interim_result>
    407c:	c0 e0       	ldi	r28, 0x00	; 0
    407e:	d0 e0       	ldi	r29, 0x00	; 0
    4080:	12 c0       	rjmp	.+36     	; 0x40a6 <I2C_Tx_accumulator_1+0x102>
    4082:	c0 91 81 02 	lds	r28, 0x0281	; 0x800281 <accumlator>
    4086:	d0 91 82 02 	lds	r29, 0x0282	; 0x800282 <accumlator+0x1>
    408a:	d0 93 9f 02 	sts	0x029F, r29	; 0x80029f <interim_result+0x1>
    408e:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <interim_result>
		
	if((accumlator) < 0)accumlator = -accumlator;
    4092:	dd 23       	and	r29, r29
    4094:	44 f4       	brge	.+16     	; 0x40a6 <I2C_Tx_accumulator_1+0x102>
    4096:	88 27       	eor	r24, r24
    4098:	99 27       	eor	r25, r25
    409a:	8c 1b       	sub	r24, r28
    409c:	9d 0b       	sbc	r25, r29
    409e:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <accumlator+0x1>
    40a2:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <accumlator>
    40a6:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <accumlator>
    40aa:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <accumlator+0x1>
	acc_input = acc_input*10 + (display_buf[m-1] - '0'); m--;}
	if (Op == 'A')accumlator += acc_input;
	if (Op == 'S')accumlator -= acc_input;
	if (Op == 'C')accumlator = 0;
	
	interim_result = accumlator;
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	30 e0       	ldi	r19, 0x00	; 0
		
	if((accumlator) < 0)accumlator = -accumlator;
	m = 0;
	do{display_buf[m+3] = accumlator%10 + '0';m++;} 
    40b2:	0a e0       	ldi	r16, 0x0A	; 10
    40b4:	10 e0       	ldi	r17, 0x00	; 0
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <I2C_Tx_accumulator_1+0x116>
    40b8:	9a 01       	movw	r18, r20
    40ba:	b8 01       	movw	r22, r16
    40bc:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    40c0:	80 5d       	subi	r24, 0xD0	; 208
    40c2:	f9 01       	movw	r30, r18
    40c4:	ee 5e       	subi	r30, 0xEE	; 238
    40c6:	fd 4f       	sbci	r31, 0xFD	; 253
    40c8:	80 83       	st	Z, r24
    40ca:	a9 01       	movw	r20, r18
    40cc:	4f 5f       	subi	r20, 0xFF	; 255
    40ce:	5f 4f       	sbci	r21, 0xFF	; 255
	while((accumlator/=10) > 0);
    40d0:	86 2f       	mov	r24, r22
    40d2:	97 2f       	mov	r25, r23
    40d4:	18 16       	cp	r1, r24
    40d6:	19 06       	cpc	r1, r25
    40d8:	7c f3       	brlt	.-34     	; 0x40b8 <I2C_Tx_accumulator_1+0x114>
	if(interim_result < 0)display_buf[m+3] = '-';
    40da:	dd 23       	and	r29, r29
    40dc:	2c f4       	brge	.+10     	; 0x40e8 <I2C_Tx_accumulator_1+0x144>
    40de:	f9 01       	movw	r30, r18
    40e0:	ed 5e       	subi	r30, 0xED	; 237
    40e2:	fd 4f       	sbci	r31, 0xFD	; 253
    40e4:	8d e2       	ldi	r24, 0x2D	; 45
    40e6:	80 83       	st	Z, r24
	display_mask = 0b00000111;
    40e8:	87 e0       	ldi	r24, 0x07	; 7
    40ea:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
	for(int p = 0; p < 8; p++)strobe[p] = 0;
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	fc 01       	movw	r30, r24
    40f4:	e4 57       	subi	r30, 0x74	; 116
    40f6:	fd 4f       	sbci	r31, 0xFD	; 253
    40f8:	10 82       	st	Z, r1
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	88 30       	cpi	r24, 0x08	; 8
    40fe:	91 05       	cpc	r25, r1
    4100:	c1 f7       	brne	.-16     	; 0x40f2 <I2C_Tx_accumulator_1+0x14e>
	accumlator = interim_result;}}
    4102:	d0 93 82 02 	sts	0x0282, r29	; 0x800282 <accumlator+0x1>
    4106:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <accumlator>
    410a:	06 c0       	rjmp	.+12     	; 0x4118 <I2C_Tx_accumulator_1+0x174>
	int acc_input;
	
	for (int m = 0; m < 9; m++){									//9 digits to be downloaded
	if (m == 8)Op = I2C_data[m];
	else display_buf[m] = I2C_data[m];}							//Store digits for display
	{int m = 0; while((display_buf[m]) && (m < 3))m++; 
    410c:	41 e0       	ldi	r20, 0x01	; 1
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	75 cf       	rjmp	.-278    	; 0x3ffc <I2C_Tx_accumulator_1+0x58>
    4112:	42 e0       	ldi	r20, 0x02	; 2
    4114:	50 e0       	ldi	r21, 0x00	; 0
    4116:	72 cf       	rjmp	.-284    	; 0x3ffc <I2C_Tx_accumulator_1+0x58>
	do{display_buf[m+3] = accumlator%10 + '0';m++;} 
	while((accumlator/=10) > 0);
	if(interim_result < 0)display_buf[m+3] = '-';
	display_mask = 0b00000111;
	for(int p = 0; p < 8; p++)strobe[p] = 0;
	accumlator = interim_result;}}
    4118:	df 91       	pop	r29
    411a:	cf 91       	pop	r28
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	08 95       	ret

00004122 <I2C_Tx_accumulator_2>:
	

	
/*****************************************************************************************************************/		
	void I2C_Tx_accumulator_2(void){								//Performs for data input modes
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
	for (int m = 0; m < 3; m++){									//8 digits to be downloaded
	display_buf[m] = I2C_data[m];}									//Store digits for display
    412a:	a8 ed       	ldi	r26, 0xD8	; 216
    412c:	b1 e0       	ldi	r27, 0x01	; 1
    412e:	8c 91       	ld	r24, X
    4130:	ef e0       	ldi	r30, 0x0F	; 15
    4132:	f2 e0       	ldi	r31, 0x02	; 2
    4134:	80 83       	st	Z, r24
    4136:	11 96       	adiw	r26, 0x01	; 1
    4138:	8c 91       	ld	r24, X
    413a:	11 97       	sbiw	r26, 0x01	; 1
    413c:	81 83       	std	Z+1, r24	; 0x01
    413e:	12 96       	adiw	r26, 0x02	; 2
    4140:	8c 91       	ld	r24, X
    4142:	82 83       	std	Z+2, r24	; 0x02
	interim_result = accumlator;
    4144:	c0 91 81 02 	lds	r28, 0x0281	; 0x800281 <accumlator>
    4148:	d0 91 82 02 	lds	r29, 0x0282	; 0x800282 <accumlator+0x1>
    414c:	d0 93 9f 02 	sts	0x029F, r29	; 0x80029f <interim_result+0x1>
    4150:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <interim_result>
	if((accumlator) < 0)accumlator = -accumlator;
    4154:	dd 23       	and	r29, r29
    4156:	44 f4       	brge	.+16     	; 0x4168 <I2C_Tx_accumulator_2+0x46>
    4158:	88 27       	eor	r24, r24
    415a:	99 27       	eor	r25, r25
    415c:	8c 1b       	sub	r24, r28
    415e:	9d 0b       	sbc	r25, r29
    4160:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <accumlator+0x1>
    4164:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <accumlator>
    4168:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <accumlator>
    416c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <accumlator+0x1>
	accumlator = interim_result;}}
	

	
/*****************************************************************************************************************/		
	void I2C_Tx_accumulator_2(void){								//Performs for data input modes
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
	for (int m = 0; m < 3; m++){									//8 digits to be downloaded
	display_buf[m] = I2C_data[m];}									//Store digits for display
	interim_result = accumlator;
	if((accumlator) < 0)accumlator = -accumlator;
	{int m = 0;
	do{display_buf[m+3] = accumlator%10 + '0';m++;} 
    4174:	0a e0       	ldi	r16, 0x0A	; 10
    4176:	10 e0       	ldi	r17, 0x00	; 0
    4178:	01 c0       	rjmp	.+2      	; 0x417c <I2C_Tx_accumulator_2+0x5a>
    417a:	9a 01       	movw	r18, r20
    417c:	b8 01       	movw	r22, r16
    417e:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    4182:	80 5d       	subi	r24, 0xD0	; 208
    4184:	f9 01       	movw	r30, r18
    4186:	ee 5e       	subi	r30, 0xEE	; 238
    4188:	fd 4f       	sbci	r31, 0xFD	; 253
    418a:	80 83       	st	Z, r24
    418c:	a9 01       	movw	r20, r18
    418e:	4f 5f       	subi	r20, 0xFF	; 255
    4190:	5f 4f       	sbci	r21, 0xFF	; 255
	while((accumlator/=10) > 0);
    4192:	86 2f       	mov	r24, r22
    4194:	97 2f       	mov	r25, r23
    4196:	18 16       	cp	r1, r24
    4198:	19 06       	cpc	r1, r25
    419a:	7c f3       	brlt	.-34     	; 0x417a <I2C_Tx_accumulator_2+0x58>
	if(interim_result < 0)display_buf[m+3] = '-';
    419c:	dd 23       	and	r29, r29
    419e:	2c f4       	brge	.+10     	; 0x41aa <I2C_Tx_accumulator_2+0x88>
    41a0:	f9 01       	movw	r30, r18
    41a2:	ed 5e       	subi	r30, 0xED	; 237
    41a4:	fd 4f       	sbci	r31, 0xFD	; 253
    41a6:	8d e2       	ldi	r24, 0x2D	; 45
    41a8:	80 83       	st	Z, r24
	display_mask = 0b00000111;
    41aa:	87 e0       	ldi	r24, 0x07	; 7
    41ac:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
	for(int p = 0; p < 8; p++)strobe[p] = 0;
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	fc 01       	movw	r30, r24
    41b6:	e4 57       	subi	r30, 0x74	; 116
    41b8:	fd 4f       	sbci	r31, 0xFD	; 253
    41ba:	10 82       	st	Z, r1
    41bc:	01 96       	adiw	r24, 0x01	; 1
    41be:	88 30       	cpi	r24, 0x08	; 8
    41c0:	91 05       	cpc	r25, r1
    41c2:	c1 f7       	brne	.-16     	; 0x41b4 <I2C_Tx_accumulator_2+0x92>
	accumlator = interim_result;}}
    41c4:	d0 93 82 02 	sts	0x0282, r29	; 0x800282 <accumlator+0x1>
    41c8:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <accumlator>
    41cc:	df 91       	pop	r29
    41ce:	cf 91       	pop	r28
    41d0:	1f 91       	pop	r17
    41d2:	0f 91       	pop	r16
    41d4:	08 95       	ret

000041d6 <basic_clock>:


void basic_clock (void){
    41d6:	e8 ed       	ldi	r30, 0xD8	; 216
    41d8:	f1 e0       	ldi	r31, 0x01	; 1
    41da:	87 e0       	ldi	r24, 0x07	; 7
    41dc:	90 e0       	ldi	r25, 0x00	; 0
for (int m = 0; m < 8; m++){									//AT_clock_mode = C receives 8 chars (hours mins secs)
clock_buf[7-m] = I2C_data[m];}	
    41de:	21 91       	ld	r18, Z+
    41e0:	dc 01       	movw	r26, r24
    41e2:	a8 53       	subi	r26, 0x38	; 56
    41e4:	be 4f       	sbci	r27, 0xFE	; 254
    41e6:	2c 93       	st	X, r18
    41e8:	01 97       	sbiw	r24, 0x01	; 1
    41ea:	c8 f7       	brcc	.-14     	; 0x41de <basic_clock+0x8>
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	90 e0       	ldi	r25, 0x00	; 0
refresh_clock_display;
    41f0:	fc 01       	movw	r30, r24
    41f2:	e8 53       	subi	r30, 0x38	; 56
    41f4:	fe 4f       	sbci	r31, 0xFE	; 254
    41f6:	20 81       	ld	r18, Z
    41f8:	fc 01       	movw	r30, r24
    41fa:	e1 5f       	subi	r30, 0xF1	; 241
    41fc:	fd 4f       	sbci	r31, 0xFD	; 253
    41fe:	20 83       	st	Z, r18
    4200:	01 96       	adiw	r24, 0x01	; 1
    4202:	88 30       	cpi	r24, 0x08	; 8
    4204:	91 05       	cpc	r25, r1
    4206:	a1 f7       	brne	.-24     	; 0x41f0 <basic_clock+0x1a>
TCCR2B = 2;														//Set clock to 4096Hz and start it
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
TIMSK2 |= (1 << TOIE2);										//Enable timer clock interrupt
    420e:	e0 e7       	ldi	r30, 0x70	; 112
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	81 60       	ori	r24, 0x01	; 1
    4216:	80 83       	st	Z, r24
clock_flag=1;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
timer_mode = 1;}
    421e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timer_mode>
    4222:	08 95       	ret

00004224 <multi_mode_clock>:



/*******************************************************************************************************************/
void multi_mode_clock(void){
	PIC_cmd =  I2C_data[0];										//Receive command from the PIC for the 1 second timer/clock
    4224:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <I2C_data>
    4228:	e0 93 e2 01 	sts	0x01E2, r30	; 0x8001e2 <PIC_cmd>
	switch(PIC_cmd){
    422c:	8e 2f       	mov	r24, r30
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	fc 01       	movw	r30, r24
    4232:	f1 97       	sbiw	r30, 0x31	; 49
    4234:	e8 30       	cpi	r30, 0x08	; 8
    4236:	f1 05       	cpc	r31, r1
    4238:	08 f0       	brcs	.+2      	; 0x423c <multi_mode_clock+0x18>
    423a:	08 c1       	rjmp	.+528    	; 0x444c <multi_mode_clock+0x228>
    423c:	ec 5c       	subi	r30, 0xCC	; 204
    423e:	fe 4f       	sbci	r31, 0xFE	; 254
    4240:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
	case '1': clock_flag=1; break;								//Display clock
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
    424a:	00 c1       	rjmp	.+512    	; 0x444c <multi_mode_clock+0x228>
	case '2': clock_flag=0; break;								//Hide clock Clock runs in background while display is used else where
    424c:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clock_flag>
    4250:	fd c0       	rjmp	.+506    	; 0x444c <multi_mode_clock+0x228>
	case '3': clock_flag=0; refresh_clock_display; break;		//Pause clock
    4252:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clock_flag>
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	fc 01       	movw	r30, r24
    425c:	e8 53       	subi	r30, 0x38	; 56
    425e:	fe 4f       	sbci	r31, 0xFE	; 254
    4260:	20 81       	ld	r18, Z
    4262:	fc 01       	movw	r30, r24
    4264:	e1 5f       	subi	r30, 0xF1	; 241
    4266:	fd 4f       	sbci	r31, 0xFD	; 253
    4268:	20 83       	st	Z, r18
    426a:	01 96       	adiw	r24, 0x01	; 1
    426c:	88 30       	cpi	r24, 0x08	; 8
    426e:	91 05       	cpc	r25, r1
    4270:	a1 f7       	brne	.-24     	; 0x425a <multi_mode_clock+0x36>
    4272:	ec c0       	rjmp	.+472    	; 0x444c <multi_mode_clock+0x228>
	case '5': {increment_seconds;} clock_flag=1; break;
    4274:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <clock_buf>
    4278:	89 33       	cpi	r24, 0x39	; 57
    427a:	30 f4       	brcc	.+12     	; 0x4288 <multi_mode_clock+0x64>
    427c:	e8 ec       	ldi	r30, 0xC8	; 200
    427e:	f1 e0       	ldi	r31, 0x01	; 1
    4280:	80 81       	ld	r24, Z
    4282:	8f 5f       	subi	r24, 0xFF	; 255
    4284:	80 83       	st	Z, r24
    4286:	24 c0       	rjmp	.+72     	; 0x42d0 <multi_mode_clock+0xac>
    4288:	e8 ec       	ldi	r30, 0xC8	; 200
    428a:	f1 e0       	ldi	r31, 0x01	; 1
    428c:	80 e3       	ldi	r24, 0x30	; 48
    428e:	80 83       	st	Z, r24
    4290:	81 81       	ldd	r24, Z+1	; 0x01
    4292:	85 33       	cpi	r24, 0x35	; 53
    4294:	20 f4       	brcc	.+8      	; 0x429e <multi_mode_clock+0x7a>
    4296:	81 81       	ldd	r24, Z+1	; 0x01
    4298:	8f 5f       	subi	r24, 0xFF	; 255
    429a:	81 83       	std	Z+1, r24	; 0x01
    429c:	19 c0       	rjmp	.+50     	; 0x42d0 <multi_mode_clock+0xac>
    429e:	e8 ec       	ldi	r30, 0xC8	; 200
    42a0:	f1 e0       	ldi	r31, 0x01	; 1
    42a2:	80 e3       	ldi	r24, 0x30	; 48
    42a4:	81 83       	std	Z+1, r24	; 0x01
    42a6:	83 81       	ldd	r24, Z+3	; 0x03
    42a8:	89 33       	cpi	r24, 0x39	; 57
    42aa:	20 f4       	brcc	.+8      	; 0x42b4 <multi_mode_clock+0x90>
    42ac:	83 81       	ldd	r24, Z+3	; 0x03
    42ae:	8f 5f       	subi	r24, 0xFF	; 255
    42b0:	83 83       	std	Z+3, r24	; 0x03
    42b2:	0e c0       	rjmp	.+28     	; 0x42d0 <multi_mode_clock+0xac>
    42b4:	e8 ec       	ldi	r30, 0xC8	; 200
    42b6:	f1 e0       	ldi	r31, 0x01	; 1
    42b8:	80 e3       	ldi	r24, 0x30	; 48
    42ba:	83 83       	std	Z+3, r24	; 0x03
    42bc:	84 81       	ldd	r24, Z+4	; 0x04
    42be:	85 33       	cpi	r24, 0x35	; 53
    42c0:	20 f4       	brcc	.+8      	; 0x42ca <multi_mode_clock+0xa6>
    42c2:	84 81       	ldd	r24, Z+4	; 0x04
    42c4:	8f 5f       	subi	r24, 0xFF	; 255
    42c6:	84 83       	std	Z+4, r24	; 0x04
    42c8:	03 c0       	rjmp	.+6      	; 0x42d0 <multi_mode_clock+0xac>
    42ca:	80 e3       	ldi	r24, 0x30	; 48
    42cc:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <clock_buf+0x4>
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
    42d6:	ba c0       	rjmp	.+372    	; 0x444c <multi_mode_clock+0x228>
	case '6': {decrement_minutes;} clock_flag=1; break;
    42d8:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <clock_buf+0x3>
    42dc:	81 33       	cpi	r24, 0x31	; 49
    42de:	30 f0       	brcs	.+12     	; 0x42ec <multi_mode_clock+0xc8>
    42e0:	e8 ec       	ldi	r30, 0xC8	; 200
    42e2:	f1 e0       	ldi	r31, 0x01	; 1
    42e4:	83 81       	ldd	r24, Z+3	; 0x03
    42e6:	81 50       	subi	r24, 0x01	; 1
    42e8:	83 83       	std	Z+3, r24	; 0x03
    42ea:	35 c0       	rjmp	.+106    	; 0x4356 <multi_mode_clock+0x132>
    42ec:	e8 ec       	ldi	r30, 0xC8	; 200
    42ee:	f1 e0       	ldi	r31, 0x01	; 1
    42f0:	89 e3       	ldi	r24, 0x39	; 57
    42f2:	83 83       	std	Z+3, r24	; 0x03
    42f4:	84 81       	ldd	r24, Z+4	; 0x04
    42f6:	81 33       	cpi	r24, 0x31	; 49
    42f8:	20 f0       	brcs	.+8      	; 0x4302 <multi_mode_clock+0xde>
    42fa:	84 81       	ldd	r24, Z+4	; 0x04
    42fc:	81 50       	subi	r24, 0x01	; 1
    42fe:	84 83       	std	Z+4, r24	; 0x04
    4300:	2a c0       	rjmp	.+84     	; 0x4356 <multi_mode_clock+0x132>
    4302:	e8 ec       	ldi	r30, 0xC8	; 200
    4304:	f1 e0       	ldi	r31, 0x01	; 1
    4306:	85 e3       	ldi	r24, 0x35	; 53
    4308:	84 83       	std	Z+4, r24	; 0x04
    430a:	87 81       	ldd	r24, Z+7	; 0x07
    430c:	80 33       	cpi	r24, 0x30	; 48
    430e:	99 f0       	breq	.+38     	; 0x4336 <multi_mode_clock+0x112>
    4310:	10 f1       	brcs	.+68     	; 0x4356 <multi_mode_clock+0x132>
    4312:	83 33       	cpi	r24, 0x33	; 51
    4314:	00 f5       	brcc	.+64     	; 0x4356 <multi_mode_clock+0x132>
    4316:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
    431a:	81 33       	cpi	r24, 0x31	; 49
    431c:	20 f0       	brcs	.+8      	; 0x4326 <multi_mode_clock+0x102>
    431e:	86 81       	ldd	r24, Z+6	; 0x06
    4320:	81 50       	subi	r24, 0x01	; 1
    4322:	86 83       	std	Z+6, r24	; 0x06
    4324:	18 c0       	rjmp	.+48     	; 0x4356 <multi_mode_clock+0x132>
    4326:	e8 ec       	ldi	r30, 0xC8	; 200
    4328:	f1 e0       	ldi	r31, 0x01	; 1
    432a:	89 e3       	ldi	r24, 0x39	; 57
    432c:	86 83       	std	Z+6, r24	; 0x06
    432e:	87 81       	ldd	r24, Z+7	; 0x07
    4330:	81 50       	subi	r24, 0x01	; 1
    4332:	87 83       	std	Z+7, r24	; 0x07
    4334:	10 c0       	rjmp	.+32     	; 0x4356 <multi_mode_clock+0x132>
    4336:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
    433a:	81 33       	cpi	r24, 0x31	; 49
    433c:	30 f0       	brcs	.+12     	; 0x434a <multi_mode_clock+0x126>
    433e:	e8 ec       	ldi	r30, 0xC8	; 200
    4340:	f1 e0       	ldi	r31, 0x01	; 1
    4342:	86 81       	ldd	r24, Z+6	; 0x06
    4344:	81 50       	subi	r24, 0x01	; 1
    4346:	86 83       	std	Z+6, r24	; 0x06
    4348:	06 c0       	rjmp	.+12     	; 0x4356 <multi_mode_clock+0x132>
    434a:	e8 ec       	ldi	r30, 0xC8	; 200
    434c:	f1 e0       	ldi	r31, 0x01	; 1
    434e:	83 e3       	ldi	r24, 0x33	; 51
    4350:	86 83       	std	Z+6, r24	; 0x06
    4352:	82 e3       	ldi	r24, 0x32	; 50
    4354:	87 83       	std	Z+7, r24	; 0x07
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
    435c:	77 c0       	rjmp	.+238    	; 0x444c <multi_mode_clock+0x228>
	case '7': {decrement_seconds;} clock_flag=1; break;
    435e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <clock_buf>
    4362:	81 33       	cpi	r24, 0x31	; 49
    4364:	30 f0       	brcs	.+12     	; 0x4372 <multi_mode_clock+0x14e>
    4366:	e8 ec       	ldi	r30, 0xC8	; 200
    4368:	f1 e0       	ldi	r31, 0x01	; 1
    436a:	80 81       	ld	r24, Z
    436c:	81 50       	subi	r24, 0x01	; 1
    436e:	80 83       	st	Z, r24
    4370:	24 c0       	rjmp	.+72     	; 0x43ba <multi_mode_clock+0x196>
    4372:	e8 ec       	ldi	r30, 0xC8	; 200
    4374:	f1 e0       	ldi	r31, 0x01	; 1
    4376:	89 e3       	ldi	r24, 0x39	; 57
    4378:	80 83       	st	Z, r24
    437a:	81 81       	ldd	r24, Z+1	; 0x01
    437c:	81 33       	cpi	r24, 0x31	; 49
    437e:	20 f0       	brcs	.+8      	; 0x4388 <multi_mode_clock+0x164>
    4380:	81 81       	ldd	r24, Z+1	; 0x01
    4382:	81 50       	subi	r24, 0x01	; 1
    4384:	81 83       	std	Z+1, r24	; 0x01
    4386:	19 c0       	rjmp	.+50     	; 0x43ba <multi_mode_clock+0x196>
    4388:	e8 ec       	ldi	r30, 0xC8	; 200
    438a:	f1 e0       	ldi	r31, 0x01	; 1
    438c:	85 e3       	ldi	r24, 0x35	; 53
    438e:	81 83       	std	Z+1, r24	; 0x01
    4390:	83 81       	ldd	r24, Z+3	; 0x03
    4392:	81 33       	cpi	r24, 0x31	; 49
    4394:	20 f0       	brcs	.+8      	; 0x439e <multi_mode_clock+0x17a>
    4396:	83 81       	ldd	r24, Z+3	; 0x03
    4398:	81 50       	subi	r24, 0x01	; 1
    439a:	83 83       	std	Z+3, r24	; 0x03
    439c:	0e c0       	rjmp	.+28     	; 0x43ba <multi_mode_clock+0x196>
    439e:	e8 ec       	ldi	r30, 0xC8	; 200
    43a0:	f1 e0       	ldi	r31, 0x01	; 1
    43a2:	89 e3       	ldi	r24, 0x39	; 57
    43a4:	83 83       	std	Z+3, r24	; 0x03
    43a6:	84 81       	ldd	r24, Z+4	; 0x04
    43a8:	81 33       	cpi	r24, 0x31	; 49
    43aa:	20 f0       	brcs	.+8      	; 0x43b4 <multi_mode_clock+0x190>
    43ac:	84 81       	ldd	r24, Z+4	; 0x04
    43ae:	81 50       	subi	r24, 0x01	; 1
    43b0:	84 83       	std	Z+4, r24	; 0x04
    43b2:	03 c0       	rjmp	.+6      	; 0x43ba <multi_mode_clock+0x196>
    43b4:	85 e3       	ldi	r24, 0x35	; 53
    43b6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <clock_buf+0x4>
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
    43c0:	45 c0       	rjmp	.+138    	; 0x444c <multi_mode_clock+0x228>
	case '8': {increment_minutes;} clock_flag=1; break;}			
    43c2:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <clock_buf+0x3>
    43c6:	89 33       	cpi	r24, 0x39	; 57
    43c8:	30 f4       	brcc	.+12     	; 0x43d6 <multi_mode_clock+0x1b2>
    43ca:	e8 ec       	ldi	r30, 0xC8	; 200
    43cc:	f1 e0       	ldi	r31, 0x01	; 1
    43ce:	83 81       	ldd	r24, Z+3	; 0x03
    43d0:	8f 5f       	subi	r24, 0xFF	; 255
    43d2:	83 83       	std	Z+3, r24	; 0x03
    43d4:	38 c0       	rjmp	.+112    	; 0x4446 <multi_mode_clock+0x222>
    43d6:	e8 ec       	ldi	r30, 0xC8	; 200
    43d8:	f1 e0       	ldi	r31, 0x01	; 1
    43da:	80 e3       	ldi	r24, 0x30	; 48
    43dc:	83 83       	std	Z+3, r24	; 0x03
    43de:	84 81       	ldd	r24, Z+4	; 0x04
    43e0:	85 33       	cpi	r24, 0x35	; 53
    43e2:	20 f4       	brcc	.+8      	; 0x43ec <multi_mode_clock+0x1c8>
    43e4:	84 81       	ldd	r24, Z+4	; 0x04
    43e6:	8f 5f       	subi	r24, 0xFF	; 255
    43e8:	84 83       	std	Z+4, r24	; 0x04
    43ea:	2d c0       	rjmp	.+90     	; 0x4446 <multi_mode_clock+0x222>
    43ec:	e8 ec       	ldi	r30, 0xC8	; 200
    43ee:	f1 e0       	ldi	r31, 0x01	; 1
    43f0:	80 e3       	ldi	r24, 0x30	; 48
    43f2:	84 83       	std	Z+4, r24	; 0x04
    43f4:	87 81       	ldd	r24, Z+7	; 0x07
    43f6:	80 33       	cpi	r24, 0x30	; 48
    43f8:	30 f1       	brcs	.+76     	; 0x4446 <multi_mode_clock+0x222>
    43fa:	82 33       	cpi	r24, 0x32	; 50
    43fc:	18 f0       	brcs	.+6      	; 0x4404 <multi_mode_clock+0x1e0>
    43fe:	82 33       	cpi	r24, 0x32	; 50
    4400:	99 f0       	breq	.+38     	; 0x4428 <multi_mode_clock+0x204>
    4402:	21 c0       	rjmp	.+66     	; 0x4446 <multi_mode_clock+0x222>
    4404:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
    4408:	89 33       	cpi	r24, 0x39	; 57
    440a:	30 f4       	brcc	.+12     	; 0x4418 <multi_mode_clock+0x1f4>
    440c:	e8 ec       	ldi	r30, 0xC8	; 200
    440e:	f1 e0       	ldi	r31, 0x01	; 1
    4410:	86 81       	ldd	r24, Z+6	; 0x06
    4412:	8f 5f       	subi	r24, 0xFF	; 255
    4414:	86 83       	std	Z+6, r24	; 0x06
    4416:	17 c0       	rjmp	.+46     	; 0x4446 <multi_mode_clock+0x222>
    4418:	e8 ec       	ldi	r30, 0xC8	; 200
    441a:	f1 e0       	ldi	r31, 0x01	; 1
    441c:	80 e3       	ldi	r24, 0x30	; 48
    441e:	86 83       	std	Z+6, r24	; 0x06
    4420:	87 81       	ldd	r24, Z+7	; 0x07
    4422:	8f 5f       	subi	r24, 0xFF	; 255
    4424:	87 83       	std	Z+7, r24	; 0x07
    4426:	0f c0       	rjmp	.+30     	; 0x4446 <multi_mode_clock+0x222>
    4428:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <clock_buf+0x6>
    442c:	83 33       	cpi	r24, 0x33	; 51
    442e:	30 f4       	brcc	.+12     	; 0x443c <multi_mode_clock+0x218>
    4430:	e8 ec       	ldi	r30, 0xC8	; 200
    4432:	f1 e0       	ldi	r31, 0x01	; 1
    4434:	86 81       	ldd	r24, Z+6	; 0x06
    4436:	8f 5f       	subi	r24, 0xFF	; 255
    4438:	86 83       	std	Z+6, r24	; 0x06
    443a:	05 c0       	rjmp	.+10     	; 0x4446 <multi_mode_clock+0x222>
    443c:	e8 ec       	ldi	r30, 0xC8	; 200
    443e:	f1 e0       	ldi	r31, 0x01	; 1
    4440:	80 e3       	ldi	r24, 0x30	; 48
    4442:	86 83       	std	Z+6, r24	; 0x06
    4444:	87 83       	std	Z+7, r24	; 0x07
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <clock_flag>
	timer_mode = 1;
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timer_mode>
    4452:	08 95       	ret

00004454 <stop_watch>:
	}
	
	

/*******************************************************************************************************************/
void stop_watch(void){
    4454:	2f 92       	push	r2
    4456:	3f 92       	push	r3
    4458:	4f 92       	push	r4
    445a:	5f 92       	push	r5
    445c:	6f 92       	push	r6
    445e:	7f 92       	push	r7
    4460:	8f 92       	push	r8
    4462:	9f 92       	push	r9
    4464:	af 92       	push	r10
    4466:	bf 92       	push	r11
    4468:	cf 92       	push	r12
    446a:	df 92       	push	r13
    446c:	ef 92       	push	r14
    446e:	ff 92       	push	r15
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    4478:	cd b7       	in	r28, 0x3d	; 61
    447a:	de b7       	in	r29, 0x3e	; 62
    447c:	c3 56       	subi	r28, 0x63	; 99
    447e:	d1 09       	sbc	r29, r1
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
int timer_pointer;
int record_counter;
char timer_store [95];

																//I2C_Tx_Clock_command(store_time)
stop_watch_mode =  I2C_data[0];									//I2C_Tx_Clock_command(display_current_time); 
    448a:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <I2C_data>
initiate_stop_watch_display;									//I2C_Tx_Clock_command(display_stored_times);
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	20 e3       	ldi	r18, 0x30	; 48
    4494:	fc 01       	movw	r30, r24
    4496:	e0 56       	subi	r30, 0x60	; 96
    4498:	fd 4f       	sbci	r31, 0xFD	; 253
    449a:	20 83       	st	Z, r18
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	88 30       	cpi	r24, 0x08	; 8
    44a0:	91 05       	cpc	r25, r1
    44a2:	c1 f7       	brne	.-16     	; 0x4494 <stop_watch+0x40>
if (stop_watch_mode == '2') 
    44a4:	32 33       	cpi	r19, 0x32	; 50
    44a6:	41 f4       	brne	.+16     	; 0x44b8 <stop_watch+0x64>
{timer_mode = 2;stop_watch_buf[2] = 0; 
    44a8:	82 e0       	ldi	r24, 0x02	; 2
    44aa:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timer_mode>
    44ae:	e0 ea       	ldi	r30, 0xA0	; 160
    44b0:	f2 e0       	ldi	r31, 0x02	; 2
    44b2:	12 82       	std	Z+2, r1	; 0x02
stop_watch_buf[5] = 0;}
    44b4:	15 82       	std	Z+5, r1	; 0x05
    44b6:	07 c0       	rjmp	.+14     	; 0x44c6 <stop_watch+0x72>
else {timer_mode = 3;stop_watch_buf[1] = 0; 
    44b8:	83 e0       	ldi	r24, 0x03	; 3
    44ba:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <timer_mode>
    44be:	e0 ea       	ldi	r30, 0xA0	; 160
    44c0:	f2 e0       	ldi	r31, 0x02	; 2
    44c2:	11 82       	std	Z+1, r1	; 0x01
stop_watch_buf[4] = 0;}
    44c4:	14 82       	std	Z+4, r1	; 0x04
TCNT2 = 0;														//Set clock to 4096Hz and start it												
    44c6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
TCCR2B = 2;													
    44ca:	82 e0       	ldi	r24, 0x02	; 2
    44cc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
TIMSK2 |= (1 << TOIE2);	
    44d0:	e0 e7       	ldi	r30, 0x70	; 112
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	80 81       	ld	r24, Z
    44d6:	81 60       	ori	r24, 0x01	; 1
    44d8:	80 83       	st	Z, r24
stop_watch_flag=1;
timer_record = 0;
timer_pointer = 0;
record_counter = 0;
    44da:	81 2c       	mov	r8, r1
    44dc:	91 2c       	mov	r9, r1
TCNT2 = 0;														//Set clock to 4096Hz and start it												
TCCR2B = 2;													
TIMSK2 |= (1 << TOIE2);	
stop_watch_flag=1;
timer_record = 0;
timer_pointer = 0;
    44de:	a4 96       	adiw	r28, 0x24	; 36
    44e0:	1f ae       	std	Y+63, r1	; 0x3f
    44e2:	1e ae       	std	Y+62, r1	; 0x3e
    44e4:	a4 97       	sbiw	r28, 0x24	; 36
stop_watch_buf[4] = 0;}
TCNT2 = 0;														//Set clock to 4096Hz and start it												
TCCR2B = 2;													
TIMSK2 |= (1 << TOIE2);	
stop_watch_flag=1;
timer_record = 0;
    44e6:	a2 96       	adiw	r28, 0x22	; 34
    44e8:	1f ae       	std	Y+63, r1	; 0x3f
    44ea:	1e ae       	std	Y+62, r1	; 0x3e
    44ec:	a2 97       	sbiw	r28, 0x22	; 34
else {timer_mode = 3;stop_watch_buf[1] = 0; 
stop_watch_buf[4] = 0;}
TCNT2 = 0;														//Set clock to 4096Hz and start it												
TCCR2B = 2;													
TIMSK2 |= (1 << TOIE2);	
stop_watch_flag=1;
    44ee:	22 24       	eor	r2, r2
    44f0:	23 94       	inc	r2
timer_pointer = 0;
record_counter = 0;

while(1){//A													//stop watch not aqble to run in background
while(1){//B													//in loop B update dislays and wait for command
TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);				//send a start condition
    44f2:	0c eb       	ldi	r16, 0xBC	; 188
    44f4:	10 e0       	ldi	r17, 0x00	; 0
    44f6:	0f 2e       	mov	r0, r31
    44f8:	f4 ea       	ldi	r31, 0xA4	; 164
    44fa:	5f 2e       	mov	r5, r31
    44fc:	f0 2d       	mov	r31, r0
while (!(TWCR & (1 << TWINT)));								//Wait for TWINT flag 
TWDR = 0x03;													//Address of slave (master read operation)  SLA + R
    44fe:	0f 2e       	mov	r0, r31
    4500:	fb eb       	ldi	r31, 0xBB	; 187
    4502:	ef 2e       	mov	r14, r31
    4504:	f1 2c       	mov	r15, r1
    4506:	f0 2d       	mov	r31, r0
    4508:	0f 2e       	mov	r0, r31
    450a:	f3 e0       	ldi	r31, 0x03	; 3
    450c:	cf 2e       	mov	r12, r31
    450e:	f0 2d       	mov	r31, r0
TWCR = (1 << TWINT) | (1 << TWEN);								//Clear TWINT bit to start transmission of address
    4510:	0f 2e       	mov	r0, r31
    4512:	f4 e8       	ldi	r31, 0x84	; 132
    4514:	df 2e       	mov	r13, r31
    4516:	f0 2d       	mov	r31, r0
while (!(TWCR & (1 << TWINT)));								//Wait for TWINT flag 
if (TWSR == 0x40)break;
    4518:	0f 2e       	mov	r0, r31
    451a:	f9 eb       	ldi	r31, 0xB9	; 185
    451c:	af 2e       	mov	r10, r31
    451e:	b1 2c       	mov	r11, r1
    4520:	f0 2d       	mov	r31, r0
if (stop_watch_flag==1){
refresh_stop_watch_display; }  
}//C
}//B		 													//Exit loop to receive mode and stop watch command

TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);				// Acquire payload_size and ignore it
    4522:	0f 2e       	mov	r0, r31
    4524:	f4 ec       	ldi	r31, 0xC4	; 196
    4526:	4f 2e       	mov	r4, r31
    4528:	f0 2d       	mov	r31, r0
for(int m = 0; m < 8; m++) 
{timer_store [timer_record + m] = display_buf[m];}
timer_record += 8; timer_record = timer_record%80; 
record_counter++; break;

case '3': stop_watch_flag=1; initiate_stop_watch_display;  
    452a:	0f 2e       	mov	r0, r31
    452c:	f0 e3       	ldi	r31, 0x30	; 48
    452e:	3f 2e       	mov	r3, r31
    4530:	f0 2d       	mov	r31, r0
if (timer_mode == 2){stop_watch_buf[2] = 0; 
stop_watch_buf[5] = 0;}
if (timer_mode == 3){stop_watch_buf[1] = 0;
stop_watch_buf[4] = 0;}
TCNT2 = 0; break;
    4532:	0f 2e       	mov	r0, r31
    4534:	f2 eb       	ldi	r31, 0xB2	; 178
    4536:	6f 2e       	mov	r6, r31
    4538:	71 2c       	mov	r7, r1
    453a:	f0 2d       	mov	r31, r0
timer_pointer = 0;
record_counter = 0;

while(1){//A													//stop watch not aqble to run in background
while(1){//B													//in loop B update dislays and wait for command
TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);				//send a start condition
    453c:	f8 01       	movw	r30, r16
    453e:	50 82       	st	Z, r5
while (!(TWCR & (1 << TWINT)));								//Wait for TWINT flag 
    4540:	f8 01       	movw	r30, r16
    4542:	80 81       	ld	r24, Z
    4544:	88 23       	and	r24, r24
    4546:	e4 f7       	brge	.-8      	; 0x4540 <stop_watch+0xec>
TWDR = 0x03;													//Address of slave (master read operation)  SLA + R
    4548:	f7 01       	movw	r30, r14
    454a:	c0 82       	st	Z, r12
TWCR = (1 << TWINT) | (1 << TWEN);								//Clear TWINT bit to start transmission of address
    454c:	f8 01       	movw	r30, r16
    454e:	d0 82       	st	Z, r13
while (!(TWCR & (1 << TWINT)));								//Wait for TWINT flag 
    4550:	f8 01       	movw	r30, r16
    4552:	80 81       	ld	r24, Z
    4554:	88 23       	and	r24, r24
    4556:	e4 f7       	brge	.-8      	; 0x4550 <stop_watch+0xfc>
if (TWSR == 0x40)break;
    4558:	f5 01       	movw	r30, r10
    455a:	80 81       	ld	r24, Z
    455c:	80 34       	cpi	r24, 0x40	; 64
    455e:	09 f4       	brne	.+2      	; 0x4562 <stop_watch+0x10e>
    4560:	3f c0       	rjmp	.+126    	; 0x45e0 <stop_watch+0x18c>

if (TCNT2 == Ten_mS_tick){//C									//Pole timer T2 for 10mSec interval
    4562:	f3 01       	movw	r30, r6
    4564:	80 81       	ld	r24, Z
    4566:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Ten_mS_tick>
    456a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <Ten_mS_tick+0x1>
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	82 17       	cp	r24, r18
    4572:	93 07       	cpc	r25, r19
    4574:	19 f7       	brne	.-58     	; 0x453c <stop_watch+0xe8>
Ten_mS_tick = (Ten_mS_tick + 41)%256; 
    4576:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Ten_mS_tick>
    457a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Ten_mS_tick+0x1>
    457e:	89 96       	adiw	r24, 0x29	; 41
    4580:	90 78       	andi	r25, 0x80	; 128
    4582:	99 23       	and	r25, r25
    4584:	1c f4       	brge	.+6      	; 0x458c <stop_watch+0x138>
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	9f 6f       	ori	r25, 0xFF	; 255
    458a:	01 96       	adiw	r24, 0x01	; 1
    458c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Ten_mS_tick+0x1>
    4590:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Ten_mS_tick>

switch (timer_mode){//D
    4594:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
    4598:	82 30       	cpi	r24, 0x02	; 2
    459a:	71 f0       	breq	.+28     	; 0x45b8 <stop_watch+0x164>
    459c:	83 30       	cpi	r24, 0x03	; 3
    459e:	71 f4       	brne	.+28     	; 0x45bc <stop_watch+0x168>
case 3:															//100ms timer;
Ten_mS_tick_counter++;
    45a0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <Ten_mS_tick_counter>
    45a4:	8f 5f       	subi	r24, 0xFF	; 255
    45a6:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <Ten_mS_tick_counter>
if (Ten_mS_tick_counter == 10) 
    45aa:	8a 30       	cpi	r24, 0x0A	; 10
    45ac:	39 f4       	brne	.+14     	; 0x45bc <stop_watch+0x168>
{update_milli_sec_display(); Ten_mS_tick_counter = 0;} 
    45ae:	0e 94 72 05 	call	0xae4	; 0xae4 <update_milli_sec_display>
    45b2:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <Ten_mS_tick_counter>
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <stop_watch+0x168>
break;
case 2: update_milli_sec_display();								//10ms timer;
    45b8:	0e 94 72 05 	call	0xae4	; 0xae4 <update_milli_sec_display>
break;}//D

if (stop_watch_flag==1){
    45bc:	f1 e0       	ldi	r31, 0x01	; 1
    45be:	2f 12       	cpse	r2, r31
    45c0:	bd cf       	rjmp	.-134    	; 0x453c <stop_watch+0xe8>
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	90 e0       	ldi	r25, 0x00	; 0
refresh_stop_watch_display; }  
    45c6:	fc 01       	movw	r30, r24
    45c8:	e0 56       	subi	r30, 0x60	; 96
    45ca:	fd 4f       	sbci	r31, 0xFD	; 253
    45cc:	20 81       	ld	r18, Z
    45ce:	fc 01       	movw	r30, r24
    45d0:	e1 5f       	subi	r30, 0xF1	; 241
    45d2:	fd 4f       	sbci	r31, 0xFD	; 253
    45d4:	20 83       	st	Z, r18
    45d6:	01 96       	adiw	r24, 0x01	; 1
    45d8:	88 30       	cpi	r24, 0x08	; 8
    45da:	91 05       	cpc	r25, r1
    45dc:	a1 f7       	brne	.-24     	; 0x45c6 <stop_watch+0x172>
    45de:	ae cf       	rjmp	.-164    	; 0x453c <stop_watch+0xe8>
}//C
}//B		 													//Exit loop to receive mode and stop watch command

TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);				// Acquire payload_size and ignore it
    45e0:	f8 01       	movw	r30, r16
    45e2:	40 82       	st	Z, r4
while (!(TWCR & (1 << TWINT)));
    45e4:	f8 01       	movw	r30, r16
    45e6:	80 81       	ld	r24, Z
    45e8:	88 23       	and	r24, r24
    45ea:	e4 f7       	brge	.-8      	; 0x45e4 <stop_watch+0x190>
payload_size = TWDR;
    45ec:	f7 01       	movw	r30, r14
    45ee:	80 81       	ld	r24, Z
    45f0:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <payload_size>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);				// Acquire mode either 9 or 10
    45f4:	f8 01       	movw	r30, r16
    45f6:	40 82       	st	Z, r4
while (!(TWCR & (1 << TWINT)));
    45f8:	f8 01       	movw	r30, r16
    45fa:	80 81       	ld	r24, Z
    45fc:	88 23       	and	r24, r24
    45fe:	e4 f7       	brge	.-8      	; 0x45f8 <stop_watch+0x1a4>
mode = TWDR;
    4600:	f7 01       	movw	r30, r14
    4602:	80 81       	ld	r24, Z
    4604:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>

TWCR = (1 << TWINT) | (1 << TWEN);
    4608:	f8 01       	movw	r30, r16
    460a:	d0 82       	st	Z, r13
while (!(TWCR & (1 << TWINT)));
    460c:	f8 01       	movw	r30, r16
    460e:	80 81       	ld	r24, Z
    4610:	88 23       	and	r24, r24
    4612:	e4 f7       	brge	.-8      	; 0x460c <stop_watch+0x1b8>
PIC_cmd =  TWDR;
    4614:	f7 01       	movw	r30, r14
    4616:	80 81       	ld	r24, Z
    4618:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <PIC_cmd>
TWCR =  (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
    461c:	84 e9       	ldi	r24, 0x94	; 148
    461e:	f8 01       	movw	r30, r16
    4620:	80 83       	st	Z, r24
	
if (mode == 10) {TCCR2B = 0; TIMSK2 &= (!(1 << TOIE2));
    4622:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    4626:	8a 30       	cpi	r24, 0x0A	; 10
    4628:	89 f4       	brne	.+34     	; 0x464c <stop_watch+0x1f8>
    462a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    462e:	e0 e7       	ldi	r30, 0x70	; 112
    4630:	f0 e0       	ldi	r31, 0x00	; 0
    4632:	80 81       	ld	r24, Z
    4634:	10 82       	st	Z, r1
{clear_display_buffer;}break;}      							//I2C_Tx_Clock_command(AT_exit_stop_watch);
    4636:	80 e0       	ldi	r24, 0x00	; 0
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	fc 01       	movw	r30, r24
    463c:	e1 5f       	subi	r30, 0xF1	; 241
    463e:	fd 4f       	sbci	r31, 0xFD	; 253
    4640:	10 82       	st	Z, r1
    4642:	01 96       	adiw	r24, 0x01	; 1
    4644:	88 30       	cpi	r24, 0x08	; 8
    4646:	91 05       	cpc	r25, r1
    4648:	c1 f7       	brne	.-16     	; 0x463a <stop_watch+0x1e6>
    464a:	a2 c0       	rjmp	.+324    	; 0x4790 <stop_watch+0x33c>

switch(PIC_cmd){
    464c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <PIC_cmd>
    4650:	82 33       	cpi	r24, 0x32	; 50
    4652:	69 f0       	breq	.+26     	; 0x466e <stop_watch+0x21a>
    4654:	18 f4       	brcc	.+6      	; 0x465c <stop_watch+0x208>
    4656:	81 33       	cpi	r24, 0x31	; 49
    4658:	39 f0       	breq	.+14     	; 0x4668 <stop_watch+0x214>
    465a:	70 cf       	rjmp	.-288    	; 0x453c <stop_watch+0xe8>
    465c:	83 33       	cpi	r24, 0x33	; 51
    465e:	e1 f1       	breq	.+120    	; 0x46d8 <stop_watch+0x284>
    4660:	84 33       	cpi	r24, 0x34	; 52
    4662:	09 f4       	brne	.+2      	; 0x4666 <stop_watch+0x212>
    4664:	58 c0       	rjmp	.+176    	; 0x4716 <stop_watch+0x2c2>
    4666:	6a cf       	rjmp	.-300    	; 0x453c <stop_watch+0xe8>
case '1': stop_watch_flag=1; break;
    4668:	22 24       	eor	r2, r2
    466a:	23 94       	inc	r2
    466c:	67 cf       	rjmp	.-306    	; 0x453c <stop_watch+0xe8>
TWCR =  (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
	
if (mode == 10) {TCCR2B = 0; TIMSK2 &= (!(1 << TOIE2));
{clear_display_buffer;}break;}      							//I2C_Tx_Clock_command(AT_exit_stop_watch);

switch(PIC_cmd){
    466e:	80 e0       	ldi	r24, 0x00	; 0
    4670:	90 e0       	ldi	r25, 0x00	; 0
case '1': stop_watch_flag=1; break;
case '2': stop_watch_flag=0; refresh_stop_watch_display; 
    4672:	fc 01       	movw	r30, r24
    4674:	e0 56       	subi	r30, 0x60	; 96
    4676:	fd 4f       	sbci	r31, 0xFD	; 253
    4678:	20 81       	ld	r18, Z
    467a:	fc 01       	movw	r30, r24
    467c:	e1 5f       	subi	r30, 0xF1	; 241
    467e:	fd 4f       	sbci	r31, 0xFD	; 253
    4680:	20 83       	st	Z, r18
    4682:	01 96       	adiw	r24, 0x01	; 1
    4684:	88 30       	cpi	r24, 0x08	; 8
    4686:	91 05       	cpc	r25, r1
    4688:	a1 f7       	brne	.-24     	; 0x4672 <stop_watch+0x21e>
    468a:	e1 e0       	ldi	r30, 0x01	; 1
    468c:	f0 e0       	ldi	r31, 0x00	; 0
    468e:	ec 0f       	add	r30, r28
    4690:	fd 1f       	adc	r31, r29
    4692:	a2 96       	adiw	r28, 0x22	; 34
    4694:	8e ad       	ldd	r24, Y+62	; 0x3e
    4696:	9f ad       	ldd	r25, Y+63	; 0x3f
    4698:	a2 97       	sbiw	r28, 0x22	; 34
    469a:	e8 0f       	add	r30, r24
    469c:	f9 1f       	adc	r31, r25
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
for(int m = 0; m < 8; m++) 
{timer_store [timer_record + m] = display_buf[m];}
    46a2:	dc 01       	movw	r26, r24
    46a4:	a1 5f       	subi	r26, 0xF1	; 241
    46a6:	bd 4f       	sbci	r27, 0xFD	; 253
    46a8:	2c 91       	ld	r18, X
    46aa:	21 93       	st	Z+, r18
{clear_display_buffer;}break;}      							//I2C_Tx_Clock_command(AT_exit_stop_watch);

switch(PIC_cmd){
case '1': stop_watch_flag=1; break;
case '2': stop_watch_flag=0; refresh_stop_watch_display; 
for(int m = 0; m < 8; m++) 
    46ac:	01 96       	adiw	r24, 0x01	; 1
    46ae:	88 30       	cpi	r24, 0x08	; 8
    46b0:	91 05       	cpc	r25, r1
    46b2:	b9 f7       	brne	.-18     	; 0x46a2 <stop_watch+0x24e>
{timer_store [timer_record + m] = display_buf[m];}
timer_record += 8; timer_record = timer_record%80; 
    46b4:	a2 96       	adiw	r28, 0x22	; 34
    46b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    46b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46ba:	a2 97       	sbiw	r28, 0x22	; 34
    46bc:	08 96       	adiw	r24, 0x08	; 8
    46be:	60 e5       	ldi	r22, 0x50	; 80
    46c0:	70 e0       	ldi	r23, 0x00	; 0
    46c2:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    46c6:	a2 96       	adiw	r28, 0x22	; 34
    46c8:	9f af       	std	Y+63, r25	; 0x3f
    46ca:	8e af       	std	Y+62, r24	; 0x3e
    46cc:	a2 97       	sbiw	r28, 0x22	; 34
record_counter++; break;
    46ce:	9f ef       	ldi	r25, 0xFF	; 255
    46d0:	89 1a       	sub	r8, r25
    46d2:	99 0a       	sbc	r9, r25
if (mode == 10) {TCCR2B = 0; TIMSK2 &= (!(1 << TOIE2));
{clear_display_buffer;}break;}      							//I2C_Tx_Clock_command(AT_exit_stop_watch);

switch(PIC_cmd){
case '1': stop_watch_flag=1; break;
case '2': stop_watch_flag=0; refresh_stop_watch_display; 
    46d4:	21 2c       	mov	r2, r1
for(int m = 0; m < 8; m++) 
{timer_store [timer_record + m] = display_buf[m];}
timer_record += 8; timer_record = timer_record%80; 
record_counter++; break;
    46d6:	32 cf       	rjmp	.-412    	; 0x453c <stop_watch+0xe8>
TWCR =  (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
	
if (mode == 10) {TCCR2B = 0; TIMSK2 &= (!(1 << TOIE2));
{clear_display_buffer;}break;}      							//I2C_Tx_Clock_command(AT_exit_stop_watch);

switch(PIC_cmd){
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e0       	ldi	r25, 0x00	; 0
for(int m = 0; m < 8; m++) 
{timer_store [timer_record + m] = display_buf[m];}
timer_record += 8; timer_record = timer_record%80; 
record_counter++; break;

case '3': stop_watch_flag=1; initiate_stop_watch_display;  
    46dc:	fc 01       	movw	r30, r24
    46de:	e0 56       	subi	r30, 0x60	; 96
    46e0:	fd 4f       	sbci	r31, 0xFD	; 253
    46e2:	30 82       	st	Z, r3
    46e4:	01 96       	adiw	r24, 0x01	; 1
    46e6:	88 30       	cpi	r24, 0x08	; 8
    46e8:	91 05       	cpc	r25, r1
    46ea:	c1 f7       	brne	.-16     	; 0x46dc <stop_watch+0x288>
if (timer_mode == 2){stop_watch_buf[2] = 0; 
    46ec:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
    46f0:	82 30       	cpi	r24, 0x02	; 2
    46f2:	21 f4       	brne	.+8      	; 0x46fc <stop_watch+0x2a8>
    46f4:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <stop_watch_buf+0x2>
stop_watch_buf[5] = 0;}
    46f8:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <stop_watch_buf+0x5>
if (timer_mode == 3){stop_watch_buf[1] = 0;
    46fc:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <timer_mode>
    4700:	83 30       	cpi	r24, 0x03	; 3
    4702:	21 f4       	brne	.+8      	; 0x470c <stop_watch+0x2b8>
    4704:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <stop_watch_buf+0x1>
stop_watch_buf[4] = 0;}
    4708:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <stop_watch_buf+0x4>
TCNT2 = 0; break;
    470c:	f3 01       	movw	r30, r6
    470e:	10 82       	st	Z, r1
for(int m = 0; m < 8; m++) 
{timer_store [timer_record + m] = display_buf[m];}
timer_record += 8; timer_record = timer_record%80; 
record_counter++; break;

case '3': stop_watch_flag=1; initiate_stop_watch_display;  
    4710:	22 24       	eor	r2, r2
    4712:	23 94       	inc	r2
if (timer_mode == 2){stop_watch_buf[2] = 0; 
stop_watch_buf[5] = 0;}
if (timer_mode == 3){stop_watch_buf[1] = 0;
stop_watch_buf[4] = 0;}
TCNT2 = 0; break;
    4714:	13 cf       	rjmp	.-474    	; 0x453c <stop_watch+0xe8>

case '4': if (record_counter){stop_watch_flag=0; 
    4716:	81 14       	cp	r8, r1
    4718:	91 04       	cpc	r9, r1
    471a:	09 f4       	brne	.+2      	; 0x471e <stop_watch+0x2ca>
    471c:	0f cf       	rjmp	.-482    	; 0x453c <stop_watch+0xe8>
    471e:	e1 e0       	ldi	r30, 0x01	; 1
    4720:	f0 e0       	ldi	r31, 0x00	; 0
    4722:	ec 0f       	add	r30, r28
    4724:	fd 1f       	adc	r31, r29
    4726:	a4 96       	adiw	r28, 0x24	; 36
    4728:	8e ad       	ldd	r24, Y+62	; 0x3e
    472a:	9f ad       	ldd	r25, Y+63	; 0x3f
    472c:	a4 97       	sbiw	r28, 0x24	; 36
    472e:	e8 0f       	add	r30, r24
    4730:	f9 1f       	adc	r31, r25
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e0       	ldi	r25, 0x00	; 0
for(int m = 0; m < 8; m++) 
{display_buf[m] = timer_store[timer_pointer + m];}
    4736:	21 91       	ld	r18, Z+
    4738:	dc 01       	movw	r26, r24
    473a:	a1 5f       	subi	r26, 0xF1	; 241
    473c:	bd 4f       	sbci	r27, 0xFD	; 253
    473e:	2c 93       	st	X, r18
if (timer_mode == 3){stop_watch_buf[1] = 0;
stop_watch_buf[4] = 0;}
TCNT2 = 0; break;

case '4': if (record_counter){stop_watch_flag=0; 
for(int m = 0; m < 8; m++) 
    4740:	01 96       	adiw	r24, 0x01	; 1
    4742:	88 30       	cpi	r24, 0x08	; 8
    4744:	91 05       	cpc	r25, r1
    4746:	b9 f7       	brne	.-18     	; 0x4736 <stop_watch+0x2e2>
{display_buf[m] = timer_store[timer_pointer + m];}
if(record_counter < 10){timer_pointer += 8;  
    4748:	9a e0       	ldi	r25, 0x0A	; 10
    474a:	89 16       	cp	r8, r25
    474c:	91 04       	cpc	r9, r1
    474e:	8c f4       	brge	.+34     	; 0x4772 <stop_watch+0x31e>
    4750:	a4 96       	adiw	r28, 0x24	; 36
    4752:	8e ad       	ldd	r24, Y+62	; 0x3e
    4754:	9f ad       	ldd	r25, Y+63	; 0x3f
    4756:	a4 97       	sbiw	r28, 0x24	; 36
    4758:	08 96       	adiw	r24, 0x08	; 8
timer_pointer = timer_pointer%timer_record;} 
    475a:	a2 96       	adiw	r28, 0x22	; 34
    475c:	6e ad       	ldd	r22, Y+62	; 0x3e
    475e:	7f ad       	ldd	r23, Y+63	; 0x3f
    4760:	a2 97       	sbiw	r28, 0x22	; 34
    4762:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    4766:	a4 96       	adiw	r28, 0x24	; 36
    4768:	9f af       	std	Y+63, r25	; 0x3f
    476a:	8e af       	std	Y+62, r24	; 0x3e
    476c:	a4 97       	sbiw	r28, 0x24	; 36
stop_watch_buf[5] = 0;}
if (timer_mode == 3){stop_watch_buf[1] = 0;
stop_watch_buf[4] = 0;}
TCNT2 = 0; break;

case '4': if (record_counter){stop_watch_flag=0; 
    476e:	21 2c       	mov	r2, r1
    4770:	e5 ce       	rjmp	.-566    	; 0x453c <stop_watch+0xe8>
for(int m = 0; m < 8; m++) 
{display_buf[m] = timer_store[timer_pointer + m];}
if(record_counter < 10){timer_pointer += 8;  
timer_pointer = timer_pointer%timer_record;} 
else{timer_pointer += 8;  
    4772:	a4 96       	adiw	r28, 0x24	; 36
    4774:	8e ad       	ldd	r24, Y+62	; 0x3e
    4776:	9f ad       	ldd	r25, Y+63	; 0x3f
    4778:	a4 97       	sbiw	r28, 0x24	; 36
    477a:	08 96       	adiw	r24, 0x08	; 8
timer_pointer = timer_pointer%80; }}break;}
    477c:	60 e5       	ldi	r22, 0x50	; 80
    477e:	70 e0       	ldi	r23, 0x00	; 0
    4780:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    4784:	a4 96       	adiw	r28, 0x24	; 36
    4786:	9f af       	std	Y+63, r25	; 0x3f
    4788:	8e af       	std	Y+62, r24	; 0x3e
    478a:	a4 97       	sbiw	r28, 0x24	; 36
stop_watch_buf[5] = 0;}
if (timer_mode == 3){stop_watch_buf[1] = 0;
stop_watch_buf[4] = 0;}
TCNT2 = 0; break;

case '4': if (record_counter){stop_watch_flag=0; 
    478c:	21 2c       	mov	r2, r1
    478e:	d6 ce       	rjmp	.-596    	; 0x453c <stop_watch+0xe8>
if(record_counter < 10){timer_pointer += 8;  
timer_pointer = timer_pointer%timer_record;} 
else{timer_pointer += 8;  
timer_pointer = timer_pointer%80; }}break;}
}//A
    4790:	cd 59       	subi	r28, 0x9D	; 157
    4792:	df 4f       	sbci	r29, 0xFF	; 255
    4794:	0f b6       	in	r0, 0x3f	; 63
    4796:	f8 94       	cli
    4798:	de bf       	out	0x3e, r29	; 62
    479a:	0f be       	out	0x3f, r0	; 63
    479c:	cd bf       	out	0x3d, r28	; 61
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	1f 91       	pop	r17
    47a4:	0f 91       	pop	r16
    47a6:	ff 90       	pop	r15
    47a8:	ef 90       	pop	r14
    47aa:	df 90       	pop	r13
    47ac:	cf 90       	pop	r12
    47ae:	bf 90       	pop	r11
    47b0:	af 90       	pop	r10
    47b2:	9f 90       	pop	r9
    47b4:	8f 90       	pop	r8
    47b6:	7f 90       	pop	r7
    47b8:	6f 90       	pop	r6
    47ba:	5f 90       	pop	r5
    47bc:	4f 90       	pop	r4
    47be:	3f 90       	pop	r3
    47c0:	2f 90       	pop	r2
    47c2:	08 95       	ret

000047c4 <PRN_8bit_GEN>:
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}		



/*****************************************************************/
char PRN_8bit_GEN(void){
    47c4:	cf 93       	push	r28
unsigned int bit;
char lfsr;

lfsr = eeprom_read_byte((uint8_t*)(0x3F3));
    47c6:	83 ef       	ldi	r24, 0xF3	; 243
    47c8:	93 e0       	ldi	r25, 0x03	; 3
    47ca:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
bit = (( lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 4)) & 1;
lfsr = (lfsr >> 1) | (bit << 7);
    47ce:	c8 2f       	mov	r28, r24
    47d0:	c6 95       	lsr	r28
    47d2:	28 2f       	mov	r18, r24
    47d4:	26 95       	lsr	r18
    47d6:	26 95       	lsr	r18
    47d8:	98 2f       	mov	r25, r24
    47da:	96 95       	lsr	r25
    47dc:	96 95       	lsr	r25
    47de:	96 95       	lsr	r25
    47e0:	92 27       	eor	r25, r18
    47e2:	98 27       	eor	r25, r24
    47e4:	82 95       	swap	r24
    47e6:	8f 70       	andi	r24, 0x0F	; 15
    47e8:	89 27       	eor	r24, r25
    47ea:	87 95       	ror	r24
    47ec:	88 27       	eor	r24, r24
    47ee:	87 95       	ror	r24
    47f0:	c8 2b       	or	r28, r24
eeprom_write_byte((uint8_t*)(0x3F3),lfsr);
    47f2:	6c 2f       	mov	r22, r28
    47f4:	83 ef       	ldi	r24, 0xF3	; 243
    47f6:	93 e0       	ldi	r25, 0x03	; 3
    47f8:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
return lfsr;}
    47fc:	8c 2f       	mov	r24, r28
    47fe:	cf 91       	pop	r28
    4800:	08 95       	ret

00004802 <I2C_master_transmit>:
			/**********Mode'T' is used by Auto_cal()***************************/

			
			
			void I2C_master_transmit(char data){
				TWDR = data;
    4802:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
				TWCR = (1 << TWINT) | (1 << TWEN);
    4806:	84 e8       	ldi	r24, 0x84	; 132
    4808:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
			while (!(TWCR & (1 << TWINT)));}
    480c:	ec eb       	ldi	r30, 0xBC	; 188
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	80 81       	ld	r24, Z
    4812:	88 23       	and	r24, r24
    4814:	ec f7       	brge	.-6      	; 0x4810 <I2C_master_transmit+0xe>
    4816:	08 95       	ret

00004818 <cal_plot_328>:
TIMSK0 |= (1 << TOIE0);								//Restore multplexer interrupt
}


/*******************************************************************************************/
void cal_plot_328(void){								//Called by Proj_9F (mode M)
    4818:	3f 92       	push	r3
    481a:	4f 92       	push	r4
    481c:	5f 92       	push	r5
    481e:	6f 92       	push	r6
    4820:	7f 92       	push	r7
    4822:	8f 92       	push	r8
    4824:	9f 92       	push	r9
    4826:	af 92       	push	r10
    4828:	bf 92       	push	r11
    482a:	cf 92       	push	r12
    482c:	df 92       	push	r13
    482e:	ef 92       	push	r14
    4830:	ff 92       	push	r15
    4832:	0f 93       	push	r16
    4834:	1f 93       	push	r17
    4836:	cf 93       	push	r28
    4838:	df 93       	push	r29
long cal_error;

TIMSK0 &= (~(1 << TOIE0));								//display not required
    483a:	ee e6       	ldi	r30, 0x6E	; 110
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	8e 7f       	andi	r24, 0xFE	; 254
    4842:	80 83       	st	Z, r24
cal_mode = 2;
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
    484a:	68 94       	set
    484c:	55 24       	eor	r5, r5
    484e:	54 f8       	bld	r5, 4

for(int m = 0x10; m <= 0xF0; m++){
Get_ready_to_calibrate;
    4850:	0f 2e       	mov	r0, r31
    4852:	f0 e7       	ldi	r31, 0x70	; 112
    4854:	cf 2e       	mov	r12, r31
    4856:	d1 2c       	mov	r13, r1
    4858:	f0 2d       	mov	r31, r0
    485a:	0f 2e       	mov	r0, r31
    485c:	ff e6       	ldi	r31, 0x6F	; 111
    485e:	ef 2e       	mov	r14, r31
    4860:	f1 2c       	mov	r15, r1
    4862:	f0 2d       	mov	r31, r0
OSCCAL = m;
    4864:	0f 2e       	mov	r0, r31
    4866:	f6 e6       	ldi	r31, 0x66	; 102
    4868:	af 2e       	mov	r10, r31
    486a:	b1 2c       	mov	r11, r1
    486c:	f0 2d       	mov	r31, r0
cal_error = compute_error(0,cal_mode,1);
OSCCAL = OSCCAL_WV;
close_calibration;

Initialise_I2C_master_write;
    486e:	cc eb       	ldi	r28, 0xBC	; 188
    4870:	d0 e0       	ldi	r29, 0x00	; 0
    4872:	0f 2e       	mov	r0, r31
    4874:	f4 ea       	ldi	r31, 0xA4	; 164
    4876:	6f 2e       	mov	r6, r31
    4878:	f0 2d       	mov	r31, r0
    487a:	0f 2e       	mov	r0, r31
    487c:	fb eb       	ldi	r31, 0xBB	; 187
    487e:	8f 2e       	mov	r8, r31
    4880:	91 2c       	mov	r9, r1
    4882:	f0 2d       	mov	r31, r0
    4884:	68 94       	set
    4886:	77 24       	eor	r7, r7
    4888:	71 f8       	bld	r7, 1
    488a:	09 eb       	ldi	r16, 0xB9	; 185
    488c:	10 e0       	ldi	r17, 0x00	; 0

TIMSK0 &= (~(1 << TOIE0));								//display not required
cal_mode = 2;

for(int m = 0x10; m <= 0xF0; m++){
Get_ready_to_calibrate;
    488e:	f6 01       	movw	r30, r12
    4890:	80 81       	ld	r24, Z
    4892:	81 60       	ori	r24, 0x01	; 1
    4894:	80 83       	st	Z, r24
    4896:	f7 01       	movw	r30, r14
    4898:	80 81       	ld	r24, Z
    489a:	81 60       	ori	r24, 0x01	; 1
    489c:	80 83       	st	Z, r24
    489e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    48a2:	0e 94 28 1b 	call	0x3650	; 0x3650 <start_timers_for_cal_error>
OSCCAL = m;
    48a6:	f5 01       	movw	r30, r10
    48a8:	50 82       	st	Z, r5
cal_error = compute_error(0,cal_mode,1);
    48aa:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    48ae:	41 e0       	ldi	r20, 0x01	; 1
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    48b6:	46 2e       	mov	r4, r22
    48b8:	37 2e       	mov	r3, r23
OSCCAL = OSCCAL_WV;
    48ba:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <OSCCAL_WV>
    48be:	f5 01       	movw	r30, r10
    48c0:	80 83       	st	Z, r24
close_calibration;
    48c2:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    48c6:	f6 01       	movw	r30, r12
    48c8:	80 81       	ld	r24, Z
    48ca:	8e 7f       	andi	r24, 0xFE	; 254
    48cc:	80 83       	st	Z, r24
    48ce:	f7 01       	movw	r30, r14
    48d0:	80 81       	ld	r24, Z
    48d2:	8e 7f       	andi	r24, 0xFE	; 254
    48d4:	80 83       	st	Z, r24

Initialise_I2C_master_write;
    48d6:	94 e8       	ldi	r25, 0x84	; 132
    48d8:	68 82       	st	Y, r6
    48da:	88 81       	ld	r24, Y
    48dc:	88 23       	and	r24, r24
    48de:	ec f7       	brge	.-6      	; 0x48da <cal_plot_328+0xc2>
    48e0:	f4 01       	movw	r30, r8
    48e2:	70 82       	st	Z, r7
    48e4:	98 83       	st	Y, r25
    48e6:	88 81       	ld	r24, Y
    48e8:	88 23       	and	r24, r24
    48ea:	ec f7       	brge	.-6      	; 0x48e6 <cal_plot_328+0xce>
    48ec:	f8 01       	movw	r30, r16
    48ee:	80 81       	ld	r24, Z
    48f0:	88 31       	cpi	r24, 0x18	; 24
    48f2:	91 f7       	brne	.-28     	; 0x48d8 <cal_plot_328+0xc0>
I2C_master_transmit(cal_error >> 8);
    48f4:	83 2d       	mov	r24, r3
    48f6:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(cal_error);
    48fa:	84 2d       	mov	r24, r4
    48fc:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}
    4900:	84 e9       	ldi	r24, 0x94	; 148
    4902:	88 83       	st	Y, r24
    4904:	53 94       	inc	r5
long cal_error;

TIMSK0 &= (~(1 << TOIE0));								//display not required
cal_mode = 2;

for(int m = 0x10; m <= 0xF0; m++){
    4906:	f1 ef       	ldi	r31, 0xF1	; 241
    4908:	5f 12       	cpse	r5, r31
    490a:	c1 cf       	rjmp	.-126    	; 0x488e <cal_plot_328+0x76>

Initialise_I2C_master_write;
I2C_master_transmit(cal_error >> 8);
I2C_master_transmit(cal_error);
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}
TIMSK0 |= (1 << TOIE0);								//Restore multplexer interrupt
    490c:	ee e6       	ldi	r30, 0x6E	; 110
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	81 60       	ori	r24, 0x01	; 1
    4914:	80 83       	st	Z, r24
}
    4916:	df 91       	pop	r29
    4918:	cf 91       	pop	r28
    491a:	1f 91       	pop	r17
    491c:	0f 91       	pop	r16
    491e:	ff 90       	pop	r15
    4920:	ef 90       	pop	r14
    4922:	df 90       	pop	r13
    4924:	cf 90       	pop	r12
    4926:	bf 90       	pop	r11
    4928:	af 90       	pop	r10
    492a:	9f 90       	pop	r9
    492c:	8f 90       	pop	r8
    492e:	7f 90       	pop	r7
    4930:	6f 90       	pop	r6
    4932:	5f 90       	pop	r5
    4934:	4f 90       	pop	r4
    4936:	3f 90       	pop	r3
    4938:	08 95       	ret

0000493a <Auto_cal>:




/*****************************************************************************************************/
void Auto_cal (void){
    493a:	8f 92       	push	r8
    493c:	9f 92       	push	r9
    493e:	af 92       	push	r10
    4940:	bf 92       	push	r11
    4942:	cf 92       	push	r12
    4944:	df 92       	push	r13
    4946:	ef 92       	push	r14
    4948:	ff 92       	push	r15
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	cd b7       	in	r28, 0x3d	; 61
    4954:	de b7       	in	r29, 0x3e	; 62
    4956:	27 97       	sbiw	r28, 0x07	; 7
    4958:	0f b6       	in	r0, 0x3f	; 63
    495a:	f8 94       	cli
    495c:	de bf       	out	0x3e, r29	; 62
    495e:	0f be       	out	0x3f, r0	; 63
    4960:	cd bf       	out	0x3d, r28	; 61
char counter_1, counter_2;		
char OSCCAL_mem = 0;		
    4962:	1b 82       	std	Y+3, r1	; 0x03
long  error_mag; 
int limit;

TIMSK0 &= (!(1 << TOIE0));
    4964:	ee e6       	ldi	r30, 0x6E	; 110
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	80 81       	ld	r24, Z
    496a:	10 82       	st	Z, r1
clear_digits;
    496c:	85 b1       	in	r24, 0x05	; 5
    496e:	82 7c       	andi	r24, 0xC2	; 194
    4970:	85 b9       	out	0x05, r24	; 5
    4972:	88 b1       	in	r24, 0x08	; 8
    4974:	88 7f       	andi	r24, 0xF8	; 248
    4976:	88 b9       	out	0x08, r24	; 8
clear_display;
    4978:	29 9a       	sbi	0x05, 1	; 5
    497a:	8b b1       	in	r24, 0x0b	; 11
    497c:	8c 6f       	ori	r24, 0xFC	; 252
    497e:	8b b9       	out	0x0b, r24	; 11
ONE; digit_0;												//Initialise display
    4980:	8b b1       	in	r24, 0x0b	; 11
    4982:	8f 79       	andi	r24, 0x9F	; 159
    4984:	8b b9       	out	0x0b, r24	; 11
    4986:	2c 9a       	sbi	0x05, 4	; 5

Timer_T1_sub(T1_delay_1sec);								//Crystal warm up time
    4988:	6b e7       	ldi	r22, 0x7B	; 123
    498a:	71 ee       	ldi	r23, 0xE1	; 225
    498c:	85 e0       	ldi	r24, 0x05	; 5
    498e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Timer_T1_sub>

cal_mode = 1;
    4992:	81 e0       	ldi	r24, 0x01	; 1
    4994:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
mode = 'T';													//Required by T0 and T1 ISR	
    4998:	84 e5       	ldi	r24, 0x54	; 84
    499a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
Get_ready_to_calibrate;
    499e:	e0 e7       	ldi	r30, 0x70	; 112
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	81 60       	ori	r24, 0x01	; 1
    49a6:	80 83       	st	Z, r24
    49a8:	ef e6       	ldi	r30, 0x6F	; 111
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	81 60       	ori	r24, 0x01	; 1
    49b0:	80 83       	st	Z, r24
    49b2:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    49b6:	0e 94 28 1b 	call	0x3650	; 0x3650 <start_timers_for_cal_error>
		
counter_1 = 0xF1;
    49ba:	81 ef       	ldi	r24, 0xF1	; 241
    49bc:	89 83       	std	Y+1, r24	; 0x01
while(1){if (!(counter_1%6))toggle_digit_0;
counter_1 -= 1;
OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0); 
    49be:	06 e6       	ldi	r16, 0x66	; 102
    49c0:	10 e0       	ldi	r17, 0x00	; 0
cal_mode = 1;
mode = 'T';													//Required by T0 and T1 ISR	
Get_ready_to_calibrate;
		
counter_1 = 0xF1;
while(1){if (!(counter_1%6))toggle_digit_0;
    49c2:	0f 2e       	mov	r0, r31
    49c4:	fb ea       	ldi	r31, 0xAB	; 171
    49c6:	ff 2e       	mov	r15, r31
    49c8:	f0 2d       	mov	r31, r0
    49ca:	68 94       	set
    49cc:	ee 24       	eor	r14, r14
    49ce:	e4 f8       	bld	r14, 4
    49d0:	0e c0       	rjmp	.+28     	; 0x49ee <Auto_cal+0xb4>
    49d2:	3f 9d       	mul	r19, r15
    49d4:	81 2d       	mov	r24, r1
    49d6:	11 24       	eor	r1, r1
    49d8:	86 95       	lsr	r24
    49da:	86 95       	lsr	r24
    49dc:	28 2f       	mov	r18, r24
    49de:	22 0f       	add	r18, r18
    49e0:	82 0f       	add	r24, r18
    49e2:	88 0f       	add	r24, r24
    49e4:	38 13       	cpse	r19, r24
    49e6:	03 c0       	rjmp	.+6      	; 0x49ee <Auto_cal+0xb4>
    49e8:	85 b1       	in	r24, 0x05	; 5
    49ea:	8e 25       	eor	r24, r14
    49ec:	85 b9       	out	0x05, r24	; 5
counter_1 -= 1;
    49ee:	89 81       	ldd	r24, Y+1	; 0x01
    49f0:	81 50       	subi	r24, 0x01	; 1
    49f2:	89 83       	std	Y+1, r24	; 0x01
OSCCAL = counter_1; error_mag = compute_error(0,cal_mode,0); 
    49f4:	d8 01       	movw	r26, r16
    49f6:	8c 93       	st	X, r24
    49f8:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4a04:	6c 83       	std	Y+4, r22	; 0x04
    4a06:	7d 83       	std	Y+5, r23	; 0x05
    4a08:	8e 83       	std	Y+6, r24	; 0x06
    4a0a:	9f 83       	std	Y+7, r25	; 0x07
if(counter_1 > 0xE0)continue; 
    4a0c:	39 81       	ldd	r19, Y+1	; 0x01
    4a0e:	31 3e       	cpi	r19, 0xE1	; 225
    4a10:	00 f7       	brcc	.-64     	; 0x49d2 <Auto_cal+0x98>
if(error_mag < 1000)break;}
    4a12:	68 3e       	cpi	r22, 0xE8	; 232
    4a14:	73 40       	sbci	r23, 0x03	; 3
    4a16:	81 05       	cpc	r24, r1
    4a18:	91 05       	cpc	r25, r1
    4a1a:	dc f6       	brge	.-74     	; 0x49d2 <Auto_cal+0x98>
		
OSCCAL_mem = OSCCAL;
    4a1c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    4a20:	8b 83       	std	Y+3, r24	; 0x03
counter_2 = 0;
    4a22:	1a 82       	std	Y+2, r1	; 0x02
toggle_digit_0;
    4a24:	95 b1       	in	r25, 0x05	; 5
    4a26:	80 e1       	ldi	r24, 0x10	; 16
    4a28:	89 27       	eor	r24, r25
    4a2a:	85 b9       	out	0x05, r24	; 5

cal_mode = 5;		
    4a2c:	85 e0       	ldi	r24, 0x05	; 5
    4a2e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
limit = 1000;
for(int m = 1; m <= 9; m++){if (!(m%3))toggle_digit_0;
    4a32:	aa 24       	eor	r10, r10
    4a34:	a3 94       	inc	r10
    4a36:	b1 2c       	mov	r11, r1
OSCCAL_mem = OSCCAL;
counter_2 = 0;
toggle_digit_0;

cal_mode = 5;		
limit = 1000;
    4a38:	0f 2e       	mov	r0, r31
    4a3a:	f8 ee       	ldi	r31, 0xE8	; 232
    4a3c:	cf 2e       	mov	r12, r31
    4a3e:	f3 e0       	ldi	r31, 0x03	; 3
    4a40:	df 2e       	mov	r13, r31
    4a42:	f0 2d       	mov	r31, r0
for(int m = 1; m <= 9; m++){if (!(m%3))toggle_digit_0;
    4a44:	0f 2e       	mov	r0, r31
    4a46:	f3 e0       	ldi	r31, 0x03	; 3
    4a48:	8f 2e       	mov	r8, r31
    4a4a:	91 2c       	mov	r9, r1
    4a4c:	f0 2d       	mov	r31, r0
    4a4e:	68 94       	set
    4a50:	ff 24       	eor	r15, r15
    4a52:	f4 f8       	bld	r15, 4
    4a54:	09 c0       	rjmp	.+18     	; 0x4a68 <Auto_cal+0x12e>
    4a56:	c5 01       	movw	r24, r10
    4a58:	b4 01       	movw	r22, r8
    4a5a:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__divmodhi4>
    4a5e:	89 2b       	or	r24, r25
    4a60:	19 f4       	brne	.+6      	; 0x4a68 <Auto_cal+0x12e>
    4a62:	85 b1       	in	r24, 0x05	; 5
    4a64:	8f 25       	eor	r24, r15
    4a66:	85 b9       	out	0x05, r24	; 5
limit -= 100;
    4a68:	e4 e6       	ldi	r30, 0x64	; 100
    4a6a:	ce 1a       	sub	r12, r30
    4a6c:	d1 08       	sbc	r13, r1
Minimise_error(limit, &counter_1, &counter_2, &error_mag, &OSCCAL_mem, cal_mode);}
    4a6e:	e0 90 d4 01 	lds	r14, 0x01D4	; 0x8001d4 <cal_mode>
    4a72:	8e 01       	movw	r16, r28
    4a74:	0d 5f       	subi	r16, 0xFD	; 253
    4a76:	1f 4f       	sbci	r17, 0xFF	; 255
    4a78:	9e 01       	movw	r18, r28
    4a7a:	2c 5f       	subi	r18, 0xFC	; 252
    4a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a7e:	ae 01       	movw	r20, r28
    4a80:	4e 5f       	subi	r20, 0xFE	; 254
    4a82:	5f 4f       	sbci	r21, 0xFF	; 255
    4a84:	be 01       	movw	r22, r28
    4a86:	6f 5f       	subi	r22, 0xFF	; 255
    4a88:	7f 4f       	sbci	r23, 0xFF	; 255
    4a8a:	c6 01       	movw	r24, r12
    4a8c:	0e 94 ad 1b 	call	0x375a	; 0x375a <Minimise_error>
counter_2 = 0;
toggle_digit_0;

cal_mode = 5;		
limit = 1000;
for(int m = 1; m <= 9; m++){if (!(m%3))toggle_digit_0;
    4a90:	ff ef       	ldi	r31, 0xFF	; 255
    4a92:	af 1a       	sub	r10, r31
    4a94:	bf 0a       	sbc	r11, r31
    4a96:	24 e6       	ldi	r18, 0x64	; 100
    4a98:	c2 16       	cp	r12, r18
    4a9a:	d1 04       	cpc	r13, r1
    4a9c:	e1 f6       	brne	.-72     	; 0x4a56 <Auto_cal+0x11c>
limit -= 100;
Minimise_error(limit, &counter_1, &counter_2, &error_mag, &OSCCAL_mem, cal_mode);}
		
error_mag = compute_error(0,cal_mode,0);
    4a9e:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    4aa2:	40 e0       	ldi	r20, 0x00	; 0
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4aaa:	6c 83       	std	Y+4, r22	; 0x04
    4aac:	7d 83       	std	Y+5, r23	; 0x05
    4aae:	8e 83       	std	Y+6, r24	; 0x06
    4ab0:	9f 83       	std	Y+7, r25	; 0x07
OSCCAL_WV = OSCCAL;	
    4ab2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    4ab6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <OSCCAL_WV>
close_calibration;
    4aba:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    4abe:	e0 e7       	ldi	r30, 0x70	; 112
    4ac0:	f0 e0       	ldi	r31, 0x00	; 0
    4ac2:	80 81       	ld	r24, Z
    4ac4:	8e 7f       	andi	r24, 0xFE	; 254
    4ac6:	80 83       	st	Z, r24
    4ac8:	ef e6       	ldi	r30, 0x6F	; 111
    4aca:	f0 e0       	ldi	r31, 0x00	; 0
    4acc:	80 81       	ld	r24, Z
    4ace:	8e 7f       	andi	r24, 0xFE	; 254
    4ad0:	80 83       	st	Z, r24
eeprom_write_byte((uint8_t*)0x3FE, OSCCAL_WV); 
    4ad2:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <OSCCAL_WV>
    4ad6:	8e ef       	ldi	r24, 0xFE	; 254
    4ad8:	93 e0       	ldi	r25, 0x03	; 3
    4ada:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
eeprom_write_byte((uint8_t*)0x3FF, OSCCAL_WV);
    4ade:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <OSCCAL_WV>
    4ae2:	8f ef       	ldi	r24, 0xFF	; 255
    4ae4:	93 e0       	ldi	r25, 0x03	; 3
    4ae6:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>

Initialise_I2C_master_write;
    4aea:	ec eb       	ldi	r30, 0xBC	; 188
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	34 ea       	ldi	r19, 0xA4	; 164
    4af0:	4b eb       	ldi	r20, 0xBB	; 187
    4af2:	50 e0       	ldi	r21, 0x00	; 0
    4af4:	22 e0       	ldi	r18, 0x02	; 2
    4af6:	94 e8       	ldi	r25, 0x84	; 132
    4af8:	69 eb       	ldi	r22, 0xB9	; 185
    4afa:	70 e0       	ldi	r23, 0x00	; 0
    4afc:	30 83       	st	Z, r19
    4afe:	80 81       	ld	r24, Z
    4b00:	88 23       	and	r24, r24
    4b02:	ec f7       	brge	.-6      	; 0x4afe <Auto_cal+0x1c4>
    4b04:	da 01       	movw	r26, r20
    4b06:	2c 93       	st	X, r18
    4b08:	90 83       	st	Z, r25
    4b0a:	80 81       	ld	r24, Z
    4b0c:	88 23       	and	r24, r24
    4b0e:	ec f7       	brge	.-6      	; 0x4b0a <Auto_cal+0x1d0>
    4b10:	db 01       	movw	r26, r22
    4b12:	8c 91       	ld	r24, X
    4b14:	88 31       	cpi	r24, 0x18	; 24
    4b16:	91 f7       	brne	.-28     	; 0x4afc <Auto_cal+0x1c2>
I2C_master_transmit(OSCCAL);
    4b18:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    4b1c:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(error_mag >> 8);
    4b20:	8d 81       	ldd	r24, Y+5	; 0x05
    4b22:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(error_mag);
    4b26:	8c 81       	ldd	r24, Y+4	; 0x04
    4b28:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    4b2c:	84 e9       	ldi	r24, 0x94	; 148
    4b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

clear_digits;
    4b32:	85 b1       	in	r24, 0x05	; 5
    4b34:	82 7c       	andi	r24, 0xC2	; 194
    4b36:	85 b9       	out	0x05, r24	; 5
    4b38:	88 b1       	in	r24, 0x08	; 8
    4b3a:	88 7f       	andi	r24, 0xF8	; 248
    4b3c:	88 b9       	out	0x08, r24	; 8
clear_display;
    4b3e:	29 9a       	sbi	0x05, 1	; 5
    4b40:	8b b1       	in	r24, 0x0b	; 11
    4b42:	8c 6f       	ori	r24, 0xFC	; 252
    4b44:	8b b9       	out	0x0b, r24	; 11
TIMSK0 |= (1 << TOIE0);}				
    4b46:	ee e6       	ldi	r30, 0x6E	; 110
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	81 60       	ori	r24, 0x01	; 1
    4b4e:	80 83       	st	Z, r24
    4b50:	27 96       	adiw	r28, 0x07	; 7
    4b52:	0f b6       	in	r0, 0x3f	; 63
    4b54:	f8 94       	cli
    4b56:	de bf       	out	0x3e, r29	; 62
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	cd bf       	out	0x3d, r28	; 61
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	1f 91       	pop	r17
    4b62:	0f 91       	pop	r16
    4b64:	ff 90       	pop	r15
    4b66:	ef 90       	pop	r14
    4b68:	df 90       	pop	r13
    4b6a:	cf 90       	pop	r12
    4b6c:	bf 90       	pop	r11
    4b6e:	af 90       	pop	r10
    4b70:	9f 90       	pop	r9
    4b72:	8f 90       	pop	r8
    4b74:	08 95       	ret

00004b76 <cal_spot_check>:


/*************************************************/	
void cal_spot_check(void)								//Called by diagnostic mode

{long cal_error;	
    4b76:	ef 92       	push	r14
    4b78:	ff 92       	push	r15
    4b7a:	0f 93       	push	r16
    4b7c:	1f 93       	push	r17
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
								
Get_ready_to_calibrate;
    4b82:	00 e7       	ldi	r16, 0x70	; 112
    4b84:	10 e0       	ldi	r17, 0x00	; 0
    4b86:	f8 01       	movw	r30, r16
    4b88:	80 81       	ld	r24, Z
    4b8a:	81 60       	ori	r24, 0x01	; 1
    4b8c:	80 83       	st	Z, r24
    4b8e:	cf e6       	ldi	r28, 0x6F	; 111
    4b90:	d0 e0       	ldi	r29, 0x00	; 0
    4b92:	88 81       	ld	r24, Y
    4b94:	81 60       	ori	r24, 0x01	; 1
    4b96:	88 83       	st	Y, r24
    4b98:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    4b9c:	0e 94 28 1b 	call	0x3650	; 0x3650 <start_timers_for_cal_error>
calibrate_without_sign_plus_warm_up_time;							
    4ba0:	85 e0       	ldi	r24, 0x05	; 5
    4ba2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
    4ba6:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4bb2:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    4bb6:	40 e0       	ldi	r20, 0x00	; 0
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4bbe:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    4bc2:	40 e0       	ldi	r20, 0x00	; 0
    4bc4:	80 e0       	ldi	r24, 0x00	; 0
    4bc6:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4bca:	f6 2e       	mov	r15, r22
    4bcc:	e7 2e       	mov	r14, r23
close_calibration;
    4bce:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    4bd2:	f8 01       	movw	r30, r16
    4bd4:	80 81       	ld	r24, Z
    4bd6:	8e 7f       	andi	r24, 0xFE	; 254
    4bd8:	80 83       	st	Z, r24
    4bda:	88 81       	ld	r24, Y
    4bdc:	8e 7f       	andi	r24, 0xFE	; 254
    4bde:	88 83       	st	Y, r24

Initialise_I2C_master_write;
    4be0:	ec eb       	ldi	r30, 0xBC	; 188
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	34 ea       	ldi	r19, 0xA4	; 164
    4be6:	cb eb       	ldi	r28, 0xBB	; 187
    4be8:	d0 e0       	ldi	r29, 0x00	; 0
    4bea:	22 e0       	ldi	r18, 0x02	; 2
    4bec:	94 e8       	ldi	r25, 0x84	; 132
    4bee:	a9 eb       	ldi	r26, 0xB9	; 185
    4bf0:	b0 e0       	ldi	r27, 0x00	; 0
    4bf2:	30 83       	st	Z, r19
    4bf4:	80 81       	ld	r24, Z
    4bf6:	88 23       	and	r24, r24
    4bf8:	ec f7       	brge	.-6      	; 0x4bf4 <cal_spot_check+0x7e>
    4bfa:	28 83       	st	Y, r18
    4bfc:	90 83       	st	Z, r25
    4bfe:	80 81       	ld	r24, Z
    4c00:	88 23       	and	r24, r24
    4c02:	ec f7       	brge	.-6      	; 0x4bfe <cal_spot_check+0x88>
    4c04:	8c 91       	ld	r24, X
    4c06:	88 31       	cpi	r24, 0x18	; 24
    4c08:	a1 f7       	brne	.-24     	; 0x4bf2 <cal_spot_check+0x7c>
I2C_master_transmit(OSCCAL);
    4c0a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    4c0e:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(cal_error >> 8);
    4c12:	8e 2d       	mov	r24, r14
    4c14:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(cal_error);
    4c18:	8f 2d       	mov	r24, r15
    4c1a:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);	}
    4c1e:	84 e9       	ldi	r24, 0x94	; 148
    4c20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4c24:	df 91       	pop	r29
    4c26:	cf 91       	pop	r28
    4c28:	1f 91       	pop	r17
    4c2a:	0f 91       	pop	r16
    4c2c:	ff 90       	pop	r15
    4c2e:	ef 90       	pop	r14
    4c30:	08 95       	ret

00004c32 <I2C_Tx_Uarithmetic_OP>:
	RN=1;}}}
	
	
	
/*****************************************************************************************************************/	
void I2C_Tx_Uarithmetic_OP (void){									//Does arithmetic on the Unsigned Real Numbers
    4c32:	0f 93       	push	r16
    4c34:	1f 93       	push	r17
    4c36:	cf 93       	push	r28
    4c38:	df 93       	push	r29

Op = I2C_data[0];
    4c3a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <I2C_data>
    4c3e:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <Op>
exponent[0] = exponent_BKP[0];	exponent[1] = exponent_BKP[1];	
    4c42:	e8 ea       	ldi	r30, 0xA8	; 168
    4c44:	f2 e0       	ldi	r31, 0x02	; 2
    4c46:	a3 e8       	ldi	r26, 0x83	; 131
    4c48:	b2 e0       	ldi	r27, 0x02	; 2
    4c4a:	9c 91       	ld	r25, X
    4c4c:	90 83       	st	Z, r25
    4c4e:	11 96       	adiw	r26, 0x01	; 1
    4c50:	9c 91       	ld	r25, X
    4c52:	91 83       	std	Z+1, r25	; 0x01
number[0] = number[4]; number[1] = number[5];						//restore exponents
    4c54:	e6 ee       	ldi	r30, 0xE6	; 230
    4c56:	f1 e0       	ldi	r31, 0x01	; 1
    4c58:	40 89       	ldd	r20, Z+16	; 0x10
    4c5a:	51 89       	ldd	r21, Z+17	; 0x11
    4c5c:	62 89       	ldd	r22, Z+18	; 0x12
    4c5e:	73 89       	ldd	r23, Z+19	; 0x13
    4c60:	40 83       	st	Z, r20
    4c62:	51 83       	std	Z+1, r21	; 0x01
    4c64:	62 83       	std	Z+2, r22	; 0x02
    4c66:	73 83       	std	Z+3, r23	; 0x03
    4c68:	94 89       	ldd	r25, Z+20	; 0x14
    4c6a:	45 89       	ldd	r20, Z+21	; 0x15
    4c6c:	36 89       	ldd	r19, Z+22	; 0x16
    4c6e:	27 89       	ldd	r18, Z+23	; 0x17
    4c70:	94 83       	std	Z+4, r25	; 0x04
    4c72:	45 83       	std	Z+5, r20	; 0x05
    4c74:	36 83       	std	Z+6, r19	; 0x06
    4c76:	27 83       	std	Z+7, r18	; 0x07
	switch(Op){
    4c78:	8d 34       	cpi	r24, 0x4D	; 77
    4c7a:	69 f0       	breq	.+26     	; 0x4c96 <I2C_Tx_Uarithmetic_OP+0x64>
    4c7c:	30 f4       	brcc	.+12     	; 0x4c8a <I2C_Tx_Uarithmetic_OP+0x58>
    4c7e:	81 34       	cpi	r24, 0x41	; 65
    4c80:	09 f4       	brne	.+2      	; 0x4c84 <I2C_Tx_Uarithmetic_OP+0x52>
    4c82:	6e c0       	rjmp	.+220    	; 0x4d60 <I2C_Tx_Uarithmetic_OP+0x12e>
    4c84:	84 34       	cpi	r24, 0x44	; 68
    4c86:	b1 f0       	breq	.+44     	; 0x4cb4 <I2C_Tx_Uarithmetic_OP+0x82>
    4c88:	87 c0       	rjmp	.+270    	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
    4c8a:	80 35       	cpi	r24, 0x50	; 80
    4c8c:	09 f4       	brne	.+2      	; 0x4c90 <I2C_Tx_Uarithmetic_OP+0x5e>
    4c8e:	57 c0       	rjmp	.+174    	; 0x4d3e <I2C_Tx_Uarithmetic_OP+0x10c>
    4c90:	82 35       	cpi	r24, 0x52	; 82
    4c92:	f9 f0       	breq	.+62     	; 0x4cd2 <I2C_Tx_Uarithmetic_OP+0xa0>
    4c94:	81 c0       	rjmp	.+258    	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
	case 'M': RHSofDP = multiply_real(number, exponent); break;	//Multiply
    4c96:	68 ea       	ldi	r22, 0xA8	; 168
    4c98:	72 e0       	ldi	r23, 0x02	; 2
    4c9a:	86 ee       	ldi	r24, 0xE6	; 230
    4c9c:	91 e0       	ldi	r25, 0x01	; 1
    4c9e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <multiply_real>
    4ca2:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <RHSofDP>
    4ca6:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <RHSofDP+0x1>
    4caa:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <RHSofDP+0x2>
    4cae:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <RHSofDP+0x3>
    4cb2:	72 c0       	rjmp	.+228    	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
	case 'D': RHSofDP = divide_real (number, exponent); break;		//Divide
    4cb4:	68 ea       	ldi	r22, 0xA8	; 168
    4cb6:	72 e0       	ldi	r23, 0x02	; 2
    4cb8:	86 ee       	ldi	r24, 0xE6	; 230
    4cba:	91 e0       	ldi	r25, 0x01	; 1
    4cbc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <divide_real>
    4cc0:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <RHSofDP>
    4cc4:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <RHSofDP+0x1>
    4cc8:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <RHSofDP+0x2>
    4ccc:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <RHSofDP+0x3>
    4cd0:	63 c0       	rjmp	.+198    	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
	case 'R':														//Route  
	mode_C_ptr=0;TIMSK1 |= (1<<TOIE1);
    4cd2:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <mode_C_ptr+0x1>
    4cd6:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <mode_C_ptr>
    4cda:	cf e6       	ldi	r28, 0x6F	; 111
    4cdc:	d0 e0       	ldi	r29, 0x00	; 0
    4cde:	88 81       	ld	r24, Y
    4ce0:	81 60       	ori	r24, 0x01	; 1
    4ce2:	88 83       	st	Y, r24



/*****************************************************************************************/
void timer_T1_sub_with_interrupt(char Counter_speed, unsigned int Start_point){ 
TCNT1H = (Start_point >> 8);
    4ce4:	80 ef       	ldi	r24, 0xF0	; 240
    4ce6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
TCNT1L = Start_point & 0x00FF;
    4cea:	83 ec       	ldi	r24, 0xC3	; 195
    4cec:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
TCCR1B = Counter_speed;}
    4cf0:	01 e8       	ldi	r16, 0x81	; 129
    4cf2:	10 e0       	ldi	r17, 0x00	; 0
    4cf4:	85 e0       	ldi	r24, 0x05	; 5
    4cf6:	f8 01       	movw	r30, r16
    4cf8:	80 83       	st	Z, r24
	timer_T1_sub_with_interrupt(T1_delay_500ms);
	exponent[1] = number[1];
    4cfa:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <number+0x4>
    4cfe:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <exponent+0x1>
	RHSofDP = any_root(number, exponent);
    4d02:	68 ea       	ldi	r22, 0xA8	; 168
    4d04:	72 e0       	ldi	r23, 0x02	; 2
    4d06:	86 ee       	ldi	r24, 0xE6	; 230
    4d08:	91 e0       	ldi	r25, 0x01	; 1
    4d0a:	0e 94 a1 12 	call	0x2542	; 0x2542 <any_root>
    4d0e:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <RHSofDP>
    4d12:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <RHSofDP+0x1>
    4d16:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <RHSofDP+0x2>
    4d1a:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <RHSofDP+0x3>
	TIMSK1 &= (~(1<<TOIE1)); TCCR1B = 0;																															////	
    4d1e:	88 81       	ld	r24, Y
    4d20:	8e 7f       	andi	r24, 0xFE	; 254
    4d22:	88 83       	st	Y, r24
    4d24:	f8 01       	movw	r30, r16
    4d26:	10 82       	st	Z, r1
	for(int m = 0; m<=7; m++)display_buf[m]=0;break;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	e1 5f       	subi	r30, 0xF1	; 241
    4d30:	fd 4f       	sbci	r31, 0xFD	; 253
    4d32:	10 82       	st	Z, r1
    4d34:	01 96       	adiw	r24, 0x01	; 1
    4d36:	88 30       	cpi	r24, 0x08	; 8
    4d38:	91 05       	cpc	r25, r1
    4d3a:	c1 f7       	brne	.-16     	; 0x4d2c <I2C_Tx_Uarithmetic_OP+0xfa>
    4d3c:	2d c0       	rjmp	.+90     	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
	case 'P': exponent[1] = number[1]; 							//Power
    4d3e:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <exponent+0x1>
	RHSofDP = any_power(number,exponent);break;
    4d42:	68 ea       	ldi	r22, 0xA8	; 168
    4d44:	72 e0       	ldi	r23, 0x02	; 2
    4d46:	86 ee       	ldi	r24, 0xE6	; 230
    4d48:	91 e0       	ldi	r25, 0x01	; 1
    4d4a:	0e 94 47 14 	call	0x288e	; 0x288e <any_power>
    4d4e:	60 93 96 02 	sts	0x0296, r22	; 0x800296 <RHSofDP>
    4d52:	70 93 97 02 	sts	0x0297, r23	; 0x800297 <RHSofDP+0x1>
    4d56:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <RHSofDP+0x2>
    4d5a:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <RHSofDP+0x3>
    4d5e:	1c c0       	rjmp	.+56     	; 0x4d98 <I2C_Tx_Uarithmetic_OP+0x166>
    4d60:	e6 e7       	ldi	r30, 0x76	; 118
    4d62:	f2 e0       	ldi	r31, 0x02	; 2
void I2C_Tx_Uarithmetic_OP (void){									//Does arithmetic on the Unsigned Real Numbers

Op = I2C_data[0];
exponent[0] = exponent_BKP[0];	exponent[1] = exponent_BKP[1];	
number[0] = number[4]; number[1] = number[5];						//restore exponents
	switch(Op){
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	90 e0       	ldi	r25, 0x00	; 0
	TIMSK1 &= (~(1<<TOIE1)); TCCR1B = 0;																															////	
	for(int m = 0; m<=7; m++)display_buf[m]=0;break;
	case 'P': exponent[1] = number[1]; 							//Power
	RHSofDP = any_power(number,exponent);break;
	case 'A': for(int m = 0; m<=7; m++)
	display_buf[m] = display_backup[m]; 
    4d68:	21 91       	ld	r18, Z+
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	a1 5f       	subi	r26, 0xF1	; 241
    4d6e:	bd 4f       	sbci	r27, 0xFD	; 253
    4d70:	2c 93       	st	X, r18
	RHSofDP = any_root(number, exponent);
	TIMSK1 &= (~(1<<TOIE1)); TCCR1B = 0;																															////	
	for(int m = 0; m<=7; m++)display_buf[m]=0;break;
	case 'P': exponent[1] = number[1]; 							//Power
	RHSofDP = any_power(number,exponent);break;
	case 'A': for(int m = 0; m<=7; m++)
    4d72:	01 96       	adiw	r24, 0x01	; 1
    4d74:	88 30       	cpi	r24, 0x08	; 8
    4d76:	91 05       	cpc	r25, r1
    4d78:	b9 f7       	brne	.-18     	; 0x4d68 <I2C_Tx_Uarithmetic_OP+0x136>
	display_buf[m] = display_backup[m]; 
	display_mask = display_backup[8];
    4d7a:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <display_backup+0x8>
    4d7e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <display_mask>
	for(int p = 0; p < 8; p++)strobe[p] = 0; break;}
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	fc 01       	movw	r30, r24
    4d88:	e4 57       	subi	r30, 0x74	; 116
    4d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    4d8c:	10 82       	st	Z, r1
    4d8e:	01 96       	adiw	r24, 0x01	; 1
    4d90:	88 30       	cpi	r24, 0x08	; 8
    4d92:	91 05       	cpc	r25, r1
    4d94:	c1 f7       	brne	.-16     	; 0x4d86 <I2C_Tx_Uarithmetic_OP+0x154>
    4d96:	51 c0       	rjmp	.+162    	; 0x4e3a <I2C_Tx_Uarithmetic_OP+0x208>
	
	if(Op == 'A')return;
    4d98:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <Op>
    4d9c:	81 34       	cpi	r24, 0x41	; 65
    4d9e:	09 f4       	brne	.+2      	; 0x4da2 <I2C_Tx_Uarithmetic_OP+0x170>
    4da0:	4c c0       	rjmp	.+152    	; 0x4e3a <I2C_Tx_Uarithmetic_OP+0x208>
	Disp_Long(RHSofDP,exponent[2]);expnt_result = exponent[2];
    4da2:	c8 ea       	ldi	r28, 0xA8	; 168
    4da4:	d2 e0       	ldi	r29, 0x02	; 2
    4da6:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <RHSofDP>
    4daa:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <RHSofDP+0x1>
    4dae:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <RHSofDP+0x2>
    4db2:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <RHSofDP+0x3>
    4db6:	4a 81       	ldd	r20, Y+2	; 0x02
    4db8:	0e 94 04 06 	call	0xc08	; 0xc08 <Disp_Long>
    4dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbe:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <expnt_result>
    4dc2:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <RHSofDP>
    4dc6:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <RHSofDP+0x1>
    4dca:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <RHSofDP+0x2>
    4dce:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <RHSofDP+0x3>
	for(int m = 0; m <= 3; m++)
	{result[3-m] = RHSofDP; RHSofDP = RHSofDP >> 8;}
    4dd2:	e8 e8       	ldi	r30, 0x88	; 136
    4dd4:	f2 e0       	ldi	r31, 0x02	; 2
    4dd6:	33 83       	std	Z+3, r19	; 0x03
    4dd8:	22 83       	std	Z+2, r18	; 0x02
    4dda:	91 83       	std	Z+1, r25	; 0x01
    4ddc:	80 83       	st	Z, r24
    4dde:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <RHSofDP>
    4de2:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <RHSofDP+0x1>
    4de6:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <RHSofDP+0x2>
    4dea:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <RHSofDP+0x3>
	
	Initialise_I2C_master_write;									//Return result to UNO device								
    4dee:	ec eb       	ldi	r30, 0xBC	; 188
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	34 ea       	ldi	r19, 0xA4	; 164
    4df4:	cb eb       	ldi	r28, 0xBB	; 187
    4df6:	d0 e0       	ldi	r29, 0x00	; 0
    4df8:	22 e0       	ldi	r18, 0x02	; 2
    4dfa:	94 e8       	ldi	r25, 0x84	; 132
    4dfc:	a9 eb       	ldi	r26, 0xB9	; 185
    4dfe:	b0 e0       	ldi	r27, 0x00	; 0
    4e00:	30 83       	st	Z, r19
    4e02:	80 81       	ld	r24, Z
    4e04:	88 23       	and	r24, r24
    4e06:	ec f7       	brge	.-6      	; 0x4e02 <I2C_Tx_Uarithmetic_OP+0x1d0>
    4e08:	28 83       	st	Y, r18
    4e0a:	90 83       	st	Z, r25
    4e0c:	80 81       	ld	r24, Z
    4e0e:	88 23       	and	r24, r24
    4e10:	ec f7       	brge	.-6      	; 0x4e0c <I2C_Tx_Uarithmetic_OP+0x1da>
    4e12:	8c 91       	ld	r24, X
    4e14:	88 31       	cpi	r24, 0x18	; 24
    4e16:	a1 f7       	brne	.-24     	; 0x4e00 <I2C_Tx_Uarithmetic_OP+0x1ce>
    4e18:	c8 e8       	ldi	r28, 0x88	; 136
    4e1a:	d2 e0       	ldi	r29, 0x02	; 2
    4e1c:	0c e8       	ldi	r16, 0x8C	; 140
    4e1e:	12 e0       	ldi	r17, 0x02	; 2
	for(int m = 0; m<=3; m++)
	{I2C_master_transmit(result[m]);}
    4e20:	89 91       	ld	r24, Y+
    4e22:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
	Disp_Long(RHSofDP,exponent[2]);expnt_result = exponent[2];
	for(int m = 0; m <= 3; m++)
	{result[3-m] = RHSofDP; RHSofDP = RHSofDP >> 8;}
	
	Initialise_I2C_master_write;									//Return result to UNO device								
	for(int m = 0; m<=3; m++)
    4e26:	c0 17       	cp	r28, r16
    4e28:	d1 07       	cpc	r29, r17
    4e2a:	d1 f7       	brne	.-12     	; 0x4e20 <I2C_Tx_Uarithmetic_OP+0x1ee>
	{I2C_master_transmit(result[m]);}
	I2C_master_transmit(expnt_result);
    4e2c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <expnt_result>
    4e30:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}
    4e34:	84 e9       	ldi	r24, 0x94	; 148
    4e36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	08 95       	ret

00004e44 <Message_from_the_OS>:
char PRN_8bit_GEN(void);




void Message_from_the_OS(void){
    4e44:	ff 92       	push	r15
    4e46:	0f 93       	push	r16
    4e48:	1f 93       	push	r17
    4e4a:	cf 93       	push	r28
    4e4c:	df 93       	push	r29

int text_max, eeprom_ptr;
char string_counter, string_no;

if(((eeprom_read_byte((uint8_t*)(0))) == 0xFF) &&\
    4e4e:	80 e0       	ldi	r24, 0x00	; 0
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    4e56:	08 2f       	mov	r16, r24
    4e58:	8f 3f       	cpi	r24, 0xFF	; 255
    4e5a:	99 f4       	brne	.+38     	; 0x4e82 <Message_from_the_OS+0x3e>
((eeprom_read_byte((uint8_t*)(1))) == 0xFF))					//No text
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
void Message_from_the_OS(void){

int text_max, eeprom_ptr;
char string_counter, string_no;

if(((eeprom_read_byte((uint8_t*)(0))) == 0xFF) &&\
    4e64:	8f 3f       	cpi	r24, 0xFF	; 255
    4e66:	69 f4       	brne	.+26     	; 0x4e82 <Message_from_the_OS+0x3e>
((eeprom_read_byte((uint8_t*)(1))) == 0xFF))					//No text

{text_max = 7;
eeprom_write_byte((uint8_t*)(5), '?');
    4e68:	6f e3       	ldi	r22, 0x3F	; 63
    4e6a:	85 e0       	ldi	r24, 0x05	; 5
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
eeprom_write_byte((uint8_t*)(6), 0);}
    4e72:	60 e0       	ldi	r22, 0x00	; 0
    4e74:	86 e0       	ldi	r24, 0x06	; 6
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
char string_counter, string_no;

if(((eeprom_read_byte((uint8_t*)(0))) == 0xFF) &&\
((eeprom_read_byte((uint8_t*)(1))) == 0xFF))					//No text

{text_max = 7;
    4e7c:	07 e0       	ldi	r16, 0x07	; 7
    4e7e:	10 e0       	ldi	r17, 0x00	; 0
    4e80:	0c c0       	rjmp	.+24     	; 0x4e9a <Message_from_the_OS+0x56>
eeprom_write_byte((uint8_t*)(5), '?');
eeprom_write_byte((uint8_t*)(6), 0);}

else
{text_max = (eeprom_read_byte((uint8_t*)(0)) <<8) +\
eeprom_read_byte((uint8_t*)(1));}								//Address of end of text section + 1
    4e82:	81 e0       	ldi	r24, 0x01	; 1
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
{text_max = 7;
eeprom_write_byte((uint8_t*)(5), '?');
eeprom_write_byte((uint8_t*)(6), 0);}

else
{text_max = (eeprom_read_byte((uint8_t*)(0)) <<8) +\
    4e8a:	10 e0       	ldi	r17, 0x00	; 0
    4e8c:	10 2f       	mov	r17, r16
    4e8e:	00 27       	eor	r16, r16
    4e90:	08 0f       	add	r16, r24
    4e92:	11 1d       	adc	r17, r1
eeprom_read_byte((uint8_t*)(1));}								//Address of end of text section + 1

string_counter = 0;
eeprom_ptr = 5;													//Address of start of text

while(eeprom_ptr < text_max){									//scan text section
    4e94:	06 30       	cpi	r16, 0x06	; 6
    4e96:	11 05       	cpc	r17, r1
    4e98:	74 f0       	brlt	.+28     	; 0x4eb6 <Message_from_the_OS+0x72>
char string_counter, string_no;

if(((eeprom_read_byte((uint8_t*)(0))) == 0xFF) &&\
((eeprom_read_byte((uint8_t*)(1))) == 0xFF))					//No text

{text_max = 7;
    4e9a:	f1 2c       	mov	r15, r1
    4e9c:	c5 e0       	ldi	r28, 0x05	; 5
    4e9e:	d0 e0       	ldi	r29, 0x00	; 0

string_counter = 0;
eeprom_ptr = 5;													//Address of start of text

while(eeprom_ptr < text_max){									//scan text section
if (!(eeprom_read_byte((uint8_t*)(eeprom_ptr))))				//Count the number of strings
    4ea0:	ce 01       	movw	r24, r28
    4ea2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    4ea6:	81 11       	cpse	r24, r1
    4ea8:	01 c0       	rjmp	.+2      	; 0x4eac <Message_from_the_OS+0x68>
string_counter++;
    4eaa:	f3 94       	inc	r15
eeprom_ptr++;}
    4eac:	21 96       	adiw	r28, 0x01	; 1
eeprom_read_byte((uint8_t*)(1));}								//Address of end of text section + 1

string_counter = 0;
eeprom_ptr = 5;													//Address of start of text

while(eeprom_ptr < text_max){									//scan text section
    4eae:	c0 17       	cp	r28, r16
    4eb0:	d1 07       	cpc	r29, r17
    4eb2:	b4 f3       	brlt	.-20     	; 0x4ea0 <Message_from_the_OS+0x5c>
    4eb4:	01 c0       	rjmp	.+2      	; 0x4eb8 <Message_from_the_OS+0x74>

else
{text_max = (eeprom_read_byte((uint8_t*)(0)) <<8) +\
eeprom_read_byte((uint8_t*)(1));}								//Address of end of text section + 1

string_counter = 0;
    4eb6:	f1 2c       	mov	r15, r1
while(eeprom_ptr < text_max){									//scan text section
if (!(eeprom_read_byte((uint8_t*)(eeprom_ptr))))				//Count the number of strings
string_counter++;
eeprom_ptr++;}
	
string_no =  (PRN_8bit_GEN()%(string_counter)) + 1;			//Generate random string number (between 1 and String_counter)
    4eb8:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <PRN_8bit_GEN>
    4ebc:	6f 2d       	mov	r22, r15
    4ebe:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__udivmodqi4>
    4ec2:	01 e0       	ldi	r16, 0x01	; 1
    4ec4:	09 0f       	add	r16, r25
string_counter=1;
eeprom_ptr = 5;

while(1){if(string_counter==string_no)break;					//Scan text section untill required string is reached
    4ec6:	01 30       	cpi	r16, 0x01	; 1
    4ec8:	69 f0       	breq	.+26     	; 0x4ee4 <Message_from_the_OS+0xa0>
    4eca:	11 e0       	ldi	r17, 0x01	; 1
    4ecc:	c5 e0       	ldi	r28, 0x05	; 5
    4ece:	d0 e0       	ldi	r29, 0x00	; 0
	else if (!(eeprom_read_byte((uint8_t*)(eeprom_ptr))))
    4ed0:	ce 01       	movw	r24, r28
    4ed2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	01 c0       	rjmp	.+2      	; 0x4edc <Message_from_the_OS+0x98>
	string_counter++;
    4eda:	1f 5f       	subi	r17, 0xFF	; 255
	eeprom_ptr++;}
    4edc:	21 96       	adiw	r28, 0x01	; 1
	
string_no =  (PRN_8bit_GEN()%(string_counter)) + 1;			//Generate random string number (between 1 and String_counter)
string_counter=1;
eeprom_ptr = 5;

while(1){if(string_counter==string_no)break;					//Scan text section untill required string is reached
    4ede:	10 13       	cpse	r17, r16
    4ee0:	f7 cf       	rjmp	.-18     	; 0x4ed0 <Message_from_the_OS+0x8c>
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <Message_from_the_OS+0xa4>
string_counter++;
eeprom_ptr++;}
	
string_no =  (PRN_8bit_GEN()%(string_counter)) + 1;			//Generate random string number (between 1 and String_counter)
string_counter=1;
eeprom_ptr = 5;
    4ee4:	c5 e0       	ldi	r28, 0x05	; 5
    4ee6:	d0 e0       	ldi	r29, 0x00	; 0
while(1){if(string_counter==string_no)break;					//Scan text section untill required string is reached
	else if (!(eeprom_read_byte((uint8_t*)(eeprom_ptr))))
	string_counter++;
	eeprom_ptr++;}

Initialise_I2C_master_write;									//Send string
    4ee8:	ec eb       	ldi	r30, 0xBC	; 188
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	34 ea       	ldi	r19, 0xA4	; 164
    4eee:	4b eb       	ldi	r20, 0xBB	; 187
    4ef0:	50 e0       	ldi	r21, 0x00	; 0
    4ef2:	22 e0       	ldi	r18, 0x02	; 2
    4ef4:	94 e8       	ldi	r25, 0x84	; 132
    4ef6:	69 eb       	ldi	r22, 0xB9	; 185
    4ef8:	70 e0       	ldi	r23, 0x00	; 0
    4efa:	30 83       	st	Z, r19
    4efc:	80 81       	ld	r24, Z
    4efe:	88 23       	and	r24, r24
    4f00:	ec f7       	brge	.-6      	; 0x4efc <Message_from_the_OS+0xb8>
    4f02:	da 01       	movw	r26, r20
    4f04:	2c 93       	st	X, r18
    4f06:	90 83       	st	Z, r25
    4f08:	80 81       	ld	r24, Z
    4f0a:	88 23       	and	r24, r24
    4f0c:	ec f7       	brge	.-6      	; 0x4f08 <Message_from_the_OS+0xc4>
    4f0e:	db 01       	movw	r26, r22
    4f10:	8c 91       	ld	r24, X
    4f12:	88 31       	cpi	r24, 0x18	; 24
    4f14:	91 f7       	brne	.-28     	; 0x4efa <Message_from_the_OS+0xb6>

do{
I2C_master_transmit(eeprom_read_byte((uint8_t*)eeprom_ptr));
    4f16:	ce 01       	movw	r24, r28
    4f18:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    4f1c:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
eeprom_ptr++;}while(eeprom_read_byte((uint8_t*)eeprom_ptr));
    4f20:	21 96       	adiw	r28, 0x01	; 1
    4f22:	ce 01       	movw	r24, r28
    4f24:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    4f28:	81 11       	cpse	r24, r1
    4f2a:	f5 cf       	rjmp	.-22     	; 0x4f16 <Message_from_the_OS+0xd2>
	
I2C_master_transmit('\0');
    4f2c:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit('\0');
    4f30:	80 e0       	ldi	r24, 0x00	; 0
    4f32:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}		
    4f36:	84 e9       	ldi	r24, 0x94	; 148
    4f38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4f3c:	df 91       	pop	r29
    4f3e:	cf 91       	pop	r28
    4f40:	1f 91       	pop	r17
    4f42:	0f 91       	pop	r16
    4f44:	ff 90       	pop	r15
    4f46:	08 95       	ret

00004f48 <I2C_master_receive>:

			char I2C_master_receive(char mode){
				char data;
				if(!(mode))TWCR = (1 << TWINT) | (1 << TWEN);
    4f48:	81 11       	cpse	r24, r1
    4f4a:	04 c0       	rjmp	.+8      	; 0x4f54 <I2C_master_receive+0xc>
    4f4c:	84 e8       	ldi	r24, 0x84	; 132
    4f4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4f52:	03 c0       	rjmp	.+6      	; 0x4f5a <I2C_master_receive+0x12>
				else TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    4f54:	84 ec       	ldi	r24, 0xC4	; 196
    4f56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
				while (!(TWCR & (1 << TWINT)));
    4f5a:	ec eb       	ldi	r30, 0xBC	; 188
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	80 81       	ld	r24, Z
    4f60:	88 23       	and	r24, r24
    4f62:	ec f7       	brge	.-6      	; 0x4f5e <I2C_master_receive+0x16>
				data =  TWDR;
    4f64:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
			return data;}
    4f68:	08 95       	ret

00004f6a <manual_cal_PCB_A_device>:
cal_error = compute_error(0,cal_mode,0);



/************************************************************************************************************/
void manual_cal_PCB_A_device(void){
    4f6a:	cf 92       	push	r12
    4f6c:	df 92       	push	r13
    4f6e:	ef 92       	push	r14
    4f70:	ff 92       	push	r15
    4f72:	0f 93       	push	r16
    4f74:	1f 93       	push	r17
    4f76:	cf 93       	push	r28
    4f78:	df 93       	push	r29
long cal_error;
char OSCCAL_UV;		

TIMSK0 &= (~(1 << TOIE0));								//display not required
    4f7a:	ee e6       	ldi	r30, 0x6E	; 110
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	8e 7f       	andi	r24, 0xFE	; 254
    4f82:	80 83       	st	Z, r24
EA_buff_ptr = 0;
    4f84:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <EA_buff_ptr+0x1>
    4f88:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <EA_buff_ptr>
cal_mode = 5;		
    4f8c:	85 e0       	ldi	r24, 0x05	; 5
    4f8e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
Get_ready_to_calibrate;
    4f92:	e0 e7       	ldi	r30, 0x70	; 112
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	80 81       	ld	r24, Z
    4f98:	81 60       	ori	r24, 0x01	; 1
    4f9a:	80 83       	st	Z, r24
    4f9c:	ef e6       	ldi	r30, 0x6F	; 111
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	80 81       	ld	r24, Z
    4fa2:	81 60       	ori	r24, 0x01	; 1
    4fa4:	80 83       	st	Z, r24
    4fa6:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    4faa:	0e 94 28 1b 	call	0x3650	; 0x3650 <start_timers_for_cal_error>
OSCCAL -=20;											//Compute cal error for 41 values of OSCCAL
    4fae:	e6 e6       	ldi	r30, 0x66	; 102
    4fb0:	f0 e0       	ldi	r31, 0x00	; 0
    4fb2:	80 81       	ld	r24, Z
    4fb4:	84 51       	subi	r24, 0x14	; 20
    4fb6:	80 83       	st	Z, r24
    4fb8:	c9 e2       	ldi	r28, 0x29	; 41
    4fba:	d0 e0       	ldi	r29, 0x00	; 0
for(int m = 0; m <= 40; m++)
{cal_error = compute_error(1,cal_mode,1);OSCCAL++;}
    4fbc:	06 e6       	ldi	r16, 0x66	; 102
    4fbe:	10 e0       	ldi	r17, 0x00	; 0
    4fc0:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    4fc4:	41 e0       	ldi	r20, 0x01	; 1
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    4fcc:	f8 01       	movw	r30, r16
    4fce:	80 81       	ld	r24, Z
    4fd0:	8f 5f       	subi	r24, 0xFF	; 255
    4fd2:	80 83       	st	Z, r24
    4fd4:	21 97       	sbiw	r28, 0x01	; 1
TIMSK0 &= (~(1 << TOIE0));								//display not required
EA_buff_ptr = 0;
cal_mode = 5;		
Get_ready_to_calibrate;
OSCCAL -=20;											//Compute cal error for 41 values of OSCCAL
for(int m = 0; m <= 40; m++)
    4fd6:	a1 f7       	brne	.-24     	; 0x4fc0 <manual_cal_PCB_A_device+0x56>
{cal_error = compute_error(1,cal_mode,1);OSCCAL++;}
OSCCAL = OSCCAL_WV;
    4fd8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <OSCCAL_WV>
    4fdc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
close_calibration;
    4fe0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    4fe4:	e0 e7       	ldi	r30, 0x70	; 112
    4fe6:	f0 e0       	ldi	r31, 0x00	; 0
    4fe8:	80 81       	ld	r24, Z
    4fea:	8e 7f       	andi	r24, 0xFE	; 254
    4fec:	80 83       	st	Z, r24
    4fee:	ef e6       	ldi	r30, 0x6F	; 111
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	80 81       	ld	r24, Z
    4ff4:	8e 7f       	andi	r24, 0xFE	; 254
    4ff6:	80 83       	st	Z, r24
		
Initialise_I2C_master_write;							//Transmit error values to user
    4ff8:	ec eb       	ldi	r30, 0xBC	; 188
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	34 ea       	ldi	r19, 0xA4	; 164
    4ffe:	cb eb       	ldi	r28, 0xBB	; 187
    5000:	d0 e0       	ldi	r29, 0x00	; 0
    5002:	22 e0       	ldi	r18, 0x02	; 2
    5004:	94 e8       	ldi	r25, 0x84	; 132
    5006:	a9 eb       	ldi	r26, 0xB9	; 185
    5008:	b0 e0       	ldi	r27, 0x00	; 0
    500a:	30 83       	st	Z, r19
    500c:	80 81       	ld	r24, Z
    500e:	88 23       	and	r24, r24
    5010:	ec f7       	brge	.-6      	; 0x500c <manual_cal_PCB_A_device+0xa2>
    5012:	28 83       	st	Y, r18
    5014:	90 83       	st	Z, r25
    5016:	80 81       	ld	r24, Z
    5018:	88 23       	and	r24, r24
    501a:	ec f7       	brge	.-6      	; 0x5016 <manual_cal_PCB_A_device+0xac>
    501c:	8c 91       	ld	r24, X
    501e:	88 31       	cpi	r24, 0x18	; 24
    5020:	a1 f7       	brne	.-24     	; 0x500a <manual_cal_PCB_A_device+0xa0>
I2C_master_transmit(OSCCAL_DV);
    5022:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <OSCCAL_DV>
    5026:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(OSCCAL_WV - 20);						
    502a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <OSCCAL_WV>
    502e:	84 51       	subi	r24, 0x14	; 20
    5030:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
    5034:	c9 e1       	ldi	r28, 0x19	; 25
    5036:	d2 e0       	ldi	r29, 0x02	; 2
    5038:	0f 2e       	mov	r0, r31
    503a:	fb e6       	ldi	r31, 0x6B	; 107
    503c:	ef 2e       	mov	r14, r31
    503e:	f2 e0       	ldi	r31, 0x02	; 2
    5040:	ff 2e       	mov	r15, r31
    5042:	f0 2d       	mov	r31, r0
    5044:	8e 01       	movw	r16, r28
for(int m = 0; m <= 40; m++){							
I2C_master_transmit(buffer[m] >> 8);
    5046:	89 81       	ldd	r24, Y+1	; 0x01
    5048:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
    504c:	22 96       	adiw	r28, 0x02	; 2
I2C_master_transmit(buffer[m]);}
    504e:	f8 01       	movw	r30, r16
    5050:	80 81       	ld	r24, Z
    5052:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
close_calibration;
		
Initialise_I2C_master_write;							//Transmit error values to user
I2C_master_transmit(OSCCAL_DV);
I2C_master_transmit(OSCCAL_WV - 20);						
for(int m = 0; m <= 40; m++){							
    5056:	ce 15       	cp	r28, r14
    5058:	df 05       	cpc	r29, r15
    505a:	a1 f7       	brne	.-24     	; 0x5044 <manual_cal_PCB_A_device+0xda>
I2C_master_transmit(buffer[m] >> 8);
I2C_master_transmit(buffer[m]);}
I2C_master_transmit	(OSCCAL_WV);
    505c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <OSCCAL_WV>
    5060:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);	
    5064:	84 e9       	ldi	r24, 0x94	; 148
    5066:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
Initialise_I2C_master_read;								//Read OSCCAL_UV (user value)
    506a:	ec eb       	ldi	r30, 0xBC	; 188
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	34 ea       	ldi	r19, 0xA4	; 164
    5070:	cb eb       	ldi	r28, 0xBB	; 187
    5072:	d0 e0       	ldi	r29, 0x00	; 0
    5074:	23 e0       	ldi	r18, 0x03	; 3
    5076:	94 e8       	ldi	r25, 0x84	; 132
    5078:	a9 eb       	ldi	r26, 0xB9	; 185
    507a:	b0 e0       	ldi	r27, 0x00	; 0
    507c:	30 83       	st	Z, r19
    507e:	80 81       	ld	r24, Z
    5080:	88 23       	and	r24, r24
    5082:	ec f7       	brge	.-6      	; 0x507e <manual_cal_PCB_A_device+0x114>
    5084:	28 83       	st	Y, r18
    5086:	90 83       	st	Z, r25
    5088:	80 81       	ld	r24, Z
    508a:	88 23       	and	r24, r24
    508c:	ec f7       	brge	.-6      	; 0x5088 <manual_cal_PCB_A_device+0x11e>
    508e:	8c 91       	ld	r24, X
    5090:	80 34       	cpi	r24, 0x40	; 64
    5092:	a1 f7       	brne	.-24     	; 0x507c <manual_cal_PCB_A_device+0x112>
OSCCAL_UV = I2C_master_receive(0);							
    5094:	80 e0       	ldi	r24, 0x00	; 0
    5096:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    509a:	18 2f       	mov	r17, r24
TWCR = (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
    509c:	84 e9       	ldi	r24, 0x94	; 148
    509e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
/*********************************************/
Get_ready_to_calibrate;									//Test value of OSCCAL entered by user
    50a2:	e0 e7       	ldi	r30, 0x70	; 112
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	80 81       	ld	r24, Z
    50a8:	81 60       	ori	r24, 0x01	; 1
    50aa:	80 83       	st	Z, r24
    50ac:	ef e6       	ldi	r30, 0x6F	; 111
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	80 81       	ld	r24, Z
    50b2:	81 60       	ori	r24, 0x01	; 1
    50b4:	80 83       	st	Z, r24
    50b6:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    50ba:	0e 94 28 1b 	call	0x3650	; 0x3650 <start_timers_for_cal_error>
if(OSCCAL_UV == 0xFF)OSCCAL = OSCCAL_DV;				//If 0xFF reinstate working value
    50be:	1f 3f       	cpi	r17, 0xFF	; 255
    50c0:	29 f4       	brne	.+10     	; 0x50cc <manual_cal_PCB_A_device+0x162>
    50c2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <OSCCAL_DV>
    50c6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <manual_cal_PCB_A_device+0x166>
else OSCCAL = OSCCAL_UV;								//OSCCAL test value
    50cc:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
calibrate_without_sign_plus_warm_up_time;								
    50d0:	85 e0       	ldi	r24, 0x05	; 5
    50d2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <cal_mode>
    50d6:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    50da:	40 e0       	ldi	r20, 0x00	; 0
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    50e2:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    50e6:	40 e0       	ldi	r20, 0x00	; 0
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    50ee:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <cal_mode>
    50f2:	40 e0       	ldi	r20, 0x00	; 0
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	0e 94 34 1b 	call	0x3668	; 0x3668 <compute_error>
    50fa:	6b 01       	movw	r12, r22
    50fc:	7c 01       	movw	r14, r24
close_calibration;
    50fe:	0e 94 0c 1b 	call	0x3618	; 0x3618 <initialise_timers_for_cal_error>
    5102:	e0 e7       	ldi	r30, 0x70	; 112
    5104:	f0 e0       	ldi	r31, 0x00	; 0
    5106:	80 81       	ld	r24, Z
    5108:	8e 7f       	andi	r24, 0xFE	; 254
    510a:	80 83       	st	Z, r24
    510c:	ef e6       	ldi	r30, 0x6F	; 111
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	80 81       	ld	r24, Z
    5112:	8e 7f       	andi	r24, 0xFE	; 254
    5114:	80 83       	st	Z, r24
	
Initialise_I2C_master_write;							//Report results to user
    5116:	ec eb       	ldi	r30, 0xBC	; 188
    5118:	f0 e0       	ldi	r31, 0x00	; 0
    511a:	34 ea       	ldi	r19, 0xA4	; 164
    511c:	cb eb       	ldi	r28, 0xBB	; 187
    511e:	d0 e0       	ldi	r29, 0x00	; 0
    5120:	22 e0       	ldi	r18, 0x02	; 2
    5122:	94 e8       	ldi	r25, 0x84	; 132
    5124:	a9 eb       	ldi	r26, 0xB9	; 185
    5126:	b0 e0       	ldi	r27, 0x00	; 0
    5128:	30 83       	st	Z, r19
    512a:	80 81       	ld	r24, Z
    512c:	88 23       	and	r24, r24
    512e:	ec f7       	brge	.-6      	; 0x512a <manual_cal_PCB_A_device+0x1c0>
    5130:	28 83       	st	Y, r18
    5132:	90 83       	st	Z, r25
    5134:	80 81       	ld	r24, Z
    5136:	88 23       	and	r24, r24
    5138:	ec f7       	brge	.-6      	; 0x5134 <manual_cal_PCB_A_device+0x1ca>
    513a:	8c 91       	ld	r24, X
    513c:	88 31       	cpi	r24, 0x18	; 24
    513e:	a1 f7       	brne	.-24     	; 0x5128 <manual_cal_PCB_A_device+0x1be>
if(cal_error > 1750)									//Error resulting from User OSCCAL exceeds 1750
    5140:	f7 ed       	ldi	r31, 0xD7	; 215
    5142:	cf 16       	cp	r12, r31
    5144:	f6 e0       	ldi	r31, 0x06	; 6
    5146:	df 06       	cpc	r13, r31
    5148:	e1 04       	cpc	r14, r1
    514a:	f1 04       	cpc	r15, r1
    514c:	8c f0       	brlt	.+34     	; 0x5170 <manual_cal_PCB_A_device+0x206>
{I2C_master_transmit('X');								//Reject result
    514e:	88 e5       	ldi	r24, 0x58	; 88
    5150:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(cal_error >> 8);						
    5154:	8d 2d       	mov	r24, r13
    5156:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
I2C_master_transmit(cal_error);
    515a:	8c 2d       	mov	r24, r12
    515c:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
    5160:	84 e9       	ldi	r24, 0x94	; 148
    5162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
OSCCAL = OSCCAL_WV;										//Reinstate default value
    5166:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <OSCCAL_WV>
    516a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
return;}			
    516e:	3e c0       	rjmp	.+124    	; 0x51ec <manual_cal_PCB_A_device+0x282>
	
/*************************************************/
else{I2C_master_transmit('Y');							//Error resulting from User OSCCAL is less than 1750
    5170:	89 e5       	ldi	r24, 0x59	; 89
    5172:	0e 94 01 24 	call	0x4802	; 0x4802 <I2C_master_transmit>
	
eeprom_write_byte((uint8_t*)0x3FE, OSCCAL_UV); 		//save user OSCCAL to EEPROM
    5176:	61 2f       	mov	r22, r17
    5178:	8e ef       	ldi	r24, 0xFE	; 254
    517a:	93 e0       	ldi	r25, 0x03	; 3
    517c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
eeprom_write_byte((uint8_t*)0x3FF, OSCCAL_UV); 
    5180:	61 2f       	mov	r22, r17
    5182:	8f ef       	ldi	r24, 0xFF	; 255
    5184:	93 e0       	ldi	r25, 0x03	; 3
    5186:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
if(OSCCAL_UV == 0xFF) OSCCAL = OSCCAL_DV;				//Reinstate working value
    518a:	1f 3f       	cpi	r17, 0xFF	; 255
    518c:	29 f4       	brne	.+10     	; 0x5198 <manual_cal_PCB_A_device+0x22e>
    518e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <OSCCAL_DV>
    5192:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    5196:	02 c0       	rjmp	.+4      	; 0x519c <manual_cal_PCB_A_device+0x232>
else OSCCAL = OSCCAL_UV;
    5198:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
OSCCAL_WV = OSCCAL;	
    519c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    51a0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <OSCCAL_WV>
	
TWDR = eeprom_read_byte((uint8_t*)0x3FE);				//Echo values saved to EEPROM to user
    51a4:	8e ef       	ldi	r24, 0xFE	; 254
    51a6:	93 e0       	ldi	r25, 0x03	; 3
    51a8:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    51ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
TWCR = (1 << TWINT) | (1 << TWEN);
    51b0:	84 e8       	ldi	r24, 0x84	; 132
    51b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
while (!(TWCR & (1 << TWINT)));
    51b6:	ec eb       	ldi	r30, 0xBC	; 188
    51b8:	f0 e0       	ldi	r31, 0x00	; 0
    51ba:	80 81       	ld	r24, Z
    51bc:	88 23       	and	r24, r24
    51be:	ec f7       	brge	.-6      	; 0x51ba <manual_cal_PCB_A_device+0x250>
TWDR = eeprom_read_byte((uint8_t*)0x3FF);
    51c0:	8f ef       	ldi	r24, 0xFF	; 255
    51c2:	93 e0       	ldi	r25, 0x03	; 3
    51c4:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    51c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
TWCR = (1 << TWINT) | (1 << TWEN);
    51cc:	84 e8       	ldi	r24, 0x84	; 132
    51ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
while (!(TWCR & (1 << TWINT)));
    51d2:	ec eb       	ldi	r30, 0xBC	; 188
    51d4:	f0 e0       	ldi	r31, 0x00	; 0
    51d6:	80 81       	ld	r24, Z
    51d8:	88 23       	and	r24, r24
    51da:	ec f7       	brge	.-6      	; 0x51d6 <manual_cal_PCB_A_device+0x26c>
TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);}
    51dc:	84 e9       	ldi	r24, 0x94	; 148
    51de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
TIMSK0 |= (1 << TOIE0);								//Restore multplexer interrupt
    51e2:	ee e6       	ldi	r30, 0x6E	; 110
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	80 81       	ld	r24, Z
    51e8:	81 60       	ori	r24, 0x01	; 1
    51ea:	80 83       	st	Z, r24
}
    51ec:	df 91       	pop	r29
    51ee:	cf 91       	pop	r28
    51f0:	1f 91       	pop	r17
    51f2:	0f 91       	pop	r16
    51f4:	ff 90       	pop	r15
    51f6:	ef 90       	pop	r14
    51f8:	df 90       	pop	r13
    51fa:	cf 90       	pop	r12
    51fc:	08 95       	ret

000051fe <main>:
	/****Watchdog initiated for mode F only (user clock/stop watch with
	external 10mS crystal interrupt).*********/

	/***********Brown-out:  This is set (using config bits only) for 2.9V*************/

	MCUSR &= (~(1 << PORF));
    51fe:	84 b7       	in	r24, 0x34	; 52
    5200:	8e 7f       	andi	r24, 0xFE	; 254
    5202:	84 bf       	out	0x34, r24	; 52

	ADMUX |= (1 << REFS0);								//select internal ADC ref and remove external supply on AREF pin
    5204:	ec e7       	ldi	r30, 0x7C	; 124
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	80 81       	ld	r24, Z
    520a:	80 64       	ori	r24, 0x40	; 64
    520c:	80 83       	st	Z, r24
	setup_watchdog;
    520e:	a8 95       	wdr
    5210:	84 b7       	in	r24, 0x34	; 52
    5212:	87 7f       	andi	r24, 0xF7	; 247
    5214:	84 bf       	out	0x34, r24	; 52
    5216:	e0 e6       	ldi	r30, 0x60	; 96
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	80 81       	ld	r24, Z
    521c:	88 61       	ori	r24, 0x18	; 24
    521e:	80 83       	st	Z, r24
    5220:	10 82       	st	Z, r1
	initialise_IO;										//Ensures that all IO is initially set to WPU
    5222:	85 b7       	in	r24, 0x35	; 53
    5224:	8f 7e       	andi	r24, 0xEF	; 239
    5226:	85 bf       	out	0x35, r24	; 53
    5228:	14 b8       	out	0x04, r1	; 4
    522a:	17 b8       	out	0x07, r1	; 7
    522c:	1a b8       	out	0x0a, r1	; 10
    522e:	8f ef       	ldi	r24, 0xFF	; 255
    5230:	85 b9       	out	0x05, r24	; 5
    5232:	88 b9       	out	0x08, r24	; 8
    5234:	8b b9       	out	0x0b, r24	; 11
	set_digit_drivers;
    5236:	84 b1       	in	r24, 0x04	; 4
    5238:	8f 63       	ori	r24, 0x3F	; 63
    523a:	84 b9       	out	0x04, r24	; 4
    523c:	87 b1       	in	r24, 0x07	; 7
    523e:	87 60       	ori	r24, 0x07	; 7
    5240:	87 b9       	out	0x07, r24	; 7
    5242:	8a b1       	in	r24, 0x0a	; 10
    5244:	8c 6f       	ori	r24, 0xFC	; 252
    5246:	8a b9       	out	0x0a, r24	; 10
	clear_digits;
    5248:	85 b1       	in	r24, 0x05	; 5
    524a:	82 7c       	andi	r24, 0xC2	; 194
    524c:	85 b9       	out	0x05, r24	; 5
    524e:	88 b1       	in	r24, 0x08	; 8
    5250:	88 7f       	andi	r24, 0xF8	; 248
    5252:	88 b9       	out	0x08, r24	; 8
	clear_display;
    5254:	29 9a       	sbi	0x05, 1	; 5
    5256:	8b b1       	in	r24, 0x0b	; 11
    5258:	8c 6f       	ori	r24, 0xFC	; 252
    525a:	8b b9       	out	0x0b, r24	; 11

	TWBR = 32;											//gives 100KHz I2C clock for TWSR
    525c:	80 e2       	ldi	r24, 0x20	; 32
    525e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	ASSR = (1 << AS2); 								//initialise T2 for crystal
    5262:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__DATA_REGION_ORIGIN__+0x56>
	timer_2_counter=0;									//Initialsise timer_2_counter to zero
    5266:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <timer_2_counter>
	sei();
    526a:	78 94       	sei

	if(!(eeprom_read_byte((uint8_t*)0x3F4)))			//If PCB_A has just been programmed with I2C_V16_CC using the project programmer
    526c:	84 ef       	ldi	r24, 0xF4	; 244
    526e:	93 e0       	ldi	r25, 0x03	; 3
    5270:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    5274:	81 11       	cpse	r24, r1
    5276:	25 c0       	rjmp	.+74     	; 0x52c2 <main+0xc4>
	{eeprom_write_byte((uint8_t*)0x3F4, 0xFF);			//the UNO device is automatically reset so the the project programer can be removed
    5278:	6f ef       	ldi	r22, 0xFF	; 255
    527a:	84 ef       	ldi	r24, 0xF4	; 244
    527c:	93 e0       	ldi	r25, 0x03	; 3
    527e:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>

		if(!(eeprom_read_byte((uint8_t*)0x3F1)))			//Only auto-cal after programming flash not eeprom
    5282:	81 ef       	ldi	r24, 0xF1	; 241
    5284:	93 e0       	ldi	r25, 0x03	; 3
    5286:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    528a:	81 11       	cpse	r24, r1
    528c:	07 c0       	rjmp	.+14     	; 0x529c <main+0x9e>
		{eeprom_write_byte((uint8_t*)0x3F1, 0xFF);
    528e:	6f ef       	ldi	r22, 0xFF	; 255
    5290:	81 ef       	ldi	r24, 0xF1	; 241
    5292:	93 e0       	ldi	r25, 0x03	; 3
    5294:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
		Auto_cal();}
    5298:	0e 94 9d 24 	call	0x493a	; 0x493a <Auto_cal>

		Timer_T1_sub(T1_delay_100ms);						//EXTRA LINE NEEDED to complete USART transmission
    529c:	62 ef       	ldi	r22, 0xF2	; 242
    529e:	7c ef       	ldi	r23, 0xFC	; 252
    52a0:	85 e0       	ldi	r24, 0x05	; 5
    52a2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Timer_T1_sub>
		Reset_UNO_low;
    52a6:	43 98       	cbi	0x08, 3	; 8
    52a8:	3b 9a       	sbi	0x07, 3	; 7
		Timer_T1_sub(T1_delay_10ms);						//After its release from reset the UNO selects its boot loader
    52aa:	6c e3       	ldi	r22, 0x3C	; 60
    52ac:	76 ef       	ldi	r23, 0xF6	; 246
    52ae:	83 e0       	ldi	r24, 0x03	; 3
    52b0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Timer_T1_sub>
		Reset_UNO_high;
    52b4:	3b 98       	cbi	0x07, 3	; 7
    52b6:	43 9a       	sbi	0x08, 3	; 8
	Timer_T1_sub(T1_delay_125ms);}						//Delay required due to UNO Start Up Time of 65mS
    52b8:	61 e3       	ldi	r22, 0x31	; 49
    52ba:	7c ef       	ldi	r23, 0xFC	; 252
    52bc:	85 e0       	ldi	r24, 0x05	; 5
    52be:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Timer_T1_sub>

	OSCCAL_DV = OSCCAL;									//Save default value of OSCCAL
    52c2:	e6 e6       	ldi	r30, 0x66	; 102
    52c4:	f0 e0       	ldi	r31, 0x00	; 0
    52c6:	80 81       	ld	r24, Z
    52c8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <OSCCAL_DV>
	cal_PCB_A_328;										//Select User value of OSCCAL if one exists
    52cc:	60 81       	ld	r22, Z
    52ce:	8d ef       	ldi	r24, 0xFD	; 253
    52d0:	93 e0       	ldi	r25, 0x03	; 3
    52d2:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    52d6:	8e ef       	ldi	r24, 0xFE	; 254
    52d8:	93 e0       	ldi	r25, 0x03	; 3
    52da:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    52de:	c8 2f       	mov	r28, r24
    52e0:	80 ef       	ldi	r24, 0xF0	; 240
    52e2:	8c 0f       	add	r24, r28
    52e4:	80 3e       	cpi	r24, 0xE0	; 224
    52e6:	40 f4       	brcc	.+16     	; 0x52f8 <main+0xfa>
    52e8:	8f ef       	ldi	r24, 0xFF	; 255
    52ea:	93 e0       	ldi	r25, 0x03	; 3
    52ec:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    52f0:	c8 13       	cpse	r28, r24
    52f2:	02 c0       	rjmp	.+4      	; 0x52f8 <main+0xfa>
    52f4:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
	OSCCAL_WV = OSCCAL;
    52f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    52fc:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <OSCCAL_WV>

	Initialise_dislay_brightness;
    5300:	8b ef       	ldi	r24, 0xFB	; 251
    5302:	93 e0       	ldi	r25, 0x03	; 3
    5304:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    5308:	8d 5f       	subi	r24, 0xFD	; 253
    530a:	83 30       	cpi	r24, 0x03	; 3
    530c:	28 f0       	brcs	.+10     	; 0x5318 <main+0x11a>
    530e:	6d ef       	ldi	r22, 0xFD	; 253
    5310:	8b ef       	ldi	r24, 0xFB	; 251
    5312:	93 e0       	ldi	r25, 0x03	; 3
    5314:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    5318:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>
	initialise_Arithmetic_variables;
    531c:	e3 e8       	ldi	r30, 0x83	; 131
    531e:	f2 e0       	ldi	r31, 0x02	; 2
    5320:	10 82       	st	Z, r1
    5322:	11 82       	std	Z+1, r1	; 0x01
    5324:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <Op>
    5328:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <accumlator+0x1>
    532c:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <accumlator>
    5330:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <RN+0x1>
    5334:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <RN>
    5338:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <keypres_counter_old>
    533c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <overflow>
    5340:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <RHSofDP>
    5344:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <RHSofDP+0x1>
    5348:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <RHSofDP+0x2>
    534c:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <RHSofDP+0x3>
    5350:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <expnt_result>
	clock_flag=0;
    5354:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clock_flag>
	Ten_mS_tick_counter = 0;
    5358:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <Ten_mS_tick_counter>


	/******************************Start multiplexer******************************/
	T0_interupt_cnt = 0;
    535c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>
	TIMSK0 |= (1 << TOIE0);
    5360:	ee e6       	ldi	r30, 0x6E	; 110
    5362:	f0 e0       	ldi	r31, 0x00	; 0
    5364:	80 81       	ld	r24, Z
    5366:	81 60       	ori	r24, 0x01	; 1
    5368:	80 83       	st	Z, r24
	switch(eeprom_read_byte((uint8_t*)0x3FB)){
    536a:	8b ef       	ldi	r24, 0xFB	; 251
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <eeprom_read_byte>
    5372:	8e 3f       	cpi	r24, 0xFE	; 254
    5374:	41 f0       	breq	.+16     	; 0x5386 <main+0x188>
    5376:	18 f4       	brcc	.+6      	; 0x537e <main+0x180>
    5378:	8d 3f       	cpi	r24, 0xFD	; 253
    537a:	51 f0       	breq	.+20     	; 0x5390 <main+0x192>
    537c:	1c c0       	rjmp	.+56     	; 0x53b6 <main+0x1b8>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    537e:	16 bc       	out	0x26, r1	; 38
TCCR0B = Counter_speed;}
    5380:	83 e0       	ldi	r24, 0x03	; 3
    5382:	85 bd       	out	0x25, r24	; 37
    5384:	09 c0       	rjmp	.+18     	; 0x5398 <main+0x19a>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    5386:	80 ec       	ldi	r24, 0xC0	; 192
    5388:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    538a:	83 e0       	ldi	r24, 0x03	; 3
    538c:	85 bd       	out	0x25, r24	; 37
    538e:	04 c0       	rjmp	.+8      	; 0x5398 <main+0x19a>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    5390:	80 ef       	ldi	r24, 0xF0	; 240
    5392:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    5394:	83 e0       	ldi	r24, 0x03	; 3
    5396:	85 bd       	out	0x25, r24	; 37
		while((mode == 'F') || (mode == 'K'));				//Multiplexer continues to work, otherwise requires reset to escape.

		
		/********Code parks here following WDT, POR and Brown-out***************/
		while(1){
			TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);		//send a start condition  (this identical to a "repeated start")
    5398:	cc eb       	ldi	r28, 0xBC	; 188
    539a:	d0 e0       	ldi	r29, 0x00	; 0
			while (!(TWCR & (1 << TWINT)));					//Wait for TWINT flag
			TWDR = 0x03;										//Address of slave (master read operation)  SLA + R
    539c:	0b eb       	ldi	r16, 0xBB	; 187
    539e:	10 e0       	ldi	r17, 0x00	; 0
    53a0:	0f 2e       	mov	r0, r31
    53a2:	f3 e0       	ldi	r31, 0x03	; 3
    53a4:	4f 2e       	mov	r4, r31
    53a6:	f0 2d       	mov	r31, r0
    53a8:	54 2c       	mov	r5, r4
			TWCR = (1 << TWINT) | (1 << TWEN);					//Clear TWINT bit to start transmission of address
			while (!(TWCR & (1 << TWINT)));					//Wait for TWINT flag
			if (TWSR == 0x40)break;								//SLA + R successfully transmitted ACK recveived
    53aa:	0f 2e       	mov	r0, r31
    53ac:	f9 eb       	ldi	r31, 0xB9	; 185
    53ae:	ef 2e       	mov	r14, r31
    53b0:	f1 2c       	mov	r15, r1
    53b2:	f0 2d       	mov	r31, r0
    53b4:	09 c0       	rjmp	.+18     	; 0x53c8 <main+0x1ca>
	TIMSK0 |= (1 << TOIE0);
	switch(eeprom_read_byte((uint8_t*)0x3FB)){
		case 0xFF: timer_T0_sub_with_interrupt(T0_delay_2ms); break;			//High intensity: Each of the 8 digits is active for 2mS in 16ms
		case 0xFE: timer_T0_sub_with_interrupt(T0_delay_500us); break;			//Normal intensity:  Each digit is refreshed every 16mS but only for 500uS
		case 0xFD: timer_T0_sub_with_interrupt(T0_delay_125us); break;			//Low intensity: Each digit is refreshed for 125uS every 16mS
		default: 	eeprom_write_byte((uint8_t*)(0x3FB), 0xFE);				//BUG Extra line added post publication
    53b6:	6e ef       	ldi	r22, 0xFE	; 254
    53b8:	8b ef       	ldi	r24, 0xFB	; 251
    53ba:	93 e0       	ldi	r25, 0x03	; 3
    53bc:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    53c0:	16 bc       	out	0x26, r1	; 38
TCCR0B = Counter_speed;}
    53c2:	83 e0       	ldi	r24, 0x03	; 3
    53c4:	85 bd       	out	0x25, r24	; 37
    53c6:	e8 cf       	rjmp	.-48     	; 0x5398 <main+0x19a>
	timer_T0_sub_with_interrupt(T0_delay_2ms); break;}

	
	while(1){

		while((mode == 'F') || (mode == 'K'));				//Multiplexer continues to work, otherwise requires reset to escape.
    53c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    53cc:	86 34       	cpi	r24, 0x46	; 70
    53ce:	e1 f3       	breq	.-8      	; 0x53c8 <main+0x1ca>
    53d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    53d4:	8b 34       	cpi	r24, 0x4B	; 75
    53d6:	c1 f3       	breq	.-16     	; 0x53c8 <main+0x1ca>
		/********Code parks here following WDT, POR and Brown-out***************/
		while(1){
			TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);		//send a start condition  (this identical to a "repeated start")
			while (!(TWCR & (1 << TWINT)));					//Wait for TWINT flag
			TWDR = 0x03;										//Address of slave (master read operation)  SLA + R
			TWCR = (1 << TWINT) | (1 << TWEN);					//Clear TWINT bit to start transmission of address
    53d8:	34 e8       	ldi	r19, 0x84	; 132
		while((mode == 'F') || (mode == 'K'));				//Multiplexer continues to work, otherwise requires reset to escape.

		
		/********Code parks here following WDT, POR and Brown-out***************/
		while(1){
			TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);		//send a start condition  (this identical to a "repeated start")
    53da:	24 ea       	ldi	r18, 0xA4	; 164
    53dc:	28 83       	st	Y, r18
			while (!(TWCR & (1 << TWINT)));					//Wait for TWINT flag
    53de:	88 81       	ld	r24, Y
    53e0:	88 23       	and	r24, r24
    53e2:	ec f7       	brge	.-6      	; 0x53de <main+0x1e0>
			TWDR = 0x03;										//Address of slave (master read operation)  SLA + R
    53e4:	d8 01       	movw	r26, r16
    53e6:	5c 92       	st	X, r5
			TWCR = (1 << TWINT) | (1 << TWEN);					//Clear TWINT bit to start transmission of address
    53e8:	38 83       	st	Y, r19
			while (!(TWCR & (1 << TWINT)));					//Wait for TWINT flag
    53ea:	88 81       	ld	r24, Y
    53ec:	88 23       	and	r24, r24
    53ee:	ec f7       	brge	.-6      	; 0x53ea <main+0x1ec>
			if (TWSR == 0x40)break;								//SLA + R successfully transmitted ACK recveived
    53f0:	f7 01       	movw	r30, r14
    53f2:	80 81       	ld	r24, Z
    53f4:	80 34       	cpi	r24, 0x40	; 64
    53f6:	99 f0       	breq	.+38     	; 0x541e <main+0x220>
			if(clock_flag==1){refresh_clock_display;}}
    53f8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <clock_flag>
    53fc:	81 30       	cpi	r24, 0x01	; 1
    53fe:	71 f7       	brne	.-36     	; 0x53dc <main+0x1de>
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	fc 01       	movw	r30, r24
    5406:	e8 53       	subi	r30, 0x38	; 56
    5408:	fe 4f       	sbci	r31, 0xFE	; 254
    540a:	40 81       	ld	r20, Z
    540c:	fc 01       	movw	r30, r24
    540e:	e1 5f       	subi	r30, 0xF1	; 241
    5410:	fd 4f       	sbci	r31, 0xFD	; 253
    5412:	40 83       	st	Z, r20
    5414:	01 96       	adiw	r24, 0x01	; 1
    5416:	88 30       	cpi	r24, 0x08	; 8
    5418:	91 05       	cpc	r25, r1
    541a:	a1 f7       	brne	.-24     	; 0x5404 <main+0x206>
    541c:	df cf       	rjmp	.-66     	; 0x53dc <main+0x1de>

			clock_flag=0;
    541e:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <clock_flag>
			payload_size = I2C_master_receive(1);
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    5428:	c8 2e       	mov	r12, r24
			if(payload_size)mode = I2C_master_receive(1);
    542a:	88 23       	and	r24, r24
    542c:	51 f0       	breq	.+20     	; 0x5442 <main+0x244>
    542e:	81 e0       	ldi	r24, 0x01	; 1
    5430:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    5434:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
			else mode = I2C_master_receive(0);

			if (mode != 8) display_mask=0;						//dissable flashing digits
    5438:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    543c:	88 30       	cpi	r24, 0x08	; 8
    543e:	59 f4       	brne	.+22     	; 0x5456 <main+0x258>
    5440:	0f c0       	rjmp	.+30     	; 0x5460 <main+0x262>
			if(clock_flag==1){refresh_clock_display;}}

			clock_flag=0;
			payload_size = I2C_master_receive(1);
			if(payload_size)mode = I2C_master_receive(1);
			else mode = I2C_master_receive(0);
    5442:	80 e0       	ldi	r24, 0x00	; 0
    5444:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    5448:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>

			if (mode != 8) display_mask=0;						//dissable flashing digits
    544c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    5450:	88 30       	cpi	r24, 0x08	; 8
    5452:	09 f4       	brne	.+2      	; 0x5456 <main+0x258>
    5454:	1f c3       	rjmp	.+1598   	; 0x5a94 <main+0x896>
    5456:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <display_mask>

			if(payload_size){									//payload is zero for mode 'F'
    545a:	cc 20       	and	r12, r12
    545c:	09 f4       	brne	.+2      	; 0x5460 <main+0x262>
    545e:	1a c3       	rjmp	.+1588   	; 0x5a94 <main+0x896>

				for (int m = 0; m < payload_size; m++){			//payload_size = Num digits to be downloaded
    5460:	d1 2c       	mov	r13, r1
    5462:	1c 14       	cp	r1, r12
    5464:	1d 04       	cpc	r1, r13
    5466:	1c f5       	brge	.+70     	; 0x54ae <main+0x2b0>
    5468:	0f 2e       	mov	r0, r31
    546a:	f8 ed       	ldi	r31, 0xD8	; 216
    546c:	6f 2e       	mov	r6, r31
    546e:	f1 e0       	ldi	r31, 0x01	; 1
    5470:	7f 2e       	mov	r7, r31
    5472:	f0 2d       	mov	r31, r0
    5474:	81 2c       	mov	r8, r1
    5476:	91 2c       	mov	r9, r1
					if (m == (payload_size-1))
    5478:	56 01       	movw	r10, r12
    547a:	f1 e0       	ldi	r31, 0x01	; 1
    547c:	af 1a       	sub	r10, r31
    547e:	b1 08       	sbc	r11, r1
    5480:	a8 14       	cp	r10, r8
    5482:	b9 04       	cpc	r11, r9
    5484:	31 f4       	brne	.+12     	; 0x5492 <main+0x294>
					I2C_data[m] = I2C_master_receive(0);
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    548c:	d3 01       	movw	r26, r6
    548e:	8c 93       	st	X, r24
    5490:	05 c0       	rjmp	.+10     	; 0x549c <main+0x29e>
				else I2C_data[m] = I2C_master_receive(1);}
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    5498:	f3 01       	movw	r30, r6
    549a:	80 83       	st	Z, r24

			if (mode != 8) display_mask=0;						//dissable flashing digits

			if(payload_size){									//payload is zero for mode 'F'

				for (int m = 0; m < payload_size; m++){			//payload_size = Num digits to be downloaded
    549c:	ff ef       	ldi	r31, 0xFF	; 255
    549e:	8f 1a       	sub	r8, r31
    54a0:	9f 0a       	sbc	r9, r31
    54a2:	8f ef       	ldi	r24, 0xFF	; 255
    54a4:	68 1a       	sub	r6, r24
    54a6:	78 0a       	sbc	r7, r24
    54a8:	8c 14       	cp	r8, r12
    54aa:	9d 04       	cpc	r9, r13
    54ac:	49 f7       	brne	.-46     	; 0x5480 <main+0x282>
					if (m == (payload_size-1))
					I2C_data[m] = I2C_master_receive(0);
				else I2C_data[m] = I2C_master_receive(1);}
			TWCR = (1 << TWINT )|(1 << TWEN )|(1 << TWSTO );}	//Send stop bit
    54ae:	84 e9       	ldi	r24, 0x94	; 148
    54b0:	88 83       	st	Y, r24

			switch(mode){
    54b2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    54b6:	89 30       	cpi	r24, 0x09	; 9
    54b8:	28 f4       	brcc	.+10     	; 0x54c4 <main+0x2c6>
    54ba:	87 30       	cpi	r24, 0x07	; 7
    54bc:	98 f4       	brcc	.+38     	; 0x54e4 <main+0x2e6>
    54be:	83 30       	cpi	r24, 0x03	; 3
    54c0:	39 f4       	brne	.+14     	; 0x54d0 <main+0x2d2>
    54c2:	10 c0       	rjmp	.+32     	; 0x54e4 <main+0x2e6>
    54c4:	89 34       	cpi	r24, 0x49	; 73
    54c6:	71 f0       	breq	.+28     	; 0x54e4 <main+0x2e6>
    54c8:	81 35       	cpi	r24, 0x51	; 81
    54ca:	61 f0       	breq	.+24     	; 0x54e4 <main+0x2e6>
    54cc:	86 34       	cpi	r24, 0x46	; 70
    54ce:	51 f0       	breq	.+20     	; 0x54e4 <main+0x2e6>

			if (mode != 8) display_mask=0;						//dissable flashing digits

			if(payload_size){									//payload is zero for mode 'F'

				for (int m = 0; m < payload_size; m++){			//payload_size = Num digits to be downloaded
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	90 e0       	ldi	r25, 0x00	; 0
			switch(mode){

				case 3:  case 8: case 7:
				case 'F': case 'I':  case 'Q': break;
				default:
				{for(int m = 0; m < 8; m++)display_buf[m] = 0;}
    54d4:	fc 01       	movw	r30, r24
    54d6:	e1 5f       	subi	r30, 0xF1	; 241
    54d8:	fd 4f       	sbci	r31, 0xFD	; 253
    54da:	10 82       	st	Z, r1
    54dc:	01 96       	adiw	r24, 0x01	; 1
    54de:	88 30       	cpi	r24, 0x08	; 8
    54e0:	91 05       	cpc	r25, r1
    54e2:	c1 f7       	brne	.-16     	; 0x54d4 <main+0x2d6>
			break;}

			switch (mode){
    54e4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <mode>
    54e8:	8e 2f       	mov	r24, r30
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	fc 01       	movw	r30, r24
    54ee:	31 97       	sbiw	r30, 0x01	; 1
    54f0:	e8 35       	cpi	r30, 0x58	; 88
    54f2:	f1 05       	cpc	r31, r1
    54f4:	08 f0       	brcs	.+2      	; 0x54f8 <main+0x2fa>
    54f6:	68 cf       	rjmp	.-304    	; 0x53c8 <main+0x1ca>
    54f8:	e4 5c       	subi	r30, 0xC4	; 196
    54fa:	fe 4f       	sbci	r31, 0xFE	; 254
    54fc:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
				
				case 'G': I2C_Tx_BWops; break;						//Used to illustarte bit wise logic operations

				case 'H': Message_from_the_OS();break;				//Messages compiled by user and saved to pcb_A Atmrga 328 EEPROM

				case 'I': I2C_displayToLong;break;					//Converts display to long number and transmits it to the UNO device
    5500:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <display_buf+0x7>
    5504:	88 23       	and	r24, r24
    5506:	09 f4       	brne	.+2      	; 0x550a <main+0x30c>
    5508:	10 c1       	rjmp	.+544    	; 0x572a <main+0x52c>
    550a:	df c2       	rjmp	.+1470   	; 0x5aca <main+0x8cc>
				{for(int m = 0; m < 8; m++)display_buf[m] = 0;}
			break;}

			switch (mode){

				case 1:	I2C_Tx_2_integers; break;					//Uses the 32 vertical segments to display two binary numbers
    550c:	a8 ed       	ldi	r26, 0xD8	; 216
    550e:	b1 e0       	ldi	r27, 0x01	; 1
    5510:	8c 91       	ld	r24, X
    5512:	ef e0       	ldi	r30, 0x0F	; 15
    5514:	f2 e0       	ldi	r31, 0x02	; 2
    5516:	80 83       	st	Z, r24
    5518:	11 96       	adiw	r26, 0x01	; 1
    551a:	8c 91       	ld	r24, X
    551c:	11 97       	sbiw	r26, 0x01	; 1
    551e:	81 83       	std	Z+1, r24	; 0x01
    5520:	12 96       	adiw	r26, 0x02	; 2
    5522:	8c 91       	ld	r24, X
    5524:	12 97       	sbiw	r26, 0x02	; 2
    5526:	82 83       	std	Z+2, r24	; 0x02
    5528:	13 96       	adiw	r26, 0x03	; 3
    552a:	8c 91       	ld	r24, X
    552c:	83 83       	std	Z+3, r24	; 0x03
    552e:	14 82       	std	Z+4, r1	; 0x04
    5530:	15 82       	std	Z+5, r1	; 0x05
    5532:	16 82       	std	Z+6, r1	; 0x06
    5534:	17 82       	std	Z+7, r1	; 0x07
    5536:	48 cf       	rjmp	.-368    	; 0x53c8 <main+0x1ca>

				case 2:
				case 3: I2C_Tx_any_segment;	break;					//Illuminates/clears any of the 56 segments
    5538:	e8 ed       	ldi	r30, 0xD8	; 216
    553a:	f1 e0       	ldi	r31, 0x01	; 1
    553c:	41 81       	ldd	r20, Z+1	; 0x01
    553e:	80 81       	ld	r24, Z
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	fc 01       	movw	r30, r24
    5544:	e1 54       	subi	r30, 0x41	; 65
    5546:	f1 09       	sbc	r31, r1
    5548:	e7 32       	cpi	r30, 0x27	; 39
    554a:	f1 05       	cpc	r31, r1
    554c:	08 f0       	brcs	.+2      	; 0x5550 <main+0x352>
    554e:	3c cf       	rjmp	.-392    	; 0x53c8 <main+0x1ca>
    5550:	ec 56       	subi	r30, 0x6C	; 108
    5552:	fe 4f       	sbci	r31, 0xFE	; 254
    5554:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
    5558:	84 e0       	ldi	r24, 0x04	; 4
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	0b c0       	rjmp	.+22     	; 0x5574 <main+0x376>
    555e:	85 e0       	ldi	r24, 0x05	; 5
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	08 c0       	rjmp	.+16     	; 0x5574 <main+0x376>
    5564:	86 e0       	ldi	r24, 0x06	; 6
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	05 c0       	rjmp	.+10     	; 0x5574 <main+0x376>
    556a:	81 e0       	ldi	r24, 0x01	; 1
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	02 c0       	rjmp	.+4      	; 0x5574 <main+0x376>
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	48 30       	cpi	r20, 0x08	; 8
    5576:	08 f0       	brcs	.+2      	; 0x557a <main+0x37c>
    5578:	27 cf       	rjmp	.-434    	; 0x53c8 <main+0x1ca>
    557a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <mode>
    557e:	22 30       	cpi	r18, 0x02	; 2
    5580:	a9 f4       	brne	.+42     	; 0x55ac <main+0x3ae>
    5582:	25 b1       	in	r18, 0x05	; 5
    5584:	22 7c       	andi	r18, 0xC2	; 194
    5586:	25 b9       	out	0x05, r18	; 5
    5588:	28 b1       	in	r18, 0x08	; 8
    558a:	28 7f       	andi	r18, 0xF8	; 248
    558c:	28 b9       	out	0x08, r18	; 8
    558e:	29 9a       	sbi	0x05, 1	; 5
    5590:	2b b1       	in	r18, 0x0b	; 11
    5592:	2c 6f       	ori	r18, 0xFC	; 252
    5594:	2b b9       	out	0x0b, r18	; 11
    5596:	20 e0       	ldi	r18, 0x00	; 0
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	f9 01       	movw	r30, r18
    559c:	e1 5f       	subi	r30, 0xF1	; 241
    559e:	fd 4f       	sbci	r31, 0xFD	; 253
    55a0:	10 82       	st	Z, r1
    55a2:	2f 5f       	subi	r18, 0xFF	; 255
    55a4:	3f 4f       	sbci	r19, 0xFF	; 255
    55a6:	28 30       	cpi	r18, 0x08	; 8
    55a8:	31 05       	cpc	r19, r1
    55aa:	b9 f7       	brne	.-18     	; 0x559a <main+0x39c>
    55ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <mode>
    55b0:	23 30       	cpi	r18, 0x03	; 3
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <main+0x3b8>
    55b4:	09 cf       	rjmp	.-494    	; 0x53c8 <main+0x1ca>
    55b6:	fc 01       	movw	r30, r24
    55b8:	e1 5f       	subi	r30, 0xF1	; 241
    55ba:	fd 4f       	sbci	r31, 0xFD	; 253
    55bc:	20 81       	ld	r18, Z
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	04 2e       	mov	r0, r20
    55c2:	02 c0       	rjmp	.+4      	; 0x55c8 <main+0x3ca>
    55c4:	35 95       	asr	r19
    55c6:	27 95       	ror	r18
    55c8:	0a 94       	dec	r0
    55ca:	e2 f7       	brpl	.-8      	; 0x55c4 <main+0x3c6>
    55cc:	20 ff       	sbrs	r18, 0
    55ce:	0f c0       	rjmp	.+30     	; 0x55ee <main+0x3f0>
    55d0:	fc 01       	movw	r30, r24
    55d2:	e1 5f       	subi	r30, 0xF1	; 241
    55d4:	fd 4f       	sbci	r31, 0xFD	; 253
    55d6:	90 81       	ld	r25, Z
    55d8:	21 e0       	ldi	r18, 0x01	; 1
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	02 c0       	rjmp	.+4      	; 0x55e2 <main+0x3e4>
    55de:	22 0f       	add	r18, r18
    55e0:	33 1f       	adc	r19, r19
    55e2:	4a 95       	dec	r20
    55e4:	e2 f7       	brpl	.-8      	; 0x55de <main+0x3e0>
    55e6:	20 95       	com	r18
    55e8:	29 23       	and	r18, r25
    55ea:	20 83       	st	Z, r18
    55ec:	ed ce       	rjmp	.-550    	; 0x53c8 <main+0x1ca>
    55ee:	fc 01       	movw	r30, r24
    55f0:	e1 5f       	subi	r30, 0xF1	; 241
    55f2:	fd 4f       	sbci	r31, 0xFD	; 253
    55f4:	80 81       	ld	r24, Z
    55f6:	21 e0       	ldi	r18, 0x01	; 1
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	02 c0       	rjmp	.+4      	; 0x5600 <main+0x402>
    55fc:	22 0f       	add	r18, r18
    55fe:	33 1f       	adc	r19, r19
    5600:	4a 95       	dec	r20
    5602:	e2 f7       	brpl	.-8      	; 0x55fc <main+0x3fe>
    5604:	28 2b       	or	r18, r24
    5606:	20 83       	st	Z, r18
    5608:	df ce       	rjmp	.-578    	; 0x53c8 <main+0x1ca>
    560a:	e8 ed       	ldi	r30, 0xD8	; 216
    560c:	f1 e0       	ldi	r31, 0x01	; 1
				case 'F': case 'I':  case 'Q': break;
				default:
				{for(int m = 0; m < 8; m++)display_buf[m] = 0;}
			break;}

			switch (mode){
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	90 e0       	ldi	r25, 0x00	; 0
				case 1:	I2C_Tx_2_integers; break;					//Uses the 32 vertical segments to display two binary numbers

				case 2:
				case 3: I2C_Tx_any_segment;	break;					//Illuminates/clears any of the 56 segments
				
				case 4: I2C_Tx_8_byte_array; break;					//Display a string of 8 digits
    5612:	21 91       	ld	r18, Z+
    5614:	dc 01       	movw	r26, r24
    5616:	a1 5f       	subi	r26, 0xF1	; 241
    5618:	bd 4f       	sbci	r27, 0xFD	; 253
    561a:	2c 93       	st	X, r18
    561c:	01 96       	adiw	r24, 0x01	; 1
    561e:	88 30       	cpi	r24, 0x08	; 8
    5620:	91 05       	cpc	r25, r1
    5622:	b9 f7       	brne	.-18     	; 0x5612 <main+0x414>
    5624:	d1 ce       	rjmp	.-606    	; 0x53c8 <main+0x1ca>

				case 5:	I2C_Tx_display_char; break;					//Displays +/- char as number and binary
    5626:	e8 ed       	ldi	r30, 0xD8	; 216
    5628:	f1 e0       	ldi	r31, 0x01	; 1
    562a:	80 81       	ld	r24, Z
    562c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <output_2>
    5630:	21 81       	ldd	r18, Z+1	; 0x01
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	fc 01       	movw	r30, r24
    5638:	e1 5f       	subi	r30, 0xF1	; 241
    563a:	fd 4f       	sbci	r31, 0xFD	; 253
    563c:	10 82       	st	Z, r1
    563e:	01 96       	adiw	r24, 0x01	; 1
    5640:	88 30       	cpi	r24, 0x08	; 8
    5642:	91 05       	cpc	r25, r1
    5644:	c1 f7       	brne	.-16     	; 0x5636 <main+0x438>
    5646:	23 37       	cpi	r18, 0x73	; 115
    5648:	29 f4       	brne	.+10     	; 0x5654 <main+0x456>
    564a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
    564e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <Disp_CharS>
    5652:	ba ce       	rjmp	.-652    	; 0x53c8 <main+0x1ca>
    5654:	25 37       	cpi	r18, 0x75	; 117
    5656:	09 f0       	breq	.+2      	; 0x565a <main+0x45c>
    5658:	b7 ce       	rjmp	.-658    	; 0x53c8 <main+0x1ca>
    565a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <output_2>
    565e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <Disp_CharU>
    5662:	b2 ce       	rjmp	.-668    	; 0x53c8 <main+0x1ca>

				case 6: I2C_Tx_long;break;							//Displays 8 digit number
    5664:	e8 ed       	ldi	r30, 0xD8	; 216
    5666:	f1 e0       	ldi	r31, 0x01	; 1
    5668:	60 81       	ld	r22, Z
    566a:	86 2f       	mov	r24, r22
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	a0 e0       	ldi	r26, 0x00	; 0
    5670:	b0 e0       	ldi	r27, 0x00	; 0
    5672:	ba 2f       	mov	r27, r26
    5674:	a9 2f       	mov	r26, r25
    5676:	98 2f       	mov	r25, r24
    5678:	88 27       	eor	r24, r24
    567a:	21 81       	ldd	r18, Z+1	; 0x01
    567c:	82 0f       	add	r24, r18
    567e:	91 1d       	adc	r25, r1
    5680:	a1 1d       	adc	r26, r1
    5682:	b1 1d       	adc	r27, r1
    5684:	ba 2f       	mov	r27, r26
    5686:	a9 2f       	mov	r26, r25
    5688:	98 2f       	mov	r25, r24
    568a:	88 27       	eor	r24, r24
    568c:	22 81       	ldd	r18, Z+2	; 0x02
    568e:	82 0f       	add	r24, r18
    5690:	91 1d       	adc	r25, r1
    5692:	a1 1d       	adc	r26, r1
    5694:	b1 1d       	adc	r27, r1
    5696:	ba 2f       	mov	r27, r26
    5698:	a9 2f       	mov	r26, r25
    569a:	98 2f       	mov	r25, r24
    569c:	88 27       	eor	r24, r24
    569e:	23 81       	ldd	r18, Z+3	; 0x03
    56a0:	bc 01       	movw	r22, r24
    56a2:	cd 01       	movw	r24, r26
    56a4:	62 0f       	add	r22, r18
    56a6:	71 1d       	adc	r23, r1
    56a8:	81 1d       	adc	r24, r1
    56aa:	91 1d       	adc	r25, r1
    56ac:	0e 94 a8 07 	call	0xf50	; 0xf50 <Display_num>
    56b0:	8b ce       	rjmp	.-746    	; 0x53c8 <main+0x1ca>

				case 7: I2C_Tx_Compile_tables();break;				//I2C_Tx_Initiate_tables() and I2C_Tx_Inc/dec_tables()
    56b2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <I2C_Tx_Compile_tables>
    56b6:	88 ce       	rjmp	.-752    	; 0x53c8 <main+0x1ca>

				case 8: I2C_Tx_2URNs_from_IO();break;				//Generates numbers of type 0.1234 With an exponent
    56b8:	0e 94 06 1c 	call	0x380c	; 0x380c <I2C_Tx_2URNs_from_IO>
    56bc:	85 ce       	rjmp	.-758    	; 0x53c8 <main+0x1ca>
				
				case 9: I2C_Tx_Uarithmetic_OP();break;				//Takes numbers entered using mode B and does some arithmetic
    56be:	0e 94 19 26 	call	0x4c32	; 0x4c32 <I2C_Tx_Uarithmetic_OP>
    56c2:	82 ce       	rjmp	.-764    	; 0x53c8 <main+0x1ca>

				case 'A': I2C_Tx_accumulator_1();	break;			//Implements add, subtract and clear modes
    56c4:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <I2C_Tx_accumulator_1>
    56c8:	7f ce       	rjmp	.-770    	; 0x53c8 <main+0x1ca>

				case 'B': I2C_Tx_accumulator_2();break;				//Aquires data for use by accumulator
    56ca:	0e 94 91 20 	call	0x4122	; 0x4122 <I2C_Tx_accumulator_2>
    56ce:	7c ce       	rjmp	.-776    	; 0x53c8 <main+0x1ca>

				case 'C': basic_clock(); break;						//I2C_Tx_OS_timer(AT_clock_mode, start_time): Starts the timer/clock
    56d0:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <basic_clock>
    56d4:	79 ce       	rjmp	.-782    	; 0x53c8 <main+0x1ca>

				case 'D': multi_mode_clock(); break;				//Used with subroutine I2C_Tx_Clock_command(char timer_mode, char command): Controls the timer/clock
    56d6:	0e 94 12 21 	call	0x4224	; 0x4224 <multi_mode_clock>
    56da:	76 ce       	rjmp	.-788    	; 0x53c8 <main+0x1ca>

				case 'E': stop_watch(); break;						//Used by I2C_Tx_Clock_command(one100ms_mode) and I2C_Tx_Clock_command(ten_ms_mode)
    56dc:	0e 94 2a 22 	call	0x4454	; 0x4454 <stop_watch>
    56e0:	73 ce       	rjmp	.-794    	; 0x53c8 <main+0x1ca>

				case 'F': I2C_initiate_10mS_ref;break;				//Ten_mS_interrupt for combined clock and stopwatch;
    56e2:	82 e0       	ldi	r24, 0x02	; 2
    56e4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    56e8:	e0 e7       	ldi	r30, 0x70	; 112
    56ea:	f0 e0       	ldi	r31, 0x00	; 0
    56ec:	80 81       	ld	r24, Z
    56ee:	83 60       	ori	r24, 0x03	; 3
    56f0:	80 83       	st	Z, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    56f2:	9b e0       	ldi	r25, 0x0B	; 11
    56f4:	88 e1       	ldi	r24, 0x18	; 24
    56f6:	0f b6       	in	r0, 0x3f	; 63
    56f8:	f8 94       	cli
    56fa:	a8 95       	wdr
    56fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    5700:	0f be       	out	0x3f, r0	; 63
    5702:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    5706:	60 ce       	rjmp	.-832    	; 0x53c8 <main+0x1ca>
    5708:	e8 ed       	ldi	r30, 0xD8	; 216
    570a:	f1 e0       	ldi	r31, 0x01	; 1
				case 'F': case 'I':  case 'Q': break;
				default:
				{for(int m = 0; m < 8; m++)display_buf[m] = 0;}
			break;}

			switch (mode){
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	90 e0       	ldi	r25, 0x00	; 0

				case 'E': stop_watch(); break;						//Used by I2C_Tx_Clock_command(one100ms_mode) and I2C_Tx_Clock_command(ten_ms_mode)

				case 'F': I2C_initiate_10mS_ref;break;				//Ten_mS_interrupt for combined clock and stopwatch;
				
				case 'G': I2C_Tx_BWops; break;						//Used to illustarte bit wise logic operations
    5710:	21 91       	ld	r18, Z+
    5712:	dc 01       	movw	r26, r24
    5714:	a1 5f       	subi	r26, 0xF1	; 241
    5716:	bd 4f       	sbci	r27, 0xFD	; 253
    5718:	2c 93       	st	X, r18
    571a:	01 96       	adiw	r24, 0x01	; 1
    571c:	88 30       	cpi	r24, 0x08	; 8
    571e:	91 05       	cpc	r25, r1
    5720:	b9 f7       	brne	.-18     	; 0x5710 <main+0x512>
    5722:	52 ce       	rjmp	.-860    	; 0x53c8 <main+0x1ca>

				case 'H': Message_from_the_OS();break;				//Messages compiled by user and saved to pcb_A Atmrga 328 EEPROM
    5724:	0e 94 22 27 	call	0x4e44	; 0x4e44 <Message_from_the_OS>
    5728:	4f ce       	rjmp	.-866    	; 0x53c8 <main+0x1ca>

				case 'I': I2C_displayToLong;break;					//Converts display to long number and transmits it to the UNO device
    572a:	87 e0       	ldi	r24, 0x07	; 7
    572c:	90 e0       	ldi	r25, 0x00	; 0
    572e:	01 97       	sbiw	r24, 0x01	; 1
    5730:	fc 01       	movw	r30, r24
    5732:	e1 5f       	subi	r30, 0xF1	; 241
    5734:	fd 4f       	sbci	r31, 0xFD	; 253
    5736:	20 81       	ld	r18, Z
    5738:	22 23       	and	r18, r18
    573a:	c9 f3       	breq	.-14     	; 0x572e <main+0x530>
    573c:	fc 01       	movw	r30, r24
    573e:	e1 5f       	subi	r30, 0xF1	; 241
    5740:	fd 4f       	sbci	r31, 0xFD	; 253
    5742:	20 81       	ld	r18, Z
    5744:	2d 32       	cpi	r18, 0x2D	; 45
    5746:	09 f0       	breq	.+2      	; 0x574a <main+0x54c>
    5748:	e6 c1       	rjmp	.+972    	; 0x5b16 <main+0x918>
    574a:	02 c0       	rjmp	.+4      	; 0x5750 <main+0x552>
    574c:	87 e0       	ldi	r24, 0x07	; 7
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	01 97       	sbiw	r24, 0x01	; 1
    5752:	52 f1       	brmi	.+84     	; 0x57a8 <main+0x5aa>
    5754:	2d e2       	ldi	r18, 0x2D	; 45
    5756:	01 c0       	rjmp	.+2      	; 0x575a <main+0x55c>
    5758:	2b e2       	ldi	r18, 0x2B	; 43
    575a:	40 e0       	ldi	r20, 0x00	; 0
    575c:	50 e0       	ldi	r21, 0x00	; 0
    575e:	ba 01       	movw	r22, r20
    5760:	fc 01       	movw	r30, r24
    5762:	e1 5f       	subi	r30, 0xF1	; 241
    5764:	fd 4f       	sbci	r31, 0xFD	; 253
    5766:	30 81       	ld	r19, Z
    5768:	44 0f       	add	r20, r20
    576a:	55 1f       	adc	r21, r21
    576c:	66 1f       	adc	r22, r22
    576e:	77 1f       	adc	r23, r23
    5770:	4a 01       	movw	r8, r20
    5772:	5b 01       	movw	r10, r22
    5774:	88 0c       	add	r8, r8
    5776:	99 1c       	adc	r9, r9
    5778:	aa 1c       	adc	r10, r10
    577a:	bb 1c       	adc	r11, r11
    577c:	88 0c       	add	r8, r8
    577e:	99 1c       	adc	r9, r9
    5780:	aa 1c       	adc	r10, r10
    5782:	bb 1c       	adc	r11, r11
    5784:	48 0d       	add	r20, r8
    5786:	59 1d       	adc	r21, r9
    5788:	6a 1d       	adc	r22, r10
    578a:	7b 1d       	adc	r23, r11
    578c:	43 0f       	add	r20, r19
    578e:	51 1d       	adc	r21, r1
    5790:	61 1d       	adc	r22, r1
    5792:	71 1d       	adc	r23, r1
    5794:	40 53       	subi	r20, 0x30	; 48
    5796:	51 09       	sbc	r21, r1
    5798:	61 09       	sbc	r22, r1
    579a:	71 09       	sbc	r23, r1
    579c:	01 97       	sbiw	r24, 0x01	; 1
    579e:	02 f7       	brpl	.-64     	; 0x5760 <main+0x562>
    57a0:	2d 32       	cpi	r18, 0x2D	; 45
    57a2:	09 f0       	breq	.+2      	; 0x57a6 <main+0x5a8>
    57a4:	9b c1       	rjmp	.+822    	; 0x5adc <main+0x8de>
    57a6:	03 c0       	rjmp	.+6      	; 0x57ae <main+0x5b0>
    57a8:	40 e0       	ldi	r20, 0x00	; 0
    57aa:	50 e0       	ldi	r21, 0x00	; 0
    57ac:	ba 01       	movw	r22, r20
    57ae:	70 95       	com	r23
    57b0:	60 95       	com	r22
    57b2:	50 95       	com	r21
    57b4:	41 95       	neg	r20
    57b6:	5f 4f       	sbci	r21, 0xFF	; 255
    57b8:	6f 4f       	sbci	r22, 0xFF	; 255
    57ba:	7f 4f       	sbci	r23, 0xFF	; 255
    57bc:	8f c1       	rjmp	.+798    	; 0x5adc <main+0x8de>
    57be:	38 83       	st	Y, r19
    57c0:	88 81       	ld	r24, Y
    57c2:	88 23       	and	r24, r24
    57c4:	ec f7       	brge	.-6      	; 0x57c0 <main+0x5c2>
    57c6:	d8 01       	movw	r26, r16
    57c8:	2c 93       	st	X, r18
    57ca:	98 83       	st	Y, r25
    57cc:	88 81       	ld	r24, Y
    57ce:	88 23       	and	r24, r24
    57d0:	ec f7       	brge	.-6      	; 0x57cc <main+0x5ce>
    57d2:	f7 01       	movw	r30, r14
    57d4:	80 81       	ld	r24, Z
    57d6:	88 31       	cpi	r24, 0x18	; 24
    57d8:	91 f7       	brne	.-28     	; 0x57be <main+0x5c0>
    57da:	e8 e8       	ldi	r30, 0x88	; 136
    57dc:	f2 e0       	ldi	r31, 0x02	; 2
    57de:	2c e8       	ldi	r18, 0x8C	; 140
    57e0:	32 e0       	ldi	r19, 0x02	; 2
    57e2:	94 e8       	ldi	r25, 0x84	; 132
    57e4:	81 91       	ld	r24, Z+
    57e6:	d8 01       	movw	r26, r16
    57e8:	8c 93       	st	X, r24
    57ea:	98 83       	st	Y, r25
    57ec:	88 81       	ld	r24, Y
    57ee:	88 23       	and	r24, r24
    57f0:	ec f7       	brge	.-6      	; 0x57ec <main+0x5ee>
    57f2:	e2 17       	cp	r30, r18
    57f4:	f3 07       	cpc	r31, r19
    57f6:	b1 f7       	brne	.-20     	; 0x57e4 <main+0x5e6>
    57f8:	84 e9       	ldi	r24, 0x94	; 148
    57fa:	88 83       	st	Y, r24
    57fc:	e5 cd       	rjmp	.-1078   	; 0x53c8 <main+0x1ca>

				case 'J': I2C_Tx_real_num;break;					//Displays a real number
    57fe:	e8 ed       	ldi	r30, 0xD8	; 216
    5800:	f1 e0       	ldi	r31, 0x01	; 1
    5802:	60 81       	ld	r22, Z
    5804:	86 2f       	mov	r24, r22
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	a0 e0       	ldi	r26, 0x00	; 0
    580a:	b0 e0       	ldi	r27, 0x00	; 0
    580c:	ba 2f       	mov	r27, r26
    580e:	a9 2f       	mov	r26, r25
    5810:	98 2f       	mov	r25, r24
    5812:	88 27       	eor	r24, r24
    5814:	21 81       	ldd	r18, Z+1	; 0x01
    5816:	82 0f       	add	r24, r18
    5818:	91 1d       	adc	r25, r1
    581a:	a1 1d       	adc	r26, r1
    581c:	b1 1d       	adc	r27, r1
    581e:	ba 2f       	mov	r27, r26
    5820:	a9 2f       	mov	r26, r25
    5822:	98 2f       	mov	r25, r24
    5824:	88 27       	eor	r24, r24
    5826:	22 81       	ldd	r18, Z+2	; 0x02
    5828:	82 0f       	add	r24, r18
    582a:	91 1d       	adc	r25, r1
    582c:	a1 1d       	adc	r26, r1
    582e:	b1 1d       	adc	r27, r1
    5830:	ba 2f       	mov	r27, r26
    5832:	a9 2f       	mov	r26, r25
    5834:	98 2f       	mov	r25, r24
    5836:	88 27       	eor	r24, r24
    5838:	23 81       	ldd	r18, Z+3	; 0x03
    583a:	bc 01       	movw	r22, r24
    583c:	cd 01       	movw	r24, r26
    583e:	62 0f       	add	r22, r18
    5840:	71 1d       	adc	r23, r1
    5842:	81 1d       	adc	r24, r1
    5844:	91 1d       	adc	r25, r1
    5846:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <Display_real_num>
    584a:	be cd       	rjmp	.-1156   	; 0x53c8 <main+0x1ca>

				case 'K': I2C_Tx_float_num;break;					//Scrolls scientific number accross the display
    584c:	e8 ed       	ldi	r30, 0xD8	; 216
    584e:	f1 e0       	ldi	r31, 0x01	; 1
    5850:	60 81       	ld	r22, Z
    5852:	86 2f       	mov	r24, r22
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	a0 e0       	ldi	r26, 0x00	; 0
    5858:	b0 e0       	ldi	r27, 0x00	; 0
    585a:	ba 2f       	mov	r27, r26
    585c:	a9 2f       	mov	r26, r25
    585e:	98 2f       	mov	r25, r24
    5860:	88 27       	eor	r24, r24
    5862:	21 81       	ldd	r18, Z+1	; 0x01
    5864:	82 0f       	add	r24, r18
    5866:	91 1d       	adc	r25, r1
    5868:	a1 1d       	adc	r26, r1
    586a:	b1 1d       	adc	r27, r1
    586c:	ba 2f       	mov	r27, r26
    586e:	a9 2f       	mov	r26, r25
    5870:	98 2f       	mov	r25, r24
    5872:	88 27       	eor	r24, r24
    5874:	22 81       	ldd	r18, Z+2	; 0x02
    5876:	82 0f       	add	r24, r18
    5878:	91 1d       	adc	r25, r1
    587a:	a1 1d       	adc	r26, r1
    587c:	b1 1d       	adc	r27, r1
    587e:	ba 2f       	mov	r27, r26
    5880:	a9 2f       	mov	r26, r25
    5882:	98 2f       	mov	r25, r24
    5884:	88 27       	eor	r24, r24
    5886:	23 81       	ldd	r18, Z+3	; 0x03
    5888:	bc 01       	movw	r22, r24
    588a:	cd 01       	movw	r24, r26
    588c:	62 0f       	add	r22, r18
    588e:	71 1d       	adc	r23, r1
    5890:	81 1d       	adc	r24, r1
    5892:	91 1d       	adc	r25, r1
    5894:	2e ef       	ldi	r18, 0xFE	; 254
    5896:	31 e0       	ldi	r19, 0x01	; 1
    5898:	44 81       	ldd	r20, Z+4	; 0x04
    589a:	0e 94 f7 16 	call	0x2dee	; 0x2dee <float_to_askii>
    589e:	82 e0       	ldi	r24, 0x02	; 2
    58a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    58a4:	e0 e7       	ldi	r30, 0x70	; 112
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	80 81       	ld	r24, Z
    58aa:	81 60       	ori	r24, 0x01	; 1
    58ac:	80 83       	st	Z, r24
    58ae:	8c cd       	rjmp	.-1256   	; 0x53c8 <main+0x1ca>

				case 'L': Multiplexer_demo; break;
    58b0:	6e ef       	ldi	r22, 0xFE	; 254
    58b2:	8b ef       	ldi	r24, 0xFB	; 251
    58b4:	93 e0       	ldi	r25, 0x03	; 3
    58b6:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    58ba:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <I2C_data>
    58be:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <MUX_cntl>
    58c2:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>
    58c6:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <MUX_cntl>
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	88 30       	cpi	r24, 0x08	; 8
    58ce:	91 05       	cpc	r25, r1
    58d0:	40 f5       	brcc	.+80     	; 0x5922 <main+0x724>
    58d2:	fc 01       	movw	r30, r24
    58d4:	e5 54       	subi	r30, 0x45	; 69
    58d6:	fe 4f       	sbci	r31, 0xFE	; 254
    58d8:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    58dc:	80 ec       	ldi	r24, 0xC0	; 192
    58de:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    58e0:	45 bc       	out	0x25, r4	; 37
    58e2:	06 c1       	rjmp	.+524    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    58e4:	80 e8       	ldi	r24, 0x80	; 128
    58e6:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    58e8:	45 bc       	out	0x25, r4	; 37
    58ea:	02 c1       	rjmp	.+516    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    58ec:	85 e4       	ldi	r24, 0x45	; 69
    58ee:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    58f0:	45 bc       	out	0x25, r4	; 37
    58f2:	fe c0       	rjmp	.+508    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    58f4:	16 bc       	out	0x26, r1	; 38
TCCR0B = Counter_speed;}
    58f6:	45 bc       	out	0x25, r4	; 37
    58f8:	fb c0       	rjmp	.+502    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    58fa:	82 eb       	ldi	r24, 0xB2	; 178
    58fc:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    58fe:	84 e0       	ldi	r24, 0x04	; 4
    5900:	85 bd       	out	0x25, r24	; 37
    5902:	f6 c0       	rjmp	.+492    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    5904:	82 ea       	ldi	r24, 0xA2	; 162
    5906:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    5908:	84 e0       	ldi	r24, 0x04	; 4
    590a:	85 bd       	out	0x25, r24	; 37
    590c:	f1 c0       	rjmp	.+482    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    590e:	84 e6       	ldi	r24, 0x64	; 100
    5910:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    5912:	84 e0       	ldi	r24, 0x04	; 4
    5914:	85 bd       	out	0x25, r24	; 37
    5916:	ec c0       	rjmp	.+472    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    5918:	82 ec       	ldi	r24, 0xC2	; 194
    591a:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    591c:	85 e0       	ldi	r24, 0x05	; 5
    591e:	85 bd       	out	0x25, r24	; 37
    5920:	e7 c0       	rjmp	.+462    	; 0x5af0 <main+0x8f2>



/*****************************************************************************************/
void timer_T0_sub_with_interrupt(char Counter_speed, unsigned char St_point){ 
TCNT0 = St_point;
    5922:	80 ec       	ldi	r24, 0xC0	; 192
    5924:	86 bd       	out	0x26, r24	; 38
TCCR0B = Counter_speed;}
    5926:	45 bc       	out	0x25, r4	; 37
    5928:	e3 c0       	rjmp	.+454    	; 0x5af0 <main+0x8f2>

				case 'M': cal_plot_328(); break;					//Scans 328 cal-factor fronmm 0x10 to 0xF0
    592a:	0e 94 0c 24 	call	0x4818	; 0x4818 <cal_plot_328>
    592e:	4c cd       	rjmp	.-1384   	; 0x53c8 <main+0x1ca>

				case 'N': manual_cal_PCB_A_device(); break;
    5930:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <manual_cal_PCB_A_device>
    5934:	49 cd       	rjmp	.-1390   	; 0x53c8 <main+0x1ca>

				case 'O': PCB_test; break;							//For manufacturing test: Dissables the multiplexer
    5936:	ee e6       	ldi	r30, 0x6E	; 110
    5938:	f0 e0       	ldi	r31, 0x00	; 0
    593a:	80 81       	ld	r24, Z
    593c:	8e 7f       	andi	r24, 0xFE	; 254
    593e:	80 83       	st	Z, r24
    5940:	85 b1       	in	r24, 0x05	; 5
    5942:	82 7c       	andi	r24, 0xC2	; 194
    5944:	85 b9       	out	0x05, r24	; 5
    5946:	88 b1       	in	r24, 0x08	; 8
    5948:	88 7f       	andi	r24, 0xF8	; 248
    594a:	88 b9       	out	0x08, r24	; 8
    594c:	29 9a       	sbi	0x05, 1	; 5
    594e:	8b b1       	in	r24, 0x0b	; 11
    5950:	8c 6f       	ori	r24, 0xFC	; 252
    5952:	8b b9       	out	0x0b, r24	; 11
    5954:	24 ea       	ldi	r18, 0xA4	; 164
    5956:	94 e8       	ldi	r25, 0x84	; 132
    5958:	28 83       	st	Y, r18
    595a:	88 81       	ld	r24, Y
    595c:	88 23       	and	r24, r24
    595e:	ec f7       	brge	.-6      	; 0x595a <main+0x75c>
    5960:	f8 01       	movw	r30, r16
    5962:	50 82       	st	Z, r5
    5964:	98 83       	st	Y, r25
    5966:	88 81       	ld	r24, Y
    5968:	88 23       	and	r24, r24
    596a:	ec f7       	brge	.-6      	; 0x5966 <main+0x768>
    596c:	d7 01       	movw	r26, r14
    596e:	8c 91       	ld	r24, X
    5970:	80 34       	cpi	r24, 0x40	; 64
    5972:	91 f7       	brne	.-28     	; 0x5958 <main+0x75a>
    5974:	81 e0       	ldi	r24, 0x01	; 1
    5976:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	fc 01       	movw	r30, r24
    597e:	f0 97       	sbiw	r30, 0x30	; 48
    5980:	ea 30       	cpi	r30, 0x0A	; 10
    5982:	f1 05       	cpc	r31, r1
    5984:	90 f5       	brcc	.+100    	; 0x59ea <main+0x7ec>
    5986:	ed 53       	subi	r30, 0x3D	; 61
    5988:	fe 4f       	sbci	r31, 0xFE	; 254
    598a:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
    598e:	29 98       	cbi	0x05, 1	; 5
    5990:	8b b1       	in	r24, 0x0b	; 11
    5992:	83 78       	andi	r24, 0x83	; 131
    5994:	8b b9       	out	0x0b, r24	; 11
    5996:	29 c0       	rjmp	.+82     	; 0x59ea <main+0x7ec>
    5998:	8b b1       	in	r24, 0x0b	; 11
    599a:	83 7f       	andi	r24, 0xF3	; 243
    599c:	8b b9       	out	0x0b, r24	; 11
    599e:	25 c0       	rjmp	.+74     	; 0x59ea <main+0x7ec>
    59a0:	29 98       	cbi	0x05, 1	; 5
    59a2:	8b b1       	in	r24, 0x0b	; 11
    59a4:	8b 74       	andi	r24, 0x4B	; 75
    59a6:	8b b9       	out	0x0b, r24	; 11
    59a8:	20 c0       	rjmp	.+64     	; 0x59ea <main+0x7ec>
    59aa:	29 98       	cbi	0x05, 1	; 5
    59ac:	8b b1       	in	r24, 0x0b	; 11
    59ae:	83 76       	andi	r24, 0x63	; 99
    59b0:	8b b9       	out	0x0b, r24	; 11
    59b2:	1b c0       	rjmp	.+54     	; 0x59ea <main+0x7ec>
    59b4:	8b b1       	in	r24, 0x0b	; 11
    59b6:	83 73       	andi	r24, 0x33	; 51
    59b8:	8b b9       	out	0x0b, r24	; 11
    59ba:	17 c0       	rjmp	.+46     	; 0x59ea <main+0x7ec>
    59bc:	29 98       	cbi	0x05, 1	; 5
    59be:	8b b1       	in	r24, 0x0b	; 11
    59c0:	87 72       	andi	r24, 0x27	; 39
    59c2:	8b b9       	out	0x0b, r24	; 11
    59c4:	12 c0       	rjmp	.+36     	; 0x59ea <main+0x7ec>
    59c6:	8b b1       	in	r24, 0x0b	; 11
    59c8:	87 70       	andi	r24, 0x07	; 7
    59ca:	8b b9       	out	0x0b, r24	; 11
    59cc:	0e c0       	rjmp	.+28     	; 0x59ea <main+0x7ec>
    59ce:	29 98       	cbi	0x05, 1	; 5
    59d0:	8b b1       	in	r24, 0x0b	; 11
    59d2:	83 7f       	andi	r24, 0xF3	; 243
    59d4:	8b b9       	out	0x0b, r24	; 11
    59d6:	09 c0       	rjmp	.+18     	; 0x59ea <main+0x7ec>
    59d8:	29 98       	cbi	0x05, 1	; 5
    59da:	8b b1       	in	r24, 0x0b	; 11
    59dc:	83 70       	andi	r24, 0x03	; 3
    59de:	8b b9       	out	0x0b, r24	; 11
    59e0:	04 c0       	rjmp	.+8      	; 0x59ea <main+0x7ec>
    59e2:	29 98       	cbi	0x05, 1	; 5
    59e4:	8b b1       	in	r24, 0x0b	; 11
    59e6:	83 73       	andi	r24, 0x33	; 51
    59e8:	8b b9       	out	0x0b, r24	; 11
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <I2C_master_receive>
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	fc 01       	movw	r30, r24
    59f4:	f0 97       	sbiw	r30, 0x30	; 48
    59f6:	e8 30       	cpi	r30, 0x08	; 8
    59f8:	f1 05       	cpc	r31, r1
    59fa:	98 f4       	brcc	.+38     	; 0x5a22 <main+0x824>
    59fc:	e3 53       	subi	r30, 0x33	; 51
    59fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5a00:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__tablejump2__>
    5a04:	2c 9a       	sbi	0x05, 4	; 5
    5a06:	0d c0       	rjmp	.+26     	; 0x5a22 <main+0x824>
    5a08:	2b 9a       	sbi	0x05, 3	; 5
    5a0a:	0b c0       	rjmp	.+22     	; 0x5a22 <main+0x824>
    5a0c:	2a 9a       	sbi	0x05, 2	; 5
    5a0e:	09 c0       	rjmp	.+18     	; 0x5a22 <main+0x824>
    5a10:	28 9a       	sbi	0x05, 0	; 5
    5a12:	07 c0       	rjmp	.+14     	; 0x5a22 <main+0x824>
    5a14:	42 9a       	sbi	0x08, 2	; 8
    5a16:	05 c0       	rjmp	.+10     	; 0x5a22 <main+0x824>
    5a18:	41 9a       	sbi	0x08, 1	; 8
    5a1a:	03 c0       	rjmp	.+6      	; 0x5a22 <main+0x824>
    5a1c:	40 9a       	sbi	0x08, 0	; 8
    5a1e:	01 c0       	rjmp	.+2      	; 0x5a22 <main+0x824>
    5a20:	2d 9a       	sbi	0x05, 5	; 5
    5a22:	84 e9       	ldi	r24, 0x94	; 148
    5a24:	88 83       	st	Y, r24
    5a26:	d0 cc       	rjmp	.-1632   	; 0x53c8 <main+0x1ca>

				case 'P': I2C_Rx_get_version; break;
    5a28:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <I2C_data>
    5a2c:	80 33       	cpi	r24, 0x30	; 48
    5a2e:	19 f0       	breq	.+6      	; 0x5a36 <main+0x838>
    5a30:	81 33       	cpi	r24, 0x31	; 49
    5a32:	31 f0       	breq	.+12     	; 0x5a40 <main+0x842>
    5a34:	c9 cc       	rjmp	.-1646   	; 0x53c8 <main+0x1ca>
    5a36:	83 e0       	ldi	r24, 0x03	; 3
    5a38:	91 e0       	ldi	r25, 0x01	; 1
    5a3a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <string_to_slave_I2C>
    5a3e:	c4 cc       	rjmp	.-1656   	; 0x53c8 <main+0x1ca>
    5a40:	81 e2       	ldi	r24, 0x21	; 33
    5a42:	91 e0       	ldi	r25, 0x01	; 1
    5a44:	0e 94 65 0a 	call	0x14ca	; 0x14ca <string_to_slave_I2C>
    5a48:	bf cc       	rjmp	.-1666   	; 0x53c8 <main+0x1ca>

				case 'Q': if(I2C_data[0]){I2C_Tx_LED_dimmer;}break;
    5a4a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <I2C_data>
    5a4e:	88 23       	and	r24, r24
    5a50:	09 f4       	brne	.+2      	; 0x5a54 <main+0x856>
    5a52:	ba cc       	rjmp	.-1676   	; 0x53c8 <main+0x1ca>
    5a54:	82 30       	cpi	r24, 0x02	; 2
    5a56:	51 f0       	breq	.+20     	; 0x5a6c <main+0x86e>
    5a58:	83 30       	cpi	r24, 0x03	; 3
    5a5a:	71 f0       	breq	.+28     	; 0x5a78 <main+0x87a>
    5a5c:	81 30       	cpi	r24, 0x01	; 1
    5a5e:	89 f4       	brne	.+34     	; 0x5a82 <main+0x884>
    5a60:	6d ef       	ldi	r22, 0xFD	; 253
    5a62:	8b ef       	ldi	r24, 0xFB	; 251
    5a64:	93 e0       	ldi	r25, 0x03	; 3
    5a66:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    5a6a:	0b c0       	rjmp	.+22     	; 0x5a82 <main+0x884>
    5a6c:	6e ef       	ldi	r22, 0xFE	; 254
    5a6e:	8b ef       	ldi	r24, 0xFB	; 251
    5a70:	93 e0       	ldi	r25, 0x03	; 3
    5a72:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    5a76:	05 c0       	rjmp	.+10     	; 0x5a82 <main+0x884>
    5a78:	6f ef       	ldi	r22, 0xFF	; 255
    5a7a:	8b ef       	ldi	r24, 0xFB	; 251
    5a7c:	93 e0       	ldi	r25, 0x03	; 3
    5a7e:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <eeprom_write_byte>
    5a82:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <T0_interupt_cnt>
    5a86:	a0 cc       	rjmp	.-1728   	; 0x53c8 <main+0x1ca>

				case 'R': Auto_cal(); break;
    5a88:	0e 94 9d 24 	call	0x493a	; 0x493a <Auto_cal>
    5a8c:	9d cc       	rjmp	.-1734   	; 0x53c8 <main+0x1ca>

				case 'X': cal_spot_check();break;
    5a8e:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <cal_spot_check>
    5a92:	9a cc       	rjmp	.-1740   	; 0x53c8 <main+0x1ca>
					if (m == (payload_size-1))
					I2C_data[m] = I2C_master_receive(0);
				else I2C_data[m] = I2C_master_receive(1);}
			TWCR = (1 << TWINT )|(1 << TWEN )|(1 << TWSTO );}	//Send stop bit

			switch(mode){
    5a94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
    5a98:	89 30       	cpi	r24, 0x09	; 9
    5a9a:	38 f4       	brcc	.+14     	; 0x5aaa <main+0x8ac>
    5a9c:	87 30       	cpi	r24, 0x07	; 7
    5a9e:	08 f0       	brcs	.+2      	; 0x5aa2 <main+0x8a4>
    5aa0:	21 cd       	rjmp	.-1470   	; 0x54e4 <main+0x2e6>
    5aa2:	83 30       	cpi	r24, 0x03	; 3
    5aa4:	09 f0       	breq	.+2      	; 0x5aa8 <main+0x8aa>
    5aa6:	14 cd       	rjmp	.-1496   	; 0x54d0 <main+0x2d2>
    5aa8:	1d cd       	rjmp	.-1478   	; 0x54e4 <main+0x2e6>
    5aaa:	89 34       	cpi	r24, 0x49	; 73
    5aac:	09 f4       	brne	.+2      	; 0x5ab0 <main+0x8b2>
    5aae:	1a cd       	rjmp	.-1484   	; 0x54e4 <main+0x2e6>
    5ab0:	81 35       	cpi	r24, 0x51	; 81
    5ab2:	09 f4       	brne	.+2      	; 0x5ab6 <main+0x8b8>
    5ab4:	17 cd       	rjmp	.-1490   	; 0x54e4 <main+0x2e6>
    5ab6:	86 34       	cpi	r24, 0x46	; 70
    5ab8:	09 f0       	breq	.+2      	; 0x5abc <main+0x8be>
    5aba:	0a cd       	rjmp	.-1516   	; 0x54d0 <main+0x2d2>
    5abc:	13 cd       	rjmp	.-1498   	; 0x54e4 <main+0x2e6>
			switch (mode){

				case 1:	I2C_Tx_2_integers; break;					//Uses the 32 vertical segments to display two binary numbers

				case 2:
				case 3: I2C_Tx_any_segment;	break;					//Illuminates/clears any of the 56 segments
    5abe:	83 e0       	ldi	r24, 0x03	; 3
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	58 cd       	rjmp	.-1360   	; 0x5574 <main+0x376>
    5ac4:	82 e0       	ldi	r24, 0x02	; 2
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	55 cd       	rjmp	.-1366   	; 0x5574 <main+0x376>
				
				case 'G': I2C_Tx_BWops; break;						//Used to illustarte bit wise logic operations

				case 'H': Message_from_the_OS();break;				//Messages compiled by user and saved to pcb_A Atmrga 328 EEPROM

				case 'I': I2C_displayToLong;break;					//Converts display to long number and transmits it to the UNO device
    5aca:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <display_buf+0x7>
    5ace:	8d 32       	cpi	r24, 0x2D	; 45
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <main+0x8d6>
    5ad2:	3c ce       	rjmp	.-904    	; 0x574c <main+0x54e>
    5ad4:	87 e0       	ldi	r24, 0x07	; 7
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	2b e2       	ldi	r18, 0x2B	; 43
    5ada:	3f ce       	rjmp	.-898    	; 0x575a <main+0x55c>
    5adc:	e8 e8       	ldi	r30, 0x88	; 136
    5ade:	f2 e0       	ldi	r31, 0x02	; 2
    5ae0:	43 83       	std	Z+3, r20	; 0x03
    5ae2:	52 83       	std	Z+2, r21	; 0x02
    5ae4:	61 83       	std	Z+1, r22	; 0x01
    5ae6:	70 83       	st	Z, r23
    5ae8:	34 ea       	ldi	r19, 0xA4	; 164
    5aea:	22 e0       	ldi	r18, 0x02	; 2
    5aec:	94 e8       	ldi	r25, 0x84	; 132
    5aee:	67 ce       	rjmp	.-818    	; 0x57be <main+0x5c0>

				case 'J': I2C_Tx_real_num;break;					//Displays a real number

				case 'K': I2C_Tx_float_num;break;					//Scrolls scientific number accross the display

				case 'L': Multiplexer_demo; break;
    5af0:	ef e0       	ldi	r30, 0x0F	; 15
    5af2:	f2 e0       	ldi	r31, 0x02	; 2
    5af4:	80 e3       	ldi	r24, 0x30	; 48
    5af6:	80 83       	st	Z, r24
    5af8:	81 e3       	ldi	r24, 0x31	; 49
    5afa:	81 83       	std	Z+1, r24	; 0x01
    5afc:	82 e3       	ldi	r24, 0x32	; 50
    5afe:	82 83       	std	Z+2, r24	; 0x02
    5b00:	83 e3       	ldi	r24, 0x33	; 51
    5b02:	83 83       	std	Z+3, r24	; 0x03
    5b04:	84 e3       	ldi	r24, 0x34	; 52
    5b06:	84 83       	std	Z+4, r24	; 0x04
    5b08:	85 e3       	ldi	r24, 0x35	; 53
    5b0a:	85 83       	std	Z+5, r24	; 0x05
    5b0c:	86 e3       	ldi	r24, 0x36	; 54
    5b0e:	86 83       	std	Z+6, r24	; 0x06
    5b10:	87 e3       	ldi	r24, 0x37	; 55
    5b12:	87 83       	std	Z+7, r24	; 0x07
    5b14:	59 cc       	rjmp	.-1870   	; 0x53c8 <main+0x1ca>
				
				case 'G': I2C_Tx_BWops; break;						//Used to illustarte bit wise logic operations

				case 'H': Message_from_the_OS();break;				//Messages compiled by user and saved to pcb_A Atmrga 328 EEPROM

				case 'I': I2C_displayToLong;break;					//Converts display to long number and transmits it to the UNO device
    5b16:	99 23       	and	r25, r25
    5b18:	0c f0       	brlt	.+2      	; 0x5b1c <main+0x91e>
    5b1a:	1e ce       	rjmp	.-964    	; 0x5758 <main+0x55a>
    5b1c:	40 e0       	ldi	r20, 0x00	; 0
    5b1e:	50 e0       	ldi	r21, 0x00	; 0
    5b20:	ba 01       	movw	r22, r20
    5b22:	dc cf       	rjmp	.-72     	; 0x5adc <main+0x8de>

00005b24 <__udivmodqi4>:
    5b24:	99 1b       	sub	r25, r25
    5b26:	79 e0       	ldi	r23, 0x09	; 9
    5b28:	04 c0       	rjmp	.+8      	; 0x5b32 <__udivmodqi4_ep>

00005b2a <__udivmodqi4_loop>:
    5b2a:	99 1f       	adc	r25, r25
    5b2c:	96 17       	cp	r25, r22
    5b2e:	08 f0       	brcs	.+2      	; 0x5b32 <__udivmodqi4_ep>
    5b30:	96 1b       	sub	r25, r22

00005b32 <__udivmodqi4_ep>:
    5b32:	88 1f       	adc	r24, r24
    5b34:	7a 95       	dec	r23
    5b36:	c9 f7       	brne	.-14     	; 0x5b2a <__udivmodqi4_loop>
    5b38:	80 95       	com	r24
    5b3a:	08 95       	ret

00005b3c <__divmodhi4>:
    5b3c:	97 fb       	bst	r25, 7
    5b3e:	07 2e       	mov	r0, r23
    5b40:	16 f4       	brtc	.+4      	; 0x5b46 <__divmodhi4+0xa>
    5b42:	00 94       	com	r0
    5b44:	07 d0       	rcall	.+14     	; 0x5b54 <__divmodhi4_neg1>
    5b46:	77 fd       	sbrc	r23, 7
    5b48:	09 d0       	rcall	.+18     	; 0x5b5c <__divmodhi4_neg2>
    5b4a:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <__udivmodhi4>
    5b4e:	07 fc       	sbrc	r0, 7
    5b50:	05 d0       	rcall	.+10     	; 0x5b5c <__divmodhi4_neg2>
    5b52:	3e f4       	brtc	.+14     	; 0x5b62 <__divmodhi4_exit>

00005b54 <__divmodhi4_neg1>:
    5b54:	90 95       	com	r25
    5b56:	81 95       	neg	r24
    5b58:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5a:	08 95       	ret

00005b5c <__divmodhi4_neg2>:
    5b5c:	70 95       	com	r23
    5b5e:	61 95       	neg	r22
    5b60:	7f 4f       	sbci	r23, 0xFF	; 255

00005b62 <__divmodhi4_exit>:
    5b62:	08 95       	ret

00005b64 <__udivmodsi4>:
    5b64:	a1 e2       	ldi	r26, 0x21	; 33
    5b66:	1a 2e       	mov	r1, r26
    5b68:	aa 1b       	sub	r26, r26
    5b6a:	bb 1b       	sub	r27, r27
    5b6c:	fd 01       	movw	r30, r26
    5b6e:	0d c0       	rjmp	.+26     	; 0x5b8a <__udivmodsi4_ep>

00005b70 <__udivmodsi4_loop>:
    5b70:	aa 1f       	adc	r26, r26
    5b72:	bb 1f       	adc	r27, r27
    5b74:	ee 1f       	adc	r30, r30
    5b76:	ff 1f       	adc	r31, r31
    5b78:	a2 17       	cp	r26, r18
    5b7a:	b3 07       	cpc	r27, r19
    5b7c:	e4 07       	cpc	r30, r20
    5b7e:	f5 07       	cpc	r31, r21
    5b80:	20 f0       	brcs	.+8      	; 0x5b8a <__udivmodsi4_ep>
    5b82:	a2 1b       	sub	r26, r18
    5b84:	b3 0b       	sbc	r27, r19
    5b86:	e4 0b       	sbc	r30, r20
    5b88:	f5 0b       	sbc	r31, r21

00005b8a <__udivmodsi4_ep>:
    5b8a:	66 1f       	adc	r22, r22
    5b8c:	77 1f       	adc	r23, r23
    5b8e:	88 1f       	adc	r24, r24
    5b90:	99 1f       	adc	r25, r25
    5b92:	1a 94       	dec	r1
    5b94:	69 f7       	brne	.-38     	; 0x5b70 <__udivmodsi4_loop>
    5b96:	60 95       	com	r22
    5b98:	70 95       	com	r23
    5b9a:	80 95       	com	r24
    5b9c:	90 95       	com	r25
    5b9e:	9b 01       	movw	r18, r22
    5ba0:	ac 01       	movw	r20, r24
    5ba2:	bd 01       	movw	r22, r26
    5ba4:	cf 01       	movw	r24, r30
    5ba6:	08 95       	ret

00005ba8 <__divmodsi4>:
    5ba8:	05 2e       	mov	r0, r21
    5baa:	97 fb       	bst	r25, 7
    5bac:	1e f4       	brtc	.+6      	; 0x5bb4 <__divmodsi4+0xc>
    5bae:	00 94       	com	r0
    5bb0:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <__negsi2>
    5bb4:	57 fd       	sbrc	r21, 7
    5bb6:	07 d0       	rcall	.+14     	; 0x5bc6 <__divmodsi4_neg2>
    5bb8:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__udivmodsi4>
    5bbc:	07 fc       	sbrc	r0, 7
    5bbe:	03 d0       	rcall	.+6      	; 0x5bc6 <__divmodsi4_neg2>
    5bc0:	4e f4       	brtc	.+18     	; 0x5bd4 <__divmodsi4_exit>
    5bc2:	0c 94 eb 2d 	jmp	0x5bd6	; 0x5bd6 <__negsi2>

00005bc6 <__divmodsi4_neg2>:
    5bc6:	50 95       	com	r21
    5bc8:	40 95       	com	r20
    5bca:	30 95       	com	r19
    5bcc:	21 95       	neg	r18
    5bce:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd0:	4f 4f       	sbci	r20, 0xFF	; 255
    5bd2:	5f 4f       	sbci	r21, 0xFF	; 255

00005bd4 <__divmodsi4_exit>:
    5bd4:	08 95       	ret

00005bd6 <__negsi2>:
    5bd6:	90 95       	com	r25
    5bd8:	80 95       	com	r24
    5bda:	70 95       	com	r23
    5bdc:	61 95       	neg	r22
    5bde:	7f 4f       	sbci	r23, 0xFF	; 255
    5be0:	8f 4f       	sbci	r24, 0xFF	; 255
    5be2:	9f 4f       	sbci	r25, 0xFF	; 255
    5be4:	08 95       	ret

00005be6 <__tablejump2__>:
    5be6:	ee 0f       	add	r30, r30
    5be8:	ff 1f       	adc	r31, r31
    5bea:	05 90       	lpm	r0, Z+
    5bec:	f4 91       	lpm	r31, Z
    5bee:	e0 2d       	mov	r30, r0
    5bf0:	09 94       	ijmp

00005bf2 <__udivmodhi4>:
    5bf2:	aa 1b       	sub	r26, r26
    5bf4:	bb 1b       	sub	r27, r27
    5bf6:	51 e1       	ldi	r21, 0x11	; 17
    5bf8:	07 c0       	rjmp	.+14     	; 0x5c08 <__udivmodhi4_ep>

00005bfa <__udivmodhi4_loop>:
    5bfa:	aa 1f       	adc	r26, r26
    5bfc:	bb 1f       	adc	r27, r27
    5bfe:	a6 17       	cp	r26, r22
    5c00:	b7 07       	cpc	r27, r23
    5c02:	10 f0       	brcs	.+4      	; 0x5c08 <__udivmodhi4_ep>
    5c04:	a6 1b       	sub	r26, r22
    5c06:	b7 0b       	sbc	r27, r23

00005c08 <__udivmodhi4_ep>:
    5c08:	88 1f       	adc	r24, r24
    5c0a:	99 1f       	adc	r25, r25
    5c0c:	5a 95       	dec	r21
    5c0e:	a9 f7       	brne	.-22     	; 0x5bfa <__udivmodhi4_loop>
    5c10:	80 95       	com	r24
    5c12:	90 95       	com	r25
    5c14:	bc 01       	movw	r22, r24
    5c16:	cd 01       	movw	r24, r26
    5c18:	08 95       	ret

00005c1a <eeprom_read_byte>:
    5c1a:	f9 99       	sbic	0x1f, 1	; 31
    5c1c:	fe cf       	rjmp	.-4      	; 0x5c1a <eeprom_read_byte>
    5c1e:	92 bd       	out	0x22, r25	; 34
    5c20:	81 bd       	out	0x21, r24	; 33
    5c22:	f8 9a       	sbi	0x1f, 0	; 31
    5c24:	99 27       	eor	r25, r25
    5c26:	80 b5       	in	r24, 0x20	; 32
    5c28:	08 95       	ret

00005c2a <eeprom_write_byte>:
    5c2a:	26 2f       	mov	r18, r22

00005c2c <eeprom_write_r18>:
    5c2c:	f9 99       	sbic	0x1f, 1	; 31
    5c2e:	fe cf       	rjmp	.-4      	; 0x5c2c <eeprom_write_r18>
    5c30:	1f ba       	out	0x1f, r1	; 31
    5c32:	92 bd       	out	0x22, r25	; 34
    5c34:	81 bd       	out	0x21, r24	; 33
    5c36:	20 bd       	out	0x20, r18	; 32
    5c38:	0f b6       	in	r0, 0x3f	; 63
    5c3a:	f8 94       	cli
    5c3c:	fa 9a       	sbi	0x1f, 2	; 31
    5c3e:	f9 9a       	sbi	0x1f, 1	; 31
    5c40:	0f be       	out	0x3f, r0	; 63
    5c42:	01 96       	adiw	r24, 0x01	; 1
    5c44:	08 95       	ret

00005c46 <_exit>:
    5c46:	f8 94       	cli

00005c48 <__stop_program>:
    5c48:	ff cf       	rjmp	.-2      	; 0x5c48 <__stop_program>
